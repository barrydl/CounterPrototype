

Microchip MPLAB XC8 Assembler V3.10 build 20250813170317 
                                                                                               Fri Sep  5 12:07:39 2025

Microchip MPLAB XC8 C Compiler v3.10 (Free license) build 20250813170317 Og1 
     1                           	processor	16LF1509
     2                           	pagewidth 120
     3                           	opt	flic
     4                           	psect	idataBANK0,global,class=CODE,space=0,delta=2,noexec
     5                           	psect	stringtext1,global,class=STRCODE,space=0,delta=2,noexec
     6                           	psect	nvBANK0,global,class=BANK0,space=1,delta=1,noexec
     7                           	psect	cinit,global,class=CODE,space=0,merge=1,delta=2
     8                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,noexec
     9                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1,noexec
    10                           	psect	clrtext,global,class=CODE,space=0,delta=2
    11                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1,noexec
    12                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1,noexec
    13                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
    14                           	psect	maintext,global,class=CODE,space=0,merge=1,split=1,delta=2
    15                           	psect	text1,local,class=CODE,space=0,merge=1,delta=2
    16                           	psect	text2,local,class=CODE,space=0,merge=1,delta=2
    17                           	psect	text3,local,class=CODE,space=0,merge=1,delta=2
    18                           	psect	text4,local,class=CODE,space=0,merge=1,delta=2
    19                           	psect	text5,local,class=CODE,space=0,merge=1,delta=2
    20                           	psect	text6,local,class=CODE,space=0,merge=1,delta=2
    21                           	psect	text7,local,class=CODE,space=0,merge=1,delta=2
    22                           	psect	text8,local,class=CODE,space=0,merge=1,delta=2
    23                           	psect	text9,local,class=CODE,space=0,merge=1,delta=2
    24                           	psect	text10,local,class=CODE,space=0,merge=1,delta=2,group=1
    25                           	psect	text11,local,class=CODE,space=0,merge=1,delta=2,group=1
    26                           	psect	text12,local,class=CODE,space=0,merge=1,delta=2
    27                           	psect	intentry,global,class=CODE,space=0,delta=2
    28                           	psect	text14,local,class=CODE,space=0,merge=1,delta=2
    29                           	psect	text15,local,class=CODE,space=0,merge=1,delta=2
    30                           	psect	text16,local,class=CODE,space=0,merge=1,delta=2
    31                           	psect	text17,local,class=CODE,space=0,merge=1,delta=2
    32                           	psect	text18,local,class=CODE,space=0,merge=1,delta=2
    33                           	psect	text19,local,class=CODE,space=0,merge=1,delta=2
    34                           	psect	text20,local,class=CODE,space=0,merge=1,delta=2
    35                           	psect	text21,local,class=CODE,space=0,merge=1,delta=2
    36                           	psect	text22,local,class=CODE,space=0,merge=1,delta=2
    37                           	psect	text23,local,class=CODE,space=0,merge=1,delta=2
    38                           	psect	text24,local,class=CODE,space=0,merge=1,delta=2
    39                           	psect	text25,local,class=CODE,space=0,merge=1,delta=2
    40                           	psect	idloc,global,abs,ovrld,class=IDLOC,space=5,delta=2,noexec
    41                           	psect	config,global,abs,ovrld,class=CONFIG,space=4,delta=2,noexec
    42                           	dabs	1,0x7E,2
    43     0000                     
    44                           ; Version 2.40
    45                           ; Generated 17/11/2021 GMT
    46                           ; 
    47                           ; Copyright Â© 2021, Microchip Technology Inc. and its subsidiaries ("Microchip")
    48                           ; All rights reserved.
    49                           ; 
    50                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    51                           ; 
    52                           ; Redistribution and use in source and binary forms, with or without modification, are
    53                           ; permitted provided that the following conditions are met:
    54                           ; 
    55                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    56                           ;        conditions and the following disclaimer.
    57                           ; 
    58                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    59                           ;        of conditions and the following disclaimer in the documentation and/or other
    60                           ;        materials provided with the distribution. Publication is not required when
    61                           ;        this file is used in an embedded application.
    62                           ; 
    63                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    64                           ;        software without specific prior written permission.
    65                           ; 
    66                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    67                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    68                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    69                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    70                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    71                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    72                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    73                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    74                           ; 
    75                           ; 
    76                           ; Code-generator required, PIC16LF1509 Definitions
    77                           ; 
    78                           ; SFR Addresses
    79     0008                     bsr             equ	8
    80     0005                     fsr0h           equ	5
    81     0004                     fsr0l           equ	4
    82     0007                     fsr1h           equ	7
    83     0006                     fsr1l           equ	6
    84     0000                     indf            equ	0
    85     0000                     indf0           equ	0
    86     0001                     indf1           equ	1
    87     000B                     intcon          equ	11
    88     0002                     pc              equ	2
    89     0002                     pcl             equ	2
    90     000A                     pclath          equ	10
    91     0003                     status          equ	3
    92     0009                     wreg            equ	9
    93     0000                     INDF0           equ	0	;# 
    94     0001                     INDF1           equ	1	;# 
    95     0002                     PCL             equ	2	;# 
    96     0003                     STATUS          equ	3	;# 
    97     0004                     FSR0L           equ	4	;# 
    98     0005                     FSR0H           equ	5	;# 
    99     0006                     FSR1L           equ	6	;# 
   100     0007                     FSR1H           equ	7	;# 
   101     0008                     BSR             equ	8	;# 
   102     0009                     WREG            equ	9	;# 
   103     000A                     PCLATH          equ	10	;# 
   104     000B                     INTCON          equ	11	;# 
   105     000C                     PORTA           equ	12	;# 
   106     000D                     PORTB           equ	13	;# 
   107     000E                     PORTC           equ	14	;# 
   108     0011                     PIR1            equ	17	;# 
   109     0012                     PIR2            equ	18	;# 
   110     0013                     PIR3            equ	19	;# 
   111     0015                     TMR0            equ	21	;# 
   112     0016                     TMR1            equ	22	;# 
   113     0016                     TMR1L           equ	22	;# 
   114     0017                     TMR1H           equ	23	;# 
   115     0018                     T1CON           equ	24	;# 
   116     0019                     T1GCON          equ	25	;# 
   117     001A                     TMR2            equ	26	;# 
   118     001B                     PR2             equ	27	;# 
   119     001C                     T2CON           equ	28	;# 
   120     008C                     TRISA           equ	140	;# 
   121     008D                     TRISB           equ	141	;# 
   122     008E                     TRISC           equ	142	;# 
   123     0091                     PIE1            equ	145	;# 
   124     0092                     PIE2            equ	146	;# 
   125     0093                     PIE3            equ	147	;# 
   126     0095                     OPTION_REG      equ	149	;# 
   127     0096                     PCON            equ	150	;# 
   128     0097                     WDTCON          equ	151	;# 
   129     0099                     OSCCON          equ	153	;# 
   130     009A                     OSCSTAT         equ	154	;# 
   131     009B                     ADRES           equ	155	;# 
   132     009B                     ADRESL          equ	155	;# 
   133     009C                     ADRESH          equ	156	;# 
   134     009D                     ADCON0          equ	157	;# 
   135     009E                     ADCON1          equ	158	;# 
   136     009F                     ADCON2          equ	159	;# 
   137     010C                     LATA            equ	268	;# 
   138     010D                     LATB            equ	269	;# 
   139     010E                     LATC            equ	270	;# 
   140     0111                     CM1CON0         equ	273	;# 
   141     0112                     CM1CON1         equ	274	;# 
   142     0113                     CM2CON0         equ	275	;# 
   143     0114                     CM2CON1         equ	276	;# 
   144     0115                     CMOUT           equ	277	;# 
   145     0116                     BORCON          equ	278	;# 
   146     0117                     FVRCON          equ	279	;# 
   147     0118                     DACCON0         equ	280	;# 
   148     0119                     DACCON1         equ	281	;# 
   149     011D                     APFCON          equ	285	;# 
   150     018C                     ANSELA          equ	396	;# 
   151     018D                     ANSELB          equ	397	;# 
   152     018E                     ANSELC          equ	398	;# 
   153     0191                     PMADR           equ	401	;# 
   154     0191                     PMADRL          equ	401	;# 
   155     0192                     PMADRH          equ	402	;# 
   156     0193                     PMDAT           equ	403	;# 
   157     0193                     PMDATL          equ	403	;# 
   158     0194                     PMDATH          equ	404	;# 
   159     0195                     PMCON1          equ	405	;# 
   160     0196                     PMCON2          equ	406	;# 
   161     0199                     RCREG           equ	409	;# 
   162     019A                     TXREG           equ	410	;# 
   163     019B                     SPBRG           equ	411	;# 
   164     019B                     SPBRGL          equ	411	;# 
   165     019C                     SPBRGH          equ	412	;# 
   166     019D                     RCSTA           equ	413	;# 
   167     019E                     TXSTA           equ	414	;# 
   168     019F                     BAUDCON         equ	415	;# 
   169     020C                     WPUA            equ	524	;# 
   170     020D                     WPUB            equ	525	;# 
   171     0211                     SSP1BUF         equ	529	;# 
   172     0211                     SSPBUF          equ	529	;# 
   173     0212                     SSP1ADD         equ	530	;# 
   174     0212                     SSPADD          equ	530	;# 
   175     0213                     SSP1MSK         equ	531	;# 
   176     0213                     SSPMSK          equ	531	;# 
   177     0214                     SSP1STAT        equ	532	;# 
   178     0214                     SSPSTAT         equ	532	;# 
   179     0215                     SSP1CON1        equ	533	;# 
   180     0215                     SSPCON          equ	533	;# 
   181     0215                     SSPCON1         equ	533	;# 
   182     0216                     SSP1CON2        equ	534	;# 
   183     0216                     SSPCON2         equ	534	;# 
   184     0217                     SSP1CON3        equ	535	;# 
   185     0217                     SSPCON3         equ	535	;# 
   186     0391                     IOCAP           equ	913	;# 
   187     0392                     IOCAN           equ	914	;# 
   188     0393                     IOCAF           equ	915	;# 
   189     0394                     IOCBP           equ	916	;# 
   190     0395                     IOCBN           equ	917	;# 
   191     0396                     IOCBF           equ	918	;# 
   192     0498                     NCO1ACC         equ	1176	;# 
   193     0498                     NCO1ACCL        equ	1176	;# 
   194     0499                     NCO1ACCH        equ	1177	;# 
   195     049A                     NCO1ACCU        equ	1178	;# 
   196     049B                     NCO1INC         equ	1179	;# 
   197     049B                     NCO1INCL        equ	1179	;# 
   198     049C                     NCO1INCH        equ	1180	;# 
   199     049D                     NCO1INCU        equ	1181	;# 
   200     049E                     NCO1CON         equ	1182	;# 
   201     049F                     NCO1CLK         equ	1183	;# 
   202     0611                     PWM1DCL         equ	1553	;# 
   203     0612                     PWM1DCH         equ	1554	;# 
   204     0613                     PWM1CON         equ	1555	;# 
   205     0613                     PWM1CON0        equ	1555	;# 
   206     0614                     PWM2DCL         equ	1556	;# 
   207     0615                     PWM2DCH         equ	1557	;# 
   208     0616                     PWM2CON         equ	1558	;# 
   209     0616                     PWM2CON0        equ	1558	;# 
   210     0617                     PWM3DCL         equ	1559	;# 
   211     0618                     PWM3DCH         equ	1560	;# 
   212     0619                     PWM3CON         equ	1561	;# 
   213     0619                     PWM3CON0        equ	1561	;# 
   214     061A                     PWM4DCL         equ	1562	;# 
   215     061B                     PWM4DCH         equ	1563	;# 
   216     061C                     PWM4CON         equ	1564	;# 
   217     061C                     PWM4CON0        equ	1564	;# 
   218     0691                     CWG1DBR         equ	1681	;# 
   219     0692                     CWG1DBF         equ	1682	;# 
   220     0693                     CWG1CON0        equ	1683	;# 
   221     0694                     CWG1CON1        equ	1684	;# 
   222     0695                     CWG1CON2        equ	1685	;# 
   223     0F0F                     CLCDATA         equ	3855	;# 
   224     0F10                     CLC1CON         equ	3856	;# 
   225     0F11                     CLC1POL         equ	3857	;# 
   226     0F12                     CLC1SEL0        equ	3858	;# 
   227     0F13                     CLC1SEL1        equ	3859	;# 
   228     0F14                     CLC1GLS0        equ	3860	;# 
   229     0F15                     CLC1GLS1        equ	3861	;# 
   230     0F16                     CLC1GLS2        equ	3862	;# 
   231     0F17                     CLC1GLS3        equ	3863	;# 
   232     0F18                     CLC2CON         equ	3864	;# 
   233     0F19                     CLC2POL         equ	3865	;# 
   234     0F1A                     CLC2SEL0        equ	3866	;# 
   235     0F1B                     CLC2SEL1        equ	3867	;# 
   236     0F1C                     CLC2GLS0        equ	3868	;# 
   237     0F1D                     CLC2GLS1        equ	3869	;# 
   238     0F1E                     CLC2GLS2        equ	3870	;# 
   239     0F1F                     CLC2GLS3        equ	3871	;# 
   240     0F20                     CLC3CON         equ	3872	;# 
   241     0F21                     CLC3POL         equ	3873	;# 
   242     0F22                     CLC3SEL0        equ	3874	;# 
   243     0F23                     CLC3SEL1        equ	3875	;# 
   244     0F24                     CLC3GLS0        equ	3876	;# 
   245     0F25                     CLC3GLS1        equ	3877	;# 
   246     0F26                     CLC3GLS2        equ	3878	;# 
   247     0F27                     CLC3GLS3        equ	3879	;# 
   248     0F28                     CLC4CON         equ	3880	;# 
   249     0F29                     CLC4POL         equ	3881	;# 
   250     0F2A                     CLC4SEL0        equ	3882	;# 
   251     0F2B                     CLC4SEL1        equ	3883	;# 
   252     0F2C                     CLC4GLS0        equ	3884	;# 
   253     0F2D                     CLC4GLS1        equ	3885	;# 
   254     0F2E                     CLC4GLS2        equ	3886	;# 
   255     0F2F                     CLC4GLS3        equ	3887	;# 
   256     0F8C                     ICDIO           equ	3980	;# 
   257     0F8D                     ICDCON0         equ	3981	;# 
   258     0F91                     ICDSTAT         equ	3985	;# 
   259     0F95                     DEVSEL          equ	3989	;# 
   260     0F96                     ICDINSTL        equ	3990	;# 
   261     0F97                     ICDINSTH        equ	3991	;# 
   262     0F9C                     ICDBK0CON       equ	3996	;# 
   263     0F9D                     ICDBK0L         equ	3997	;# 
   264     0F9E                     ICDBK0H         equ	3998	;# 
   265     0FE3                     BSRICDSHAD      equ	4067	;# 
   266     0FE4                     STATUS_SHAD     equ	4068	;# 
   267     0FE5                     WREG_SHAD       equ	4069	;# 
   268     0FE6                     BSR_SHAD        equ	4070	;# 
   269     0FE7                     PCLATH_SHAD     equ	4071	;# 
   270     0FE8                     FSR0L_SHAD      equ	4072	;# 
   271     0FE9                     FSR0H_SHAD      equ	4073	;# 
   272     0FEA                     FSR1L_SHAD      equ	4074	;# 
   273     0FEB                     FSR1H_SHAD      equ	4075	;# 
   274     0FED                     STKPTR          equ	4077	;# 
   275     0FEE                     TOSL            equ	4078	;# 
   276     0FEF                     TOSH            equ	4079	;# 
   277     0000                     INDF0           equ	0	;# 
   278     0001                     INDF1           equ	1	;# 
   279     0002                     PCL             equ	2	;# 
   280     0003                     STATUS          equ	3	;# 
   281     0004                     FSR0L           equ	4	;# 
   282     0005                     FSR0H           equ	5	;# 
   283     0006                     FSR1L           equ	6	;# 
   284     0007                     FSR1H           equ	7	;# 
   285     0008                     BSR             equ	8	;# 
   286     0009                     WREG            equ	9	;# 
   287     000A                     PCLATH          equ	10	;# 
   288     000B                     INTCON          equ	11	;# 
   289     000C                     PORTA           equ	12	;# 
   290     000D                     PORTB           equ	13	;# 
   291     000E                     PORTC           equ	14	;# 
   292     0011                     PIR1            equ	17	;# 
   293     0012                     PIR2            equ	18	;# 
   294     0013                     PIR3            equ	19	;# 
   295     0015                     TMR0            equ	21	;# 
   296     0016                     TMR1            equ	22	;# 
   297     0016                     TMR1L           equ	22	;# 
   298     0017                     TMR1H           equ	23	;# 
   299     0018                     T1CON           equ	24	;# 
   300     0019                     T1GCON          equ	25	;# 
   301     001A                     TMR2            equ	26	;# 
   302     001B                     PR2             equ	27	;# 
   303     001C                     T2CON           equ	28	;# 
   304     008C                     TRISA           equ	140	;# 
   305     008D                     TRISB           equ	141	;# 
   306     008E                     TRISC           equ	142	;# 
   307     0091                     PIE1            equ	145	;# 
   308     0092                     PIE2            equ	146	;# 
   309     0093                     PIE3            equ	147	;# 
   310     0095                     OPTION_REG      equ	149	;# 
   311     0096                     PCON            equ	150	;# 
   312     0097                     WDTCON          equ	151	;# 
   313     0099                     OSCCON          equ	153	;# 
   314     009A                     OSCSTAT         equ	154	;# 
   315     009B                     ADRES           equ	155	;# 
   316     009B                     ADRESL          equ	155	;# 
   317     009C                     ADRESH          equ	156	;# 
   318     009D                     ADCON0          equ	157	;# 
   319     009E                     ADCON1          equ	158	;# 
   320     009F                     ADCON2          equ	159	;# 
   321     010C                     LATA            equ	268	;# 
   322     010D                     LATB            equ	269	;# 
   323     010E                     LATC            equ	270	;# 
   324     0111                     CM1CON0         equ	273	;# 
   325     0112                     CM1CON1         equ	274	;# 
   326     0113                     CM2CON0         equ	275	;# 
   327     0114                     CM2CON1         equ	276	;# 
   328     0115                     CMOUT           equ	277	;# 
   329     0116                     BORCON          equ	278	;# 
   330     0117                     FVRCON          equ	279	;# 
   331     0118                     DACCON0         equ	280	;# 
   332     0119                     DACCON1         equ	281	;# 
   333     011D                     APFCON          equ	285	;# 
   334     018C                     ANSELA          equ	396	;# 
   335     018D                     ANSELB          equ	397	;# 
   336     018E                     ANSELC          equ	398	;# 
   337     0191                     PMADR           equ	401	;# 
   338     0191                     PMADRL          equ	401	;# 
   339     0192                     PMADRH          equ	402	;# 
   340     0193                     PMDAT           equ	403	;# 
   341     0193                     PMDATL          equ	403	;# 
   342     0194                     PMDATH          equ	404	;# 
   343     0195                     PMCON1          equ	405	;# 
   344     0196                     PMCON2          equ	406	;# 
   345     0199                     RCREG           equ	409	;# 
   346     019A                     TXREG           equ	410	;# 
   347     019B                     SPBRG           equ	411	;# 
   348     019B                     SPBRGL          equ	411	;# 
   349     019C                     SPBRGH          equ	412	;# 
   350     019D                     RCSTA           equ	413	;# 
   351     019E                     TXSTA           equ	414	;# 
   352     019F                     BAUDCON         equ	415	;# 
   353     020C                     WPUA            equ	524	;# 
   354     020D                     WPUB            equ	525	;# 
   355     0211                     SSP1BUF         equ	529	;# 
   356     0211                     SSPBUF          equ	529	;# 
   357     0212                     SSP1ADD         equ	530	;# 
   358     0212                     SSPADD          equ	530	;# 
   359     0213                     SSP1MSK         equ	531	;# 
   360     0213                     SSPMSK          equ	531	;# 
   361     0214                     SSP1STAT        equ	532	;# 
   362     0214                     SSPSTAT         equ	532	;# 
   363     0215                     SSP1CON1        equ	533	;# 
   364     0215                     SSPCON          equ	533	;# 
   365     0215                     SSPCON1         equ	533	;# 
   366     0216                     SSP1CON2        equ	534	;# 
   367     0216                     SSPCON2         equ	534	;# 
   368     0217                     SSP1CON3        equ	535	;# 
   369     0217                     SSPCON3         equ	535	;# 
   370     0391                     IOCAP           equ	913	;# 
   371     0392                     IOCAN           equ	914	;# 
   372     0393                     IOCAF           equ	915	;# 
   373     0394                     IOCBP           equ	916	;# 
   374     0395                     IOCBN           equ	917	;# 
   375     0396                     IOCBF           equ	918	;# 
   376     0498                     NCO1ACC         equ	1176	;# 
   377     0498                     NCO1ACCL        equ	1176	;# 
   378     0499                     NCO1ACCH        equ	1177	;# 
   379     049A                     NCO1ACCU        equ	1178	;# 
   380     049B                     NCO1INC         equ	1179	;# 
   381     049B                     NCO1INCL        equ	1179	;# 
   382     049C                     NCO1INCH        equ	1180	;# 
   383     049D                     NCO1INCU        equ	1181	;# 
   384     049E                     NCO1CON         equ	1182	;# 
   385     049F                     NCO1CLK         equ	1183	;# 
   386     0611                     PWM1DCL         equ	1553	;# 
   387     0612                     PWM1DCH         equ	1554	;# 
   388     0613                     PWM1CON         equ	1555	;# 
   389     0613                     PWM1CON0        equ	1555	;# 
   390     0614                     PWM2DCL         equ	1556	;# 
   391     0615                     PWM2DCH         equ	1557	;# 
   392     0616                     PWM2CON         equ	1558	;# 
   393     0616                     PWM2CON0        equ	1558	;# 
   394     0617                     PWM3DCL         equ	1559	;# 
   395     0618                     PWM3DCH         equ	1560	;# 
   396     0619                     PWM3CON         equ	1561	;# 
   397     0619                     PWM3CON0        equ	1561	;# 
   398     061A                     PWM4DCL         equ	1562	;# 
   399     061B                     PWM4DCH         equ	1563	;# 
   400     061C                     PWM4CON         equ	1564	;# 
   401     061C                     PWM4CON0        equ	1564	;# 
   402     0691                     CWG1DBR         equ	1681	;# 
   403     0692                     CWG1DBF         equ	1682	;# 
   404     0693                     CWG1CON0        equ	1683	;# 
   405     0694                     CWG1CON1        equ	1684	;# 
   406     0695                     CWG1CON2        equ	1685	;# 
   407     0F0F                     CLCDATA         equ	3855	;# 
   408     0F10                     CLC1CON         equ	3856	;# 
   409     0F11                     CLC1POL         equ	3857	;# 
   410     0F12                     CLC1SEL0        equ	3858	;# 
   411     0F13                     CLC1SEL1        equ	3859	;# 
   412     0F14                     CLC1GLS0        equ	3860	;# 
   413     0F15                     CLC1GLS1        equ	3861	;# 
   414     0F16                     CLC1GLS2        equ	3862	;# 
   415     0F17                     CLC1GLS3        equ	3863	;# 
   416     0F18                     CLC2CON         equ	3864	;# 
   417     0F19                     CLC2POL         equ	3865	;# 
   418     0F1A                     CLC2SEL0        equ	3866	;# 
   419     0F1B                     CLC2SEL1        equ	3867	;# 
   420     0F1C                     CLC2GLS0        equ	3868	;# 
   421     0F1D                     CLC2GLS1        equ	3869	;# 
   422     0F1E                     CLC2GLS2        equ	3870	;# 
   423     0F1F                     CLC2GLS3        equ	3871	;# 
   424     0F20                     CLC3CON         equ	3872	;# 
   425     0F21                     CLC3POL         equ	3873	;# 
   426     0F22                     CLC3SEL0        equ	3874	;# 
   427     0F23                     CLC3SEL1        equ	3875	;# 
   428     0F24                     CLC3GLS0        equ	3876	;# 
   429     0F25                     CLC3GLS1        equ	3877	;# 
   430     0F26                     CLC3GLS2        equ	3878	;# 
   431     0F27                     CLC3GLS3        equ	3879	;# 
   432     0F28                     CLC4CON         equ	3880	;# 
   433     0F29                     CLC4POL         equ	3881	;# 
   434     0F2A                     CLC4SEL0        equ	3882	;# 
   435     0F2B                     CLC4SEL1        equ	3883	;# 
   436     0F2C                     CLC4GLS0        equ	3884	;# 
   437     0F2D                     CLC4GLS1        equ	3885	;# 
   438     0F2E                     CLC4GLS2        equ	3886	;# 
   439     0F2F                     CLC4GLS3        equ	3887	;# 
   440     0F8C                     ICDIO           equ	3980	;# 
   441     0F8D                     ICDCON0         equ	3981	;# 
   442     0F91                     ICDSTAT         equ	3985	;# 
   443     0F95                     DEVSEL          equ	3989	;# 
   444     0F96                     ICDINSTL        equ	3990	;# 
   445     0F97                     ICDINSTH        equ	3991	;# 
   446     0F9C                     ICDBK0CON       equ	3996	;# 
   447     0F9D                     ICDBK0L         equ	3997	;# 
   448     0F9E                     ICDBK0H         equ	3998	;# 
   449     0FE3                     BSRICDSHAD      equ	4067	;# 
   450     0FE4                     STATUS_SHAD     equ	4068	;# 
   451     0FE5                     WREG_SHAD       equ	4069	;# 
   452     0FE6                     BSR_SHAD        equ	4070	;# 
   453     0FE7                     PCLATH_SHAD     equ	4071	;# 
   454     0FE8                     FSR0L_SHAD      equ	4072	;# 
   455     0FE9                     FSR0H_SHAD      equ	4073	;# 
   456     0FEA                     FSR1L_SHAD      equ	4074	;# 
   457     0FEB                     FSR1H_SHAD      equ	4075	;# 
   458     0FED                     STKPTR          equ	4077	;# 
   459     0FEE                     TOSL            equ	4078	;# 
   460     0FEF                     TOSH            equ	4079	;# 
   461     0000                     INDF0           equ	0	;# 
   462     0001                     INDF1           equ	1	;# 
   463     0002                     PCL             equ	2	;# 
   464     0003                     STATUS          equ	3	;# 
   465     0004                     FSR0L           equ	4	;# 
   466     0005                     FSR0H           equ	5	;# 
   467     0006                     FSR1L           equ	6	;# 
   468     0007                     FSR1H           equ	7	;# 
   469     0008                     BSR             equ	8	;# 
   470     0009                     WREG            equ	9	;# 
   471     000A                     PCLATH          equ	10	;# 
   472     000B                     INTCON          equ	11	;# 
   473     000C                     PORTA           equ	12	;# 
   474     000D                     PORTB           equ	13	;# 
   475     000E                     PORTC           equ	14	;# 
   476     0011                     PIR1            equ	17	;# 
   477     0012                     PIR2            equ	18	;# 
   478     0013                     PIR3            equ	19	;# 
   479     0015                     TMR0            equ	21	;# 
   480     0016                     TMR1            equ	22	;# 
   481     0016                     TMR1L           equ	22	;# 
   482     0017                     TMR1H           equ	23	;# 
   483     0018                     T1CON           equ	24	;# 
   484     0019                     T1GCON          equ	25	;# 
   485     001A                     TMR2            equ	26	;# 
   486     001B                     PR2             equ	27	;# 
   487     001C                     T2CON           equ	28	;# 
   488     008C                     TRISA           equ	140	;# 
   489     008D                     TRISB           equ	141	;# 
   490     008E                     TRISC           equ	142	;# 
   491     0091                     PIE1            equ	145	;# 
   492     0092                     PIE2            equ	146	;# 
   493     0093                     PIE3            equ	147	;# 
   494     0095                     OPTION_REG      equ	149	;# 
   495     0096                     PCON            equ	150	;# 
   496     0097                     WDTCON          equ	151	;# 
   497     0099                     OSCCON          equ	153	;# 
   498     009A                     OSCSTAT         equ	154	;# 
   499     009B                     ADRES           equ	155	;# 
   500     009B                     ADRESL          equ	155	;# 
   501     009C                     ADRESH          equ	156	;# 
   502     009D                     ADCON0          equ	157	;# 
   503     009E                     ADCON1          equ	158	;# 
   504     009F                     ADCON2          equ	159	;# 
   505     010C                     LATA            equ	268	;# 
   506     010D                     LATB            equ	269	;# 
   507     010E                     LATC            equ	270	;# 
   508     0111                     CM1CON0         equ	273	;# 
   509     0112                     CM1CON1         equ	274	;# 
   510     0113                     CM2CON0         equ	275	;# 
   511     0114                     CM2CON1         equ	276	;# 
   512     0115                     CMOUT           equ	277	;# 
   513     0116                     BORCON          equ	278	;# 
   514     0117                     FVRCON          equ	279	;# 
   515     0118                     DACCON0         equ	280	;# 
   516     0119                     DACCON1         equ	281	;# 
   517     011D                     APFCON          equ	285	;# 
   518     018C                     ANSELA          equ	396	;# 
   519     018D                     ANSELB          equ	397	;# 
   520     018E                     ANSELC          equ	398	;# 
   521     0191                     PMADR           equ	401	;# 
   522     0191                     PMADRL          equ	401	;# 
   523     0192                     PMADRH          equ	402	;# 
   524     0193                     PMDAT           equ	403	;# 
   525     0193                     PMDATL          equ	403	;# 
   526     0194                     PMDATH          equ	404	;# 
   527     0195                     PMCON1          equ	405	;# 
   528     0196                     PMCON2          equ	406	;# 
   529     0199                     RCREG           equ	409	;# 
   530     019A                     TXREG           equ	410	;# 
   531     019B                     SPBRG           equ	411	;# 
   532     019B                     SPBRGL          equ	411	;# 
   533     019C                     SPBRGH          equ	412	;# 
   534     019D                     RCSTA           equ	413	;# 
   535     019E                     TXSTA           equ	414	;# 
   536     019F                     BAUDCON         equ	415	;# 
   537     020C                     WPUA            equ	524	;# 
   538     020D                     WPUB            equ	525	;# 
   539     0211                     SSP1BUF         equ	529	;# 
   540     0211                     SSPBUF          equ	529	;# 
   541     0212                     SSP1ADD         equ	530	;# 
   542     0212                     SSPADD          equ	530	;# 
   543     0213                     SSP1MSK         equ	531	;# 
   544     0213                     SSPMSK          equ	531	;# 
   545     0214                     SSP1STAT        equ	532	;# 
   546     0214                     SSPSTAT         equ	532	;# 
   547     0215                     SSP1CON1        equ	533	;# 
   548     0215                     SSPCON          equ	533	;# 
   549     0215                     SSPCON1         equ	533	;# 
   550     0216                     SSP1CON2        equ	534	;# 
   551     0216                     SSPCON2         equ	534	;# 
   552     0217                     SSP1CON3        equ	535	;# 
   553     0217                     SSPCON3         equ	535	;# 
   554     0391                     IOCAP           equ	913	;# 
   555     0392                     IOCAN           equ	914	;# 
   556     0393                     IOCAF           equ	915	;# 
   557     0394                     IOCBP           equ	916	;# 
   558     0395                     IOCBN           equ	917	;# 
   559     0396                     IOCBF           equ	918	;# 
   560     0498                     NCO1ACC         equ	1176	;# 
   561     0498                     NCO1ACCL        equ	1176	;# 
   562     0499                     NCO1ACCH        equ	1177	;# 
   563     049A                     NCO1ACCU        equ	1178	;# 
   564     049B                     NCO1INC         equ	1179	;# 
   565     049B                     NCO1INCL        equ	1179	;# 
   566     049C                     NCO1INCH        equ	1180	;# 
   567     049D                     NCO1INCU        equ	1181	;# 
   568     049E                     NCO1CON         equ	1182	;# 
   569     049F                     NCO1CLK         equ	1183	;# 
   570     0611                     PWM1DCL         equ	1553	;# 
   571     0612                     PWM1DCH         equ	1554	;# 
   572     0613                     PWM1CON         equ	1555	;# 
   573     0613                     PWM1CON0        equ	1555	;# 
   574     0614                     PWM2DCL         equ	1556	;# 
   575     0615                     PWM2DCH         equ	1557	;# 
   576     0616                     PWM2CON         equ	1558	;# 
   577     0616                     PWM2CON0        equ	1558	;# 
   578     0617                     PWM3DCL         equ	1559	;# 
   579     0618                     PWM3DCH         equ	1560	;# 
   580     0619                     PWM3CON         equ	1561	;# 
   581     0619                     PWM3CON0        equ	1561	;# 
   582     061A                     PWM4DCL         equ	1562	;# 
   583     061B                     PWM4DCH         equ	1563	;# 
   584     061C                     PWM4CON         equ	1564	;# 
   585     061C                     PWM4CON0        equ	1564	;# 
   586     0691                     CWG1DBR         equ	1681	;# 
   587     0692                     CWG1DBF         equ	1682	;# 
   588     0693                     CWG1CON0        equ	1683	;# 
   589     0694                     CWG1CON1        equ	1684	;# 
   590     0695                     CWG1CON2        equ	1685	;# 
   591     0F0F                     CLCDATA         equ	3855	;# 
   592     0F10                     CLC1CON         equ	3856	;# 
   593     0F11                     CLC1POL         equ	3857	;# 
   594     0F12                     CLC1SEL0        equ	3858	;# 
   595     0F13                     CLC1SEL1        equ	3859	;# 
   596     0F14                     CLC1GLS0        equ	3860	;# 
   597     0F15                     CLC1GLS1        equ	3861	;# 
   598     0F16                     CLC1GLS2        equ	3862	;# 
   599     0F17                     CLC1GLS3        equ	3863	;# 
   600     0F18                     CLC2CON         equ	3864	;# 
   601     0F19                     CLC2POL         equ	3865	;# 
   602     0F1A                     CLC2SEL0        equ	3866	;# 
   603     0F1B                     CLC2SEL1        equ	3867	;# 
   604     0F1C                     CLC2GLS0        equ	3868	;# 
   605     0F1D                     CLC2GLS1        equ	3869	;# 
   606     0F1E                     CLC2GLS2        equ	3870	;# 
   607     0F1F                     CLC2GLS3        equ	3871	;# 
   608     0F20                     CLC3CON         equ	3872	;# 
   609     0F21                     CLC3POL         equ	3873	;# 
   610     0F22                     CLC3SEL0        equ	3874	;# 
   611     0F23                     CLC3SEL1        equ	3875	;# 
   612     0F24                     CLC3GLS0        equ	3876	;# 
   613     0F25                     CLC3GLS1        equ	3877	;# 
   614     0F26                     CLC3GLS2        equ	3878	;# 
   615     0F27                     CLC3GLS3        equ	3879	;# 
   616     0F28                     CLC4CON         equ	3880	;# 
   617     0F29                     CLC4POL         equ	3881	;# 
   618     0F2A                     CLC4SEL0        equ	3882	;# 
   619     0F2B                     CLC4SEL1        equ	3883	;# 
   620     0F2C                     CLC4GLS0        equ	3884	;# 
   621     0F2D                     CLC4GLS1        equ	3885	;# 
   622     0F2E                     CLC4GLS2        equ	3886	;# 
   623     0F2F                     CLC4GLS3        equ	3887	;# 
   624     0F8C                     ICDIO           equ	3980	;# 
   625     0F8D                     ICDCON0         equ	3981	;# 
   626     0F91                     ICDSTAT         equ	3985	;# 
   627     0F95                     DEVSEL          equ	3989	;# 
   628     0F96                     ICDINSTL        equ	3990	;# 
   629     0F97                     ICDINSTH        equ	3991	;# 
   630     0F9C                     ICDBK0CON       equ	3996	;# 
   631     0F9D                     ICDBK0L         equ	3997	;# 
   632     0F9E                     ICDBK0H         equ	3998	;# 
   633     0FE3                     BSRICDSHAD      equ	4067	;# 
   634     0FE4                     STATUS_SHAD     equ	4068	;# 
   635     0FE5                     WREG_SHAD       equ	4069	;# 
   636     0FE6                     BSR_SHAD        equ	4070	;# 
   637     0FE7                     PCLATH_SHAD     equ	4071	;# 
   638     0FE8                     FSR0L_SHAD      equ	4072	;# 
   639     0FE9                     FSR0H_SHAD      equ	4073	;# 
   640     0FEA                     FSR1L_SHAD      equ	4074	;# 
   641     0FEB                     FSR1H_SHAD      equ	4075	;# 
   642     0FED                     STKPTR          equ	4077	;# 
   643     0FEE                     TOSL            equ	4078	;# 
   644     0FEF                     TOSH            equ	4079	;# 
   645     0000                     INDF0           equ	0	;# 
   646     0001                     INDF1           equ	1	;# 
   647     0002                     PCL             equ	2	;# 
   648     0003                     STATUS          equ	3	;# 
   649     0004                     FSR0L           equ	4	;# 
   650     0005                     FSR0H           equ	5	;# 
   651     0006                     FSR1L           equ	6	;# 
   652     0007                     FSR1H           equ	7	;# 
   653     0008                     BSR             equ	8	;# 
   654     0009                     WREG            equ	9	;# 
   655     000A                     PCLATH          equ	10	;# 
   656     000B                     INTCON          equ	11	;# 
   657     000C                     PORTA           equ	12	;# 
   658     000D                     PORTB           equ	13	;# 
   659     000E                     PORTC           equ	14	;# 
   660     0011                     PIR1            equ	17	;# 
   661     0012                     PIR2            equ	18	;# 
   662     0013                     PIR3            equ	19	;# 
   663     0015                     TMR0            equ	21	;# 
   664     0016                     TMR1            equ	22	;# 
   665     0016                     TMR1L           equ	22	;# 
   666     0017                     TMR1H           equ	23	;# 
   667     0018                     T1CON           equ	24	;# 
   668     0019                     T1GCON          equ	25	;# 
   669     001A                     TMR2            equ	26	;# 
   670     001B                     PR2             equ	27	;# 
   671     001C                     T2CON           equ	28	;# 
   672     008C                     TRISA           equ	140	;# 
   673     008D                     TRISB           equ	141	;# 
   674     008E                     TRISC           equ	142	;# 
   675     0091                     PIE1            equ	145	;# 
   676     0092                     PIE2            equ	146	;# 
   677     0093                     PIE3            equ	147	;# 
   678     0095                     OPTION_REG      equ	149	;# 
   679     0096                     PCON            equ	150	;# 
   680     0097                     WDTCON          equ	151	;# 
   681     0099                     OSCCON          equ	153	;# 
   682     009A                     OSCSTAT         equ	154	;# 
   683     009B                     ADRES           equ	155	;# 
   684     009B                     ADRESL          equ	155	;# 
   685     009C                     ADRESH          equ	156	;# 
   686     009D                     ADCON0          equ	157	;# 
   687     009E                     ADCON1          equ	158	;# 
   688     009F                     ADCON2          equ	159	;# 
   689     010C                     LATA            equ	268	;# 
   690     010D                     LATB            equ	269	;# 
   691     010E                     LATC            equ	270	;# 
   692     0111                     CM1CON0         equ	273	;# 
   693     0112                     CM1CON1         equ	274	;# 
   694     0113                     CM2CON0         equ	275	;# 
   695     0114                     CM2CON1         equ	276	;# 
   696     0115                     CMOUT           equ	277	;# 
   697     0116                     BORCON          equ	278	;# 
   698     0117                     FVRCON          equ	279	;# 
   699     0118                     DACCON0         equ	280	;# 
   700     0119                     DACCON1         equ	281	;# 
   701     011D                     APFCON          equ	285	;# 
   702     018C                     ANSELA          equ	396	;# 
   703     018D                     ANSELB          equ	397	;# 
   704     018E                     ANSELC          equ	398	;# 
   705     0191                     PMADR           equ	401	;# 
   706     0191                     PMADRL          equ	401	;# 
   707     0192                     PMADRH          equ	402	;# 
   708     0193                     PMDAT           equ	403	;# 
   709     0193                     PMDATL          equ	403	;# 
   710     0194                     PMDATH          equ	404	;# 
   711     0195                     PMCON1          equ	405	;# 
   712     0196                     PMCON2          equ	406	;# 
   713     0199                     RCREG           equ	409	;# 
   714     019A                     TXREG           equ	410	;# 
   715     019B                     SPBRG           equ	411	;# 
   716     019B                     SPBRGL          equ	411	;# 
   717     019C                     SPBRGH          equ	412	;# 
   718     019D                     RCSTA           equ	413	;# 
   719     019E                     TXSTA           equ	414	;# 
   720     019F                     BAUDCON         equ	415	;# 
   721     020C                     WPUA            equ	524	;# 
   722     020D                     WPUB            equ	525	;# 
   723     0211                     SSP1BUF         equ	529	;# 
   724     0211                     SSPBUF          equ	529	;# 
   725     0212                     SSP1ADD         equ	530	;# 
   726     0212                     SSPADD          equ	530	;# 
   727     0213                     SSP1MSK         equ	531	;# 
   728     0213                     SSPMSK          equ	531	;# 
   729     0214                     SSP1STAT        equ	532	;# 
   730     0214                     SSPSTAT         equ	532	;# 
   731     0215                     SSP1CON1        equ	533	;# 
   732     0215                     SSPCON          equ	533	;# 
   733     0215                     SSPCON1         equ	533	;# 
   734     0216                     SSP1CON2        equ	534	;# 
   735     0216                     SSPCON2         equ	534	;# 
   736     0217                     SSP1CON3        equ	535	;# 
   737     0217                     SSPCON3         equ	535	;# 
   738     0391                     IOCAP           equ	913	;# 
   739     0392                     IOCAN           equ	914	;# 
   740     0393                     IOCAF           equ	915	;# 
   741     0394                     IOCBP           equ	916	;# 
   742     0395                     IOCBN           equ	917	;# 
   743     0396                     IOCBF           equ	918	;# 
   744     0498                     NCO1ACC         equ	1176	;# 
   745     0498                     NCO1ACCL        equ	1176	;# 
   746     0499                     NCO1ACCH        equ	1177	;# 
   747     049A                     NCO1ACCU        equ	1178	;# 
   748     049B                     NCO1INC         equ	1179	;# 
   749     049B                     NCO1INCL        equ	1179	;# 
   750     049C                     NCO1INCH        equ	1180	;# 
   751     049D                     NCO1INCU        equ	1181	;# 
   752     049E                     NCO1CON         equ	1182	;# 
   753     049F                     NCO1CLK         equ	1183	;# 
   754     0611                     PWM1DCL         equ	1553	;# 
   755     0612                     PWM1DCH         equ	1554	;# 
   756     0613                     PWM1CON         equ	1555	;# 
   757     0613                     PWM1CON0        equ	1555	;# 
   758     0614                     PWM2DCL         equ	1556	;# 
   759     0615                     PWM2DCH         equ	1557	;# 
   760     0616                     PWM2CON         equ	1558	;# 
   761     0616                     PWM2CON0        equ	1558	;# 
   762     0617                     PWM3DCL         equ	1559	;# 
   763     0618                     PWM3DCH         equ	1560	;# 
   764     0619                     PWM3CON         equ	1561	;# 
   765     0619                     PWM3CON0        equ	1561	;# 
   766     061A                     PWM4DCL         equ	1562	;# 
   767     061B                     PWM4DCH         equ	1563	;# 
   768     061C                     PWM4CON         equ	1564	;# 
   769     061C                     PWM4CON0        equ	1564	;# 
   770     0691                     CWG1DBR         equ	1681	;# 
   771     0692                     CWG1DBF         equ	1682	;# 
   772     0693                     CWG1CON0        equ	1683	;# 
   773     0694                     CWG1CON1        equ	1684	;# 
   774     0695                     CWG1CON2        equ	1685	;# 
   775     0F0F                     CLCDATA         equ	3855	;# 
   776     0F10                     CLC1CON         equ	3856	;# 
   777     0F11                     CLC1POL         equ	3857	;# 
   778     0F12                     CLC1SEL0        equ	3858	;# 
   779     0F13                     CLC1SEL1        equ	3859	;# 
   780     0F14                     CLC1GLS0        equ	3860	;# 
   781     0F15                     CLC1GLS1        equ	3861	;# 
   782     0F16                     CLC1GLS2        equ	3862	;# 
   783     0F17                     CLC1GLS3        equ	3863	;# 
   784     0F18                     CLC2CON         equ	3864	;# 
   785     0F19                     CLC2POL         equ	3865	;# 
   786     0F1A                     CLC2SEL0        equ	3866	;# 
   787     0F1B                     CLC2SEL1        equ	3867	;# 
   788     0F1C                     CLC2GLS0        equ	3868	;# 
   789     0F1D                     CLC2GLS1        equ	3869	;# 
   790     0F1E                     CLC2GLS2        equ	3870	;# 
   791     0F1F                     CLC2GLS3        equ	3871	;# 
   792     0F20                     CLC3CON         equ	3872	;# 
   793     0F21                     CLC3POL         equ	3873	;# 
   794     0F22                     CLC3SEL0        equ	3874	;# 
   795     0F23                     CLC3SEL1        equ	3875	;# 
   796     0F24                     CLC3GLS0        equ	3876	;# 
   797     0F25                     CLC3GLS1        equ	3877	;# 
   798     0F26                     CLC3GLS2        equ	3878	;# 
   799     0F27                     CLC3GLS3        equ	3879	;# 
   800     0F28                     CLC4CON         equ	3880	;# 
   801     0F29                     CLC4POL         equ	3881	;# 
   802     0F2A                     CLC4SEL0        equ	3882	;# 
   803     0F2B                     CLC4SEL1        equ	3883	;# 
   804     0F2C                     CLC4GLS0        equ	3884	;# 
   805     0F2D                     CLC4GLS1        equ	3885	;# 
   806     0F2E                     CLC4GLS2        equ	3886	;# 
   807     0F2F                     CLC4GLS3        equ	3887	;# 
   808     0F8C                     ICDIO           equ	3980	;# 
   809     0F8D                     ICDCON0         equ	3981	;# 
   810     0F91                     ICDSTAT         equ	3985	;# 
   811     0F95                     DEVSEL          equ	3989	;# 
   812     0F96                     ICDINSTL        equ	3990	;# 
   813     0F97                     ICDINSTH        equ	3991	;# 
   814     0F9C                     ICDBK0CON       equ	3996	;# 
   815     0F9D                     ICDBK0L         equ	3997	;# 
   816     0F9E                     ICDBK0H         equ	3998	;# 
   817     0FE3                     BSRICDSHAD      equ	4067	;# 
   818     0FE4                     STATUS_SHAD     equ	4068	;# 
   819     0FE5                     WREG_SHAD       equ	4069	;# 
   820     0FE6                     BSR_SHAD        equ	4070	;# 
   821     0FE7                     PCLATH_SHAD     equ	4071	;# 
   822     0FE8                     FSR0L_SHAD      equ	4072	;# 
   823     0FE9                     FSR0H_SHAD      equ	4073	;# 
   824     0FEA                     FSR1L_SHAD      equ	4074	;# 
   825     0FEB                     FSR1H_SHAD      equ	4075	;# 
   826     0FED                     STKPTR          equ	4077	;# 
   827     0FEE                     TOSL            equ	4078	;# 
   828     0FEF                     TOSH            equ	4079	;# 
   829     0000                     INDF0           equ	0	;# 
   830     0001                     INDF1           equ	1	;# 
   831     0002                     PCL             equ	2	;# 
   832     0003                     STATUS          equ	3	;# 
   833     0004                     FSR0L           equ	4	;# 
   834     0005                     FSR0H           equ	5	;# 
   835     0006                     FSR1L           equ	6	;# 
   836     0007                     FSR1H           equ	7	;# 
   837     0008                     BSR             equ	8	;# 
   838     0009                     WREG            equ	9	;# 
   839     000A                     PCLATH          equ	10	;# 
   840     000B                     INTCON          equ	11	;# 
   841     000C                     PORTA           equ	12	;# 
   842     000D                     PORTB           equ	13	;# 
   843     000E                     PORTC           equ	14	;# 
   844     0011                     PIR1            equ	17	;# 
   845     0012                     PIR2            equ	18	;# 
   846     0013                     PIR3            equ	19	;# 
   847     0015                     TMR0            equ	21	;# 
   848     0016                     TMR1            equ	22	;# 
   849     0016                     TMR1L           equ	22	;# 
   850     0017                     TMR1H           equ	23	;# 
   851     0018                     T1CON           equ	24	;# 
   852     0019                     T1GCON          equ	25	;# 
   853     001A                     TMR2            equ	26	;# 
   854     001B                     PR2             equ	27	;# 
   855     001C                     T2CON           equ	28	;# 
   856     008C                     TRISA           equ	140	;# 
   857     008D                     TRISB           equ	141	;# 
   858     008E                     TRISC           equ	142	;# 
   859     0091                     PIE1            equ	145	;# 
   860     0092                     PIE2            equ	146	;# 
   861     0093                     PIE3            equ	147	;# 
   862     0095                     OPTION_REG      equ	149	;# 
   863     0096                     PCON            equ	150	;# 
   864     0097                     WDTCON          equ	151	;# 
   865     0099                     OSCCON          equ	153	;# 
   866     009A                     OSCSTAT         equ	154	;# 
   867     009B                     ADRES           equ	155	;# 
   868     009B                     ADRESL          equ	155	;# 
   869     009C                     ADRESH          equ	156	;# 
   870     009D                     ADCON0          equ	157	;# 
   871     009E                     ADCON1          equ	158	;# 
   872     009F                     ADCON2          equ	159	;# 
   873     010C                     LATA            equ	268	;# 
   874     010D                     LATB            equ	269	;# 
   875     010E                     LATC            equ	270	;# 
   876     0111                     CM1CON0         equ	273	;# 
   877     0112                     CM1CON1         equ	274	;# 
   878     0113                     CM2CON0         equ	275	;# 
   879     0114                     CM2CON1         equ	276	;# 
   880     0115                     CMOUT           equ	277	;# 
   881     0116                     BORCON          equ	278	;# 
   882     0117                     FVRCON          equ	279	;# 
   883     0118                     DACCON0         equ	280	;# 
   884     0119                     DACCON1         equ	281	;# 
   885     011D                     APFCON          equ	285	;# 
   886     018C                     ANSELA          equ	396	;# 
   887     018D                     ANSELB          equ	397	;# 
   888     018E                     ANSELC          equ	398	;# 
   889     0191                     PMADR           equ	401	;# 
   890     0191                     PMADRL          equ	401	;# 
   891     0192                     PMADRH          equ	402	;# 
   892     0193                     PMDAT           equ	403	;# 
   893     0193                     PMDATL          equ	403	;# 
   894     0194                     PMDATH          equ	404	;# 
   895     0195                     PMCON1          equ	405	;# 
   896     0196                     PMCON2          equ	406	;# 
   897     0199                     RCREG           equ	409	;# 
   898     019A                     TXREG           equ	410	;# 
   899     019B                     SPBRG           equ	411	;# 
   900     019B                     SPBRGL          equ	411	;# 
   901     019C                     SPBRGH          equ	412	;# 
   902     019D                     RCSTA           equ	413	;# 
   903     019E                     TXSTA           equ	414	;# 
   904     019F                     BAUDCON         equ	415	;# 
   905     020C                     WPUA            equ	524	;# 
   906     020D                     WPUB            equ	525	;# 
   907     0211                     SSP1BUF         equ	529	;# 
   908     0211                     SSPBUF          equ	529	;# 
   909     0212                     SSP1ADD         equ	530	;# 
   910     0212                     SSPADD          equ	530	;# 
   911     0213                     SSP1MSK         equ	531	;# 
   912     0213                     SSPMSK          equ	531	;# 
   913     0214                     SSP1STAT        equ	532	;# 
   914     0214                     SSPSTAT         equ	532	;# 
   915     0215                     SSP1CON1        equ	533	;# 
   916     0215                     SSPCON          equ	533	;# 
   917     0215                     SSPCON1         equ	533	;# 
   918     0216                     SSP1CON2        equ	534	;# 
   919     0216                     SSPCON2         equ	534	;# 
   920     0217                     SSP1CON3        equ	535	;# 
   921     0217                     SSPCON3         equ	535	;# 
   922     0391                     IOCAP           equ	913	;# 
   923     0392                     IOCAN           equ	914	;# 
   924     0393                     IOCAF           equ	915	;# 
   925     0394                     IOCBP           equ	916	;# 
   926     0395                     IOCBN           equ	917	;# 
   927     0396                     IOCBF           equ	918	;# 
   928     0498                     NCO1ACC         equ	1176	;# 
   929     0498                     NCO1ACCL        equ	1176	;# 
   930     0499                     NCO1ACCH        equ	1177	;# 
   931     049A                     NCO1ACCU        equ	1178	;# 
   932     049B                     NCO1INC         equ	1179	;# 
   933     049B                     NCO1INCL        equ	1179	;# 
   934     049C                     NCO1INCH        equ	1180	;# 
   935     049D                     NCO1INCU        equ	1181	;# 
   936     049E                     NCO1CON         equ	1182	;# 
   937     049F                     NCO1CLK         equ	1183	;# 
   938     0611                     PWM1DCL         equ	1553	;# 
   939     0612                     PWM1DCH         equ	1554	;# 
   940     0613                     PWM1CON         equ	1555	;# 
   941     0613                     PWM1CON0        equ	1555	;# 
   942     0614                     PWM2DCL         equ	1556	;# 
   943     0615                     PWM2DCH         equ	1557	;# 
   944     0616                     PWM2CON         equ	1558	;# 
   945     0616                     PWM2CON0        equ	1558	;# 
   946     0617                     PWM3DCL         equ	1559	;# 
   947     0618                     PWM3DCH         equ	1560	;# 
   948     0619                     PWM3CON         equ	1561	;# 
   949     0619                     PWM3CON0        equ	1561	;# 
   950     061A                     PWM4DCL         equ	1562	;# 
   951     061B                     PWM4DCH         equ	1563	;# 
   952     061C                     PWM4CON         equ	1564	;# 
   953     061C                     PWM4CON0        equ	1564	;# 
   954     0691                     CWG1DBR         equ	1681	;# 
   955     0692                     CWG1DBF         equ	1682	;# 
   956     0693                     CWG1CON0        equ	1683	;# 
   957     0694                     CWG1CON1        equ	1684	;# 
   958     0695                     CWG1CON2        equ	1685	;# 
   959     0F0F                     CLCDATA         equ	3855	;# 
   960     0F10                     CLC1CON         equ	3856	;# 
   961     0F11                     CLC1POL         equ	3857	;# 
   962     0F12                     CLC1SEL0        equ	3858	;# 
   963     0F13                     CLC1SEL1        equ	3859	;# 
   964     0F14                     CLC1GLS0        equ	3860	;# 
   965     0F15                     CLC1GLS1        equ	3861	;# 
   966     0F16                     CLC1GLS2        equ	3862	;# 
   967     0F17                     CLC1GLS3        equ	3863	;# 
   968     0F18                     CLC2CON         equ	3864	;# 
   969     0F19                     CLC2POL         equ	3865	;# 
   970     0F1A                     CLC2SEL0        equ	3866	;# 
   971     0F1B                     CLC2SEL1        equ	3867	;# 
   972     0F1C                     CLC2GLS0        equ	3868	;# 
   973     0F1D                     CLC2GLS1        equ	3869	;# 
   974     0F1E                     CLC2GLS2        equ	3870	;# 
   975     0F1F                     CLC2GLS3        equ	3871	;# 
   976     0F20                     CLC3CON         equ	3872	;# 
   977     0F21                     CLC3POL         equ	3873	;# 
   978     0F22                     CLC3SEL0        equ	3874	;# 
   979     0F23                     CLC3SEL1        equ	3875	;# 
   980     0F24                     CLC3GLS0        equ	3876	;# 
   981     0F25                     CLC3GLS1        equ	3877	;# 
   982     0F26                     CLC3GLS2        equ	3878	;# 
   983     0F27                     CLC3GLS3        equ	3879	;# 
   984     0F28                     CLC4CON         equ	3880	;# 
   985     0F29                     CLC4POL         equ	3881	;# 
   986     0F2A                     CLC4SEL0        equ	3882	;# 
   987     0F2B                     CLC4SEL1        equ	3883	;# 
   988     0F2C                     CLC4GLS0        equ	3884	;# 
   989     0F2D                     CLC4GLS1        equ	3885	;# 
   990     0F2E                     CLC4GLS2        equ	3886	;# 
   991     0F2F                     CLC4GLS3        equ	3887	;# 
   992     0F8C                     ICDIO           equ	3980	;# 
   993     0F8D                     ICDCON0         equ	3981	;# 
   994     0F91                     ICDSTAT         equ	3985	;# 
   995     0F95                     DEVSEL          equ	3989	;# 
   996     0F96                     ICDINSTL        equ	3990	;# 
   997     0F97                     ICDINSTH        equ	3991	;# 
   998     0F9C                     ICDBK0CON       equ	3996	;# 
   999     0F9D                     ICDBK0L         equ	3997	;# 
  1000     0F9E                     ICDBK0H         equ	3998	;# 
  1001     0FE3                     BSRICDSHAD      equ	4067	;# 
  1002     0FE4                     STATUS_SHAD     equ	4068	;# 
  1003     0FE5                     WREG_SHAD       equ	4069	;# 
  1004     0FE6                     BSR_SHAD        equ	4070	;# 
  1005     0FE7                     PCLATH_SHAD     equ	4071	;# 
  1006     0FE8                     FSR0L_SHAD      equ	4072	;# 
  1007     0FE9                     FSR0H_SHAD      equ	4073	;# 
  1008     0FEA                     FSR1L_SHAD      equ	4074	;# 
  1009     0FEB                     FSR1H_SHAD      equ	4075	;# 
  1010     0FED                     STKPTR          equ	4077	;# 
  1011     0FEE                     TOSL            equ	4078	;# 
  1012     0FEF                     TOSH            equ	4079	;# 
  1013     0000                     INDF0           equ	0	;# 
  1014     0001                     INDF1           equ	1	;# 
  1015     0002                     PCL             equ	2	;# 
  1016     0003                     STATUS          equ	3	;# 
  1017     0004                     FSR0L           equ	4	;# 
  1018     0005                     FSR0H           equ	5	;# 
  1019     0006                     FSR1L           equ	6	;# 
  1020     0007                     FSR1H           equ	7	;# 
  1021     0008                     BSR             equ	8	;# 
  1022     0009                     WREG            equ	9	;# 
  1023     000A                     PCLATH          equ	10	;# 
  1024     000B                     INTCON          equ	11	;# 
  1025     000C                     PORTA           equ	12	;# 
  1026     000D                     PORTB           equ	13	;# 
  1027     000E                     PORTC           equ	14	;# 
  1028     0011                     PIR1            equ	17	;# 
  1029     0012                     PIR2            equ	18	;# 
  1030     0013                     PIR3            equ	19	;# 
  1031     0015                     TMR0            equ	21	;# 
  1032     0016                     TMR1            equ	22	;# 
  1033     0016                     TMR1L           equ	22	;# 
  1034     0017                     TMR1H           equ	23	;# 
  1035     0018                     T1CON           equ	24	;# 
  1036     0019                     T1GCON          equ	25	;# 
  1037     001A                     TMR2            equ	26	;# 
  1038     001B                     PR2             equ	27	;# 
  1039     001C                     T2CON           equ	28	;# 
  1040     008C                     TRISA           equ	140	;# 
  1041     008D                     TRISB           equ	141	;# 
  1042     008E                     TRISC           equ	142	;# 
  1043     0091                     PIE1            equ	145	;# 
  1044     0092                     PIE2            equ	146	;# 
  1045     0093                     PIE3            equ	147	;# 
  1046     0095                     OPTION_REG      equ	149	;# 
  1047     0096                     PCON            equ	150	;# 
  1048     0097                     WDTCON          equ	151	;# 
  1049     0099                     OSCCON          equ	153	;# 
  1050     009A                     OSCSTAT         equ	154	;# 
  1051     009B                     ADRES           equ	155	;# 
  1052     009B                     ADRESL          equ	155	;# 
  1053     009C                     ADRESH          equ	156	;# 
  1054     009D                     ADCON0          equ	157	;# 
  1055     009E                     ADCON1          equ	158	;# 
  1056     009F                     ADCON2          equ	159	;# 
  1057     010C                     LATA            equ	268	;# 
  1058     010D                     LATB            equ	269	;# 
  1059     010E                     LATC            equ	270	;# 
  1060     0111                     CM1CON0         equ	273	;# 
  1061     0112                     CM1CON1         equ	274	;# 
  1062     0113                     CM2CON0         equ	275	;# 
  1063     0114                     CM2CON1         equ	276	;# 
  1064     0115                     CMOUT           equ	277	;# 
  1065     0116                     BORCON          equ	278	;# 
  1066     0117                     FVRCON          equ	279	;# 
  1067     0118                     DACCON0         equ	280	;# 
  1068     0119                     DACCON1         equ	281	;# 
  1069     011D                     APFCON          equ	285	;# 
  1070     018C                     ANSELA          equ	396	;# 
  1071     018D                     ANSELB          equ	397	;# 
  1072     018E                     ANSELC          equ	398	;# 
  1073     0191                     PMADR           equ	401	;# 
  1074     0191                     PMADRL          equ	401	;# 
  1075     0192                     PMADRH          equ	402	;# 
  1076     0193                     PMDAT           equ	403	;# 
  1077     0193                     PMDATL          equ	403	;# 
  1078     0194                     PMDATH          equ	404	;# 
  1079     0195                     PMCON1          equ	405	;# 
  1080     0196                     PMCON2          equ	406	;# 
  1081     0199                     RCREG           equ	409	;# 
  1082     019A                     TXREG           equ	410	;# 
  1083     019B                     SPBRG           equ	411	;# 
  1084     019B                     SPBRGL          equ	411	;# 
  1085     019C                     SPBRGH          equ	412	;# 
  1086     019D                     RCSTA           equ	413	;# 
  1087     019E                     TXSTA           equ	414	;# 
  1088     019F                     BAUDCON         equ	415	;# 
  1089     020C                     WPUA            equ	524	;# 
  1090     020D                     WPUB            equ	525	;# 
  1091     0211                     SSP1BUF         equ	529	;# 
  1092     0211                     SSPBUF          equ	529	;# 
  1093     0212                     SSP1ADD         equ	530	;# 
  1094     0212                     SSPADD          equ	530	;# 
  1095     0213                     SSP1MSK         equ	531	;# 
  1096     0213                     SSPMSK          equ	531	;# 
  1097     0214                     SSP1STAT        equ	532	;# 
  1098     0214                     SSPSTAT         equ	532	;# 
  1099     0215                     SSP1CON1        equ	533	;# 
  1100     0215                     SSPCON          equ	533	;# 
  1101     0215                     SSPCON1         equ	533	;# 
  1102     0216                     SSP1CON2        equ	534	;# 
  1103     0216                     SSPCON2         equ	534	;# 
  1104     0217                     SSP1CON3        equ	535	;# 
  1105     0217                     SSPCON3         equ	535	;# 
  1106     0391                     IOCAP           equ	913	;# 
  1107     0392                     IOCAN           equ	914	;# 
  1108     0393                     IOCAF           equ	915	;# 
  1109     0394                     IOCBP           equ	916	;# 
  1110     0395                     IOCBN           equ	917	;# 
  1111     0396                     IOCBF           equ	918	;# 
  1112     0498                     NCO1ACC         equ	1176	;# 
  1113     0498                     NCO1ACCL        equ	1176	;# 
  1114     0499                     NCO1ACCH        equ	1177	;# 
  1115     049A                     NCO1ACCU        equ	1178	;# 
  1116     049B                     NCO1INC         equ	1179	;# 
  1117     049B                     NCO1INCL        equ	1179	;# 
  1118     049C                     NCO1INCH        equ	1180	;# 
  1119     049D                     NCO1INCU        equ	1181	;# 
  1120     049E                     NCO1CON         equ	1182	;# 
  1121     049F                     NCO1CLK         equ	1183	;# 
  1122     0611                     PWM1DCL         equ	1553	;# 
  1123     0612                     PWM1DCH         equ	1554	;# 
  1124     0613                     PWM1CON         equ	1555	;# 
  1125     0613                     PWM1CON0        equ	1555	;# 
  1126     0614                     PWM2DCL         equ	1556	;# 
  1127     0615                     PWM2DCH         equ	1557	;# 
  1128     0616                     PWM2CON         equ	1558	;# 
  1129     0616                     PWM2CON0        equ	1558	;# 
  1130     0617                     PWM3DCL         equ	1559	;# 
  1131     0618                     PWM3DCH         equ	1560	;# 
  1132     0619                     PWM3CON         equ	1561	;# 
  1133     0619                     PWM3CON0        equ	1561	;# 
  1134     061A                     PWM4DCL         equ	1562	;# 
  1135     061B                     PWM4DCH         equ	1563	;# 
  1136     061C                     PWM4CON         equ	1564	;# 
  1137     061C                     PWM4CON0        equ	1564	;# 
  1138     0691                     CWG1DBR         equ	1681	;# 
  1139     0692                     CWG1DBF         equ	1682	;# 
  1140     0693                     CWG1CON0        equ	1683	;# 
  1141     0694                     CWG1CON1        equ	1684	;# 
  1142     0695                     CWG1CON2        equ	1685	;# 
  1143     0F0F                     CLCDATA         equ	3855	;# 
  1144     0F10                     CLC1CON         equ	3856	;# 
  1145     0F11                     CLC1POL         equ	3857	;# 
  1146     0F12                     CLC1SEL0        equ	3858	;# 
  1147     0F13                     CLC1SEL1        equ	3859	;# 
  1148     0F14                     CLC1GLS0        equ	3860	;# 
  1149     0F15                     CLC1GLS1        equ	3861	;# 
  1150     0F16                     CLC1GLS2        equ	3862	;# 
  1151     0F17                     CLC1GLS3        equ	3863	;# 
  1152     0F18                     CLC2CON         equ	3864	;# 
  1153     0F19                     CLC2POL         equ	3865	;# 
  1154     0F1A                     CLC2SEL0        equ	3866	;# 
  1155     0F1B                     CLC2SEL1        equ	3867	;# 
  1156     0F1C                     CLC2GLS0        equ	3868	;# 
  1157     0F1D                     CLC2GLS1        equ	3869	;# 
  1158     0F1E                     CLC2GLS2        equ	3870	;# 
  1159     0F1F                     CLC2GLS3        equ	3871	;# 
  1160     0F20                     CLC3CON         equ	3872	;# 
  1161     0F21                     CLC3POL         equ	3873	;# 
  1162     0F22                     CLC3SEL0        equ	3874	;# 
  1163     0F23                     CLC3SEL1        equ	3875	;# 
  1164     0F24                     CLC3GLS0        equ	3876	;# 
  1165     0F25                     CLC3GLS1        equ	3877	;# 
  1166     0F26                     CLC3GLS2        equ	3878	;# 
  1167     0F27                     CLC3GLS3        equ	3879	;# 
  1168     0F28                     CLC4CON         equ	3880	;# 
  1169     0F29                     CLC4POL         equ	3881	;# 
  1170     0F2A                     CLC4SEL0        equ	3882	;# 
  1171     0F2B                     CLC4SEL1        equ	3883	;# 
  1172     0F2C                     CLC4GLS0        equ	3884	;# 
  1173     0F2D                     CLC4GLS1        equ	3885	;# 
  1174     0F2E                     CLC4GLS2        equ	3886	;# 
  1175     0F2F                     CLC4GLS3        equ	3887	;# 
  1176     0F8C                     ICDIO           equ	3980	;# 
  1177     0F8D                     ICDCON0         equ	3981	;# 
  1178     0F91                     ICDSTAT         equ	3985	;# 
  1179     0F95                     DEVSEL          equ	3989	;# 
  1180     0F96                     ICDINSTL        equ	3990	;# 
  1181     0F97                     ICDINSTH        equ	3991	;# 
  1182     0F9C                     ICDBK0CON       equ	3996	;# 
  1183     0F9D                     ICDBK0L         equ	3997	;# 
  1184     0F9E                     ICDBK0H         equ	3998	;# 
  1185     0FE3                     BSRICDSHAD      equ	4067	;# 
  1186     0FE4                     STATUS_SHAD     equ	4068	;# 
  1187     0FE5                     WREG_SHAD       equ	4069	;# 
  1188     0FE6                     BSR_SHAD        equ	4070	;# 
  1189     0FE7                     PCLATH_SHAD     equ	4071	;# 
  1190     0FE8                     FSR0L_SHAD      equ	4072	;# 
  1191     0FE9                     FSR0H_SHAD      equ	4073	;# 
  1192     0FEA                     FSR1L_SHAD      equ	4074	;# 
  1193     0FEB                     FSR1H_SHAD      equ	4075	;# 
  1194     0FED                     STKPTR          equ	4077	;# 
  1195     0FEE                     TOSL            equ	4078	;# 
  1196     0FEF                     TOSH            equ	4079	;# 
  1197                           
  1198 ;; Function _INT_DefaultInterruptHandler is unused but had its address taken
  1199     0000                     _INT_DefaultInterruptHandler equ	0
  1200                           
  1201 ;; Function _TMR1_Start is unused but had its address taken
  1202     0000                     _TMR1_Start     equ	0
  1203                           
  1204 ;; Function _TMR1_Stop is unused but had its address taken
  1205     0000                     _TMR1_Stop      equ	0
  1206                           
  1207 ;; Function _TMR1_PeriodCountSet is unused but had its address taken
  1208     0000                     _TMR1_PeriodCountSet equ	0
  1209                           
  1210                           	psect	idataBANK0
  1211     0003                     __pidataBANK0:
  1212                           
  1213                           ;initializer for _RA0Value
  1214     0003  3401               	retlw	1
  1215                           
  1216                           	psect	stringtext1
  1217     1000                     __pstringtext1:
  1218     1000                     _tmr1:
  1219     1000  34C5               	retlw	low _TMR1_Initialize
  1220     1001  340F               	retlw	high _TMR1_Initialize
  1221     1002  3400               	retlw	0
  1222     1003  3400               	retlw	0
  1223     1004  3400               	retlw	0
  1224     1005  3400               	retlw	0
  1225     1006  3400               	retlw	0
  1226     1007  3400               	retlw	0
  1227     1008  346E               	retlw	low _TMR1_OverflowCallbackRegister
  1228     1009  340F               	retlw	high _TMR1_OverflowCallbackRegister
  1229     100A  3400               	retlw	0
  1230     100B  3400               	retlw	0
  1231     100C                     __end_of_tmr1:
  1232                           
  1233                           	psect	nvBANK0
  1234     005B                     __pnvBANK0:
  1235     005B                     _TMR1_OverflowCallback:
  1236     005B                     	ds	2
  1237     005D                     _INT_InterruptHandler:
  1238     005D                     	ds	2
  1239     005F                     _IO_RA0_InterruptHandler:
  1240     005F                     	ds	2
  1241     000D                     _PORTBbits      set	13
  1242     000E                     _PORTCbits      set	14
  1243     000C                     _PORTAbits      set	12
  1244     0019                     _T1GCONbits     set	25
  1245     0018                     _T1CONbits      set	24
  1246     0018                     _T1CON          set	24
  1247     0016                     _TMR1L          set	22
  1248     0017                     _TMR1H          set	23
  1249     0019                     _T1GCON         set	25
  1250     0011                     _PIR1bits       set	17
  1251     000B                     _INTCONbits     set	11
  1252     0060                     _RA0            set	96
  1253     0091                     _PIE1bits       set	145
  1254     0095                     _OPTION_REGbits set	149
  1255     008E                     _TRISC          set	142
  1256     008D                     _TRISB          set	141
  1257     008C                     _TRISA          set	140
  1258     0099                     _OSCCON         set	153
  1259     010E                     _LATC           set	270
  1260     010D                     _LATB           set	269
  1261     010C                     _LATA           set	268
  1262     0116                     _BORCON         set	278
  1263     018E                     _ANSELC         set	398
  1264     018D                     _ANSELB         set	397
  1265     018C                     _ANSELA         set	396
  1266     020D                     _WPUB           set	525
  1267     020C                     _WPUA           set	524
  1268     0393                     _IOCAFbits      set	915
  1269     0396                     _IOCBF          set	918
  1270     0395                     _IOCBN          set	917
  1271     0394                     _IOCBP          set	916
  1272     0393                     _IOCAF          set	915
  1273     0392                     _IOCAN          set	914
  1274     0391                     _IOCAP          set	913
  1275                           
  1276                           	psect	cinit
  1277     002B                     start_initialization:	
  1278                           ; #config settings
  1279                           
  1280     002B                     __initialization:
  1281                           
  1282                           ; Initialize objects allocated to BANK0
  1283     002B  3180  2003  3180   	fcall	__pidataBANK0	;fetch initializer
  1284     002E  00E1               	movwf	__pdataBANK0& (0+127)
  1285                           
  1286                           ; Clear objects allocated to BANK0
  1287     002F  3040               	movlw	low __pbssBANK0
  1288     0030  0084               	movwf	4
  1289     0031  3000               	movlw	high __pbssBANK0
  1290     0032  0085               	movwf	5
  1291     0033  301B               	movlw	27
  1292     0034  318F  2774  3180   	fcall	clear_ram0
  1293     0037                     end_of_initialization:	
  1294                           ;End of C runtime variable initialization code
  1295                           
  1296     0037                     __end_of__initialization:
  1297     0037  107E               	bcf	int$flags,0	;clear compiler interrupt flag (level 1)
  1298     0038  0020               	movlb	0
  1299     0039  3185  2D6B         	ljmp	_main	;jump to C main() function
  1300                           
  1301                           	psect	bssBANK0
  1302     0040                     __pbssBANK0:
  1303     0040                     _TMR1_InterruptHandler:
  1304     0040                     	ds	2
  1305     0042                     _timer1ReloadVal:
  1306     0042                     	ds	2
  1307     0044                     _counter:
  1308     0044                     	ds	1
  1309     0045                     _toggle:
  1310     0045                     	ds	1
  1311     0046                     _hundred:
  1312     0046                     	ds	7
  1313     004D                     _ten:
  1314     004D                     	ds	7
  1315     0054                     _one:
  1316     0054                     	ds	7
  1317                           
  1318                           	psect	dataBANK0
  1319     0061                     __pdataBANK0:
  1320     0061                     _RA0Value:
  1321     0061                     	ds	1
  1322                           
  1323                           	psect	clrtext
  1324     0F74                     clear_ram0:	
  1325                           ;	Called with FSR0 containing the base address, and
  1326                           ;	WREG with the size to clear
  1327                           
  1328     0F74  0064               	clrwdt	;clear the watchdog before getting into this loop
  1329     0F75                     clrloop0:
  1330     0F75  0180               	clrf	0	;clear RAM location pointed to by FSR
  1331     0F76  3101               	addfsr 0,1
  1332     0F77  0B89               	decfsz	9,f	;Have we reached the end of clearing yet?
  1333     0F78  2F75               	goto	clrloop0	;have we reached the end yet?
  1334     0F79  3400               	retlw	0	;all done for this memory range, return
  1335                           
  1336                           	psect	cstackBANK1
  1337     00A0                     __pcstackBANK1:
  1338     00A0                     ??_Display:
  1339                           
  1340                           ; 1 bytes @ 0x0
  1341     00A0                     	ds	3
  1342     00A3                     Display@ones:
  1343                           
  1344                           ; 2 bytes @ 0x3
  1345     00A3                     	ds	2
  1346     00A5                     Display@tens:
  1347                           
  1348                           ; 2 bytes @ 0x5
  1349     00A5                     	ds	2
  1350     00A7                     Display@hundreds:
  1351                           
  1352                           ; 2 bytes @ 0x7
  1353     00A7                     	ds	2
  1354     00A9                     ??_main:
  1355                           
  1356                           ; 1 bytes @ 0x9
  1357     00A9                     	ds	3
  1358                           
  1359                           	psect	cstackCOMMON
  1360     0070                     __pcstackCOMMON:
  1361     0070                     ?_IO_RA0_DefaultInterruptHandler:
  1362     0070                     ?_IO_RA0_ISR:	
  1363                           ; 1 bytes @ 0x0
  1364                           
  1365     0070                     ?_TMR1_Initialize:	
  1366                           ; 1 bytes @ 0x0
  1367                           
  1368     0070                     ?_INTERRUPT_Initialize:	
  1369                           ; 1 bytes @ 0x0
  1370                           
  1371     0070                     ?_TMR1_OverflowISR:	
  1372                           ; 1 bytes @ 0x0
  1373                           
  1374     0070                     ?_TMR1_DefaultOverflowCallback:	
  1375                           ; 1 bytes @ 0x0
  1376                           
  1377     0070                     ?_CLOCK_Initialize:	
  1378                           ; 1 bytes @ 0x0
  1379                           
  1380     0070                     ?_PIN_MANAGER_Initialize:	
  1381                           ; 1 bytes @ 0x0
  1382                           
  1383     0070                     ?_PIN_MANAGER_IOC:	
  1384                           ; 1 bytes @ 0x0
  1385                           
  1386     0070                     ?_SYSTEM_Initialize:	
  1387                           ; 1 bytes @ 0x0
  1388                           
  1389     0070                     ?_INTERRUPT_InterruptManager:	
  1390                           ; 1 bytes @ 0x0
  1391                           
  1392     0070                     ?_TMR1_Write:	
  1393                           ; 1 bytes @ 0x0
  1394                           
  1395     0070                     ?_Tmr1CallBack:	
  1396                           ; 1 bytes @ 0x0
  1397                           
  1398     0070                     ?_RA0Isr:	
  1399                           ; 1 bytes @ 0x0
  1400                           
  1401     0070                     ?i1_SetSegments:	
  1402                           ; 1 bytes @ 0x0
  1403                           
  1404     0070                     ?_main:	
  1405                           ; 1 bytes @ 0x0
  1406                           
  1407     0070                     ?i1___awdiv:	
  1408                           ; 2 bytes @ 0x0
  1409                           
  1410     0070                     TMR1_Write@timerVal:	
  1411                           ; 2 bytes @ 0x0
  1412                           
  1413     0070                     i1SetSegments@digit:	
  1414                           ; 2 bytes @ 0x0
  1415                           
  1416     0070                     i1___awdiv@divisor:	
  1417                           ; 2 bytes @ 0x0
  1418                           
  1419     0070                     ??_IO_RA0_DefaultInterruptHandler:	
  1420                           ; 2 bytes @ 0x0
  1421                           
  1422     0070                     ??_TMR1_DefaultOverflowCallback:	
  1423                           ; 1 bytes @ 0x0
  1424                           
  1425                           
  1426                           ; 1 bytes @ 0x0
  1427     0070                     	ds	2
  1428     0072                     i1SetSegments@a:
  1429     0072                     i1___awdiv@dividend:	
  1430                           ; 2 bytes @ 0x2
  1431                           
  1432     0072                     ??_TMR1_Write:	
  1433                           ; 2 bytes @ 0x2
  1434                           
  1435                           
  1436                           ; 1 bytes @ 0x2
  1437     0072                     	ds	2
  1438     0074                     i1SetSegments@blank:
  1439     0074                     i1___awdiv@counter:	
  1440                           ; 1 bytes @ 0x4
  1441                           
  1442     0074                     ??i1___awdiv:	
  1443                           ; 1 bytes @ 0x4
  1444                           
  1445                           
  1446                           ; 1 bytes @ 0x4
  1447     0074                     	ds	1
  1448     0075                     i1___awdiv@sign:
  1449     0075                     ??i1_SetSegments:	
  1450                           ; 1 bytes @ 0x5
  1451                           
  1452                           
  1453                           ; 1 bytes @ 0x5
  1454     0075                     	ds	1
  1455     0076                     i1___awdiv@quotient:
  1456                           
  1457                           ; 2 bytes @ 0x6
  1458     0076                     	ds	2
  1459     0078                     ?i1___awmod:
  1460     0078                     i1___awmod@divisor:	
  1461                           ; 2 bytes @ 0x8
  1462                           
  1463                           
  1464                           ; 2 bytes @ 0x8
  1465     0078                     	ds	2
  1466     007A                     i1___awmod@dividend:
  1467                           
  1468                           ; 2 bytes @ 0xA
  1469     007A                     	ds	2
  1470     007C                     i1___awmod@counter:
  1471     007C                     ??i1___awmod:	
  1472                           ; 1 bytes @ 0xC
  1473                           
  1474                           
  1475                           ; 1 bytes @ 0xC
  1476     007C                     	ds	1
  1477     007D                     i1___awmod@sign:
  1478                           
  1479                           ; 1 bytes @ 0xD
  1480     007D                     	ds	1
  1481     007E                     ??_IO_RA0_ISR:
  1482     007E                     ??_TMR1_OverflowISR:	
  1483                           ; 1 bytes @ 0xE
  1484                           
  1485     007E                     ??_PIN_MANAGER_IOC:	
  1486                           ; 1 bytes @ 0xE
  1487                           
  1488     007E                     ??_INTERRUPT_InterruptManager:	
  1489                           ; 1 bytes @ 0xE
  1490                           
  1491                           
  1492                           	psect	cstackBANK0
  1493     0020                     __pcstackBANK0:	
  1494                           ; 1 bytes @ 0xE
  1495                           
  1496     0020                     ?i1_Display:
  1497     0020                     i1Display@a:	
  1498                           ; 1 bytes @ 0x0
  1499                           
  1500                           
  1501                           ; 2 bytes @ 0x0
  1502     0020                     	ds	2
  1503     0022                     ??i1_Display:
  1504                           
  1505                           ; 1 bytes @ 0x2
  1506     0022                     	ds	3
  1507     0025                     i1Display@ones:
  1508                           
  1509                           ; 2 bytes @ 0x5
  1510     0025                     	ds	2
  1511     0027                     i1Display@tens:
  1512                           
  1513                           ; 2 bytes @ 0x7
  1514     0027                     	ds	2
  1515     0029                     i1Display@hundreds:
  1516                           
  1517                           ; 2 bytes @ 0x9
  1518     0029                     	ds	2
  1519     002B                     ??_Tmr1CallBack:
  1520     002B                     ??_RA0Isr:	
  1521                           ; 1 bytes @ 0xB
  1522                           
  1523                           
  1524                           ; 1 bytes @ 0xB
  1525     002B                     	ds	2
  1526     002D                     _Tmr1CallBack$1119:
  1527                           
  1528                           ; 1 bytes @ 0xD
  1529     002D                     	ds	1
  1530     002E                     ?_IO_RA0_SetInterruptHandler:
  1531     002E                     ?_INT_SetInterruptHandler:	
  1532                           ; 1 bytes @ 0xE
  1533                           
  1534     002E                     ?_TMR1_OverflowCallbackRegister:	
  1535                           ; 1 bytes @ 0xE
  1536                           
  1537     002E                     ?_SetSegments:	
  1538                           ; 1 bytes @ 0xE
  1539                           
  1540     002E                     ?___awdiv:	
  1541                           ; 1 bytes @ 0xE
  1542                           
  1543     002E                     IO_RA0_SetInterruptHandler@InterruptHandler:	
  1544                           ; 2 bytes @ 0xE
  1545                           
  1546     002E                     INT_SetInterruptHandler@InterruptHandler:	
  1547                           ; 2 bytes @ 0xE
  1548                           
  1549     002E                     TMR1_OverflowCallbackRegister@CallbackHandler:	
  1550                           ; 2 bytes @ 0xE
  1551                           
  1552     002E                     SetSegments@digit:	
  1553                           ; 2 bytes @ 0xE
  1554                           
  1555     002E                     ___awdiv@divisor:	
  1556                           ; 2 bytes @ 0xE
  1557                           
  1558     002E                     ??_CLOCK_Initialize:	
  1559                           ; 2 bytes @ 0xE
  1560                           
  1561                           
  1562                           ; 1 bytes @ 0xE
  1563     002E                     	ds	2
  1564     0030                     SetSegments@a:
  1565     0030                     ___awdiv@dividend:	
  1566                           ; 2 bytes @ 0x10
  1567                           
  1568     0030                     ??_IO_RA0_SetInterruptHandler:	
  1569                           ; 2 bytes @ 0x10
  1570                           
  1571     0030                     ??_TMR1_Initialize:	
  1572                           ; 1 bytes @ 0x10
  1573                           
  1574     0030                     ??_INTERRUPT_Initialize:	
  1575                           ; 1 bytes @ 0x10
  1576                           
  1577     0030                     ??_INT_SetInterruptHandler:	
  1578                           ; 1 bytes @ 0x10
  1579                           
  1580     0030                     ??_TMR1_OverflowCallbackRegister:	
  1581                           ; 1 bytes @ 0x10
  1582                           
  1583     0030                     ??_PIN_MANAGER_Initialize:	
  1584                           ; 1 bytes @ 0x10
  1585                           
  1586     0030                     ??_SYSTEM_Initialize:	
  1587                           ; 1 bytes @ 0x10
  1588                           
  1589                           
  1590                           ; 1 bytes @ 0x10
  1591     0030                     	ds	2
  1592     0032                     SetSegments@blank:
  1593     0032                     ___awdiv@counter:	
  1594                           ; 1 bytes @ 0x12
  1595                           
  1596     0032                     ??___awdiv:	
  1597                           ; 1 bytes @ 0x12
  1598                           
  1599                           
  1600                           ; 1 bytes @ 0x12
  1601     0032                     	ds	1
  1602     0033                     ___awdiv@sign:
  1603     0033                     ??_SetSegments:	
  1604                           ; 1 bytes @ 0x13
  1605                           
  1606                           
  1607                           ; 1 bytes @ 0x13
  1608     0033                     	ds	1
  1609     0034                     ___awdiv@quotient:
  1610                           
  1611                           ; 2 bytes @ 0x14
  1612     0034                     	ds	2
  1613     0036                     ?___awmod:
  1614     0036                     ___awmod@divisor:	
  1615                           ; 2 bytes @ 0x16
  1616                           
  1617                           
  1618                           ; 2 bytes @ 0x16
  1619     0036                     	ds	2
  1620     0038                     ___awmod@dividend:
  1621                           
  1622                           ; 2 bytes @ 0x18
  1623     0038                     	ds	2
  1624     003A                     ___awmod@counter:
  1625     003A                     ??___awmod:	
  1626                           ; 1 bytes @ 0x1A
  1627                           
  1628                           
  1629                           ; 1 bytes @ 0x1A
  1630     003A                     	ds	1
  1631     003B                     ___awmod@sign:
  1632                           
  1633                           ; 1 bytes @ 0x1B
  1634     003B                     	ds	1
  1635     003C                     ?_Display:
  1636     003C                     Display@a:	
  1637                           ; 1 bytes @ 0x1C
  1638                           
  1639                           
  1640                           ; 2 bytes @ 0x1C
  1641     003C                     	ds	2
  1642     003E                     main@timeout:
  1643                           
  1644                           ; 2 bytes @ 0x1E
  1645     003E                     	ds	2
  1646                           
  1647                           	psect	maintext
  1648     056B                     __pmaintext:	
  1649 ;;
  1650 ;;Main: autosize = 0, tempsize = 3, incstack = 0, save=0
  1651 ;;
  1652 ;; *************** function _main *****************
  1653 ;; Defined at:
  1654 ;;		line 265 in file "main.c"
  1655 ;; Parameters:    Size  Location     Type
  1656 ;;		None
  1657 ;; Auto vars:     Size  Location     Type
  1658 ;;  timeout         2   30[BANK0 ] int 
  1659 ;; Return value:  Size  Location     Type
  1660 ;;                  2  278[None  ] int 
  1661 ;; Registers used:
  1662 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  1663 ;; Tracked objects:
  1664 ;;		On entry : B1F/0
  1665 ;;		On exit  : 0/0
  1666 ;;		Unchanged: 0/0
  1667 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  1668 ;;      Params:         0       0       0       0       0       0       0       0
  1669 ;;      Locals:         0       2       0       0       0       0       0       0
  1670 ;;      Temps:          0       0       3       0       0       0       0       0
  1671 ;;      Totals:         0       2       3       0       0       0       0       0
  1672 ;;Total ram usage:        5 bytes
  1673 ;; Hardware stack levels required when called: 9
  1674 ;; This function calls:
  1675 ;;		_Display
  1676 ;;		_IO_RA0_SetInterruptHandler
  1677 ;;		_SYSTEM_Initialize
  1678 ;;		_TMR1_OverflowCallbackRegister
  1679 ;; This function is called by:
  1680 ;;		Startup code after reset
  1681 ;; This function uses a non-reentrant model
  1682 ;;
  1683                           
  1684     056B                     _main:	
  1685                           ;psect for function _main
  1686                           
  1687     056B                     l2428:	
  1688                           ;incstack = 0
  1689                           ; Regs used in _main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  1690                           
  1691                           
  1692                           ;main.c: 266:     SYSTEM_Initialize();
  1693     056B  3187  27F3  3185   	fcall	_SYSTEM_Initialize
  1694     056E                     l2430:
  1695                           
  1696                           ;main.c: 277:     counter = 0;
  1697     056E  0020               	movlb	0	; select bank0
  1698     056F  01C4               	clrf	_counter
  1699     0570                     l2432:
  1700                           
  1701                           ;main.c: 278:     Display(counter);
  1702     0570  0844               	movf	_counter,w
  1703     0571  0021               	movlb	1	; select bank1
  1704     0572  00A9               	movwf	??_main^(0+128)
  1705     0573  01AA               	clrf	(??_main+1)^(0+128)
  1706     0574  0829               	movf	??_main^(0+128),w
  1707     0575  0020               	movlb	0	; select bank0
  1708     0576  00BC               	movwf	Display@a
  1709     0577  0021               	movlb	1	; select bank1
  1710     0578  082A               	movf	(??_main+1)^(0+128),w
  1711     0579  0020               	movlb	0	; select bank0
  1712     057A  00BD               	movwf	Display@a+1
  1713     057B  3184  24D8  3185   	fcall	_Display
  1714     057E                     l2434:
  1715                           
  1716                           ;main.c: 284:     TMR1_OverflowCallbackRegister(Tmr1CallBack);
  1717     057E  300C               	movlw	low _Tmr1CallBack
  1718     057F  0020               	movlb	0	; select bank0
  1719     0580  00AE               	movwf	TMR1_OverflowCallbackRegister@CallbackHandler
  1720     0581  3004               	movlw	high _Tmr1CallBack
  1721     0582  00AF               	movwf	TMR1_OverflowCallbackRegister@CallbackHandler+1
  1722     0583  318F  276E  3185   	fcall	_TMR1_OverflowCallbackRegister
  1723     0586                     l2436:
  1724                           
  1725                           ;main.c: 285:     IO_RA0_SetInterruptHandler(RA0Isr);
  1726     0586  30DE               	movlw	low _RA0Isr
  1727     0587  0020               	movlb	0	; select bank0
  1728     0588  00AE               	movwf	IO_RA0_SetInterruptHandler@InterruptHandler
  1729     0589  300F               	movlw	high _RA0Isr
  1730     058A  00AF               	movwf	IO_RA0_SetInterruptHandler@InterruptHandler+1
  1731     058B  318F  2768  3185   	fcall	_IO_RA0_SetInterruptHandler
  1732     058E                     l2438:
  1733                           
  1734                           ;main.c: 288:     (INTCONbits.GIE = 1);
  1735     058E  178B               	bsf	11,7	;volatile
  1736     058F                     l2440:
  1737                           
  1738                           ;main.c: 294:     (INTCONbits.PEIE = 1);
  1739     058F  170B               	bsf	11,6	;volatile
  1740     0590                     l2442:
  1741                           
  1742                           ;main.c: 311:     Display(counter);
  1743     0590  0020               	movlb	0	; select bank0
  1744     0591  0844               	movf	_counter,w
  1745     0592  0021               	movlb	1	; select bank1
  1746     0593  00A9               	movwf	??_main^(0+128)
  1747     0594  01AA               	clrf	(??_main+1)^(0+128)
  1748     0595  0829               	movf	??_main^(0+128),w
  1749     0596  0020               	movlb	0	; select bank0
  1750     0597  00BC               	movwf	Display@a
  1751     0598  0021               	movlb	1	; select bank1
  1752     0599  082A               	movf	(??_main+1)^(0+128),w
  1753     059A  0020               	movlb	0	; select bank0
  1754     059B  00BD               	movwf	Display@a+1
  1755     059C  3184  24D8  3185   	fcall	_Display
  1756     059F                     l279:	
  1757                           ;main.c: 313:     while (1) {
  1758                           
  1759     059F  0063               	sleep	;# 
  1760     05A0                     l2444:
  1761                           
  1762                           ;main.c: 326:         int timeout = 0;
  1763     05A0  0020               	movlb	0	; select bank0
  1764     05A1  01BE               	clrf	main@timeout
  1765     05A2  01BF               	clrf	main@timeout+1
  1766                           
  1767                           ;main.c: 330:         while ((timeout++ < 2000) && !RA0)
  1768     05A3  2DAD               	goto	l280
  1769     05A4                     l2446:
  1770                           
  1771                           ;main.c: 331:         {;main.c: 332:             _delay((unsigned long)((1)*(16000000/40
      +                          00.0)));
  1772     05A4  3006               	movlw	6
  1773     05A5  0021               	movlb	1	; select bank1
  1774     05A6  00A9               	movwf	??_main^(0+128)
  1775     05A7  3030               	movlw	48
  1776     05A8                     u1847:
  1777     05A8  0B89               	decfsz	9,f
  1778     05A9  2DA8               	goto	u1847
  1779     05AA  0BA9               	decfsz	??_main^(0+128),f
  1780     05AB  2DA8               	goto	u1847
  1781     05AC  0000               	nop
  1782     05AD                     l280:	
  1783                           ;main.c: 333:         }
  1784                           
  1785                           
  1786                           ;main.c: 330:         while ((timeout++ < 2000) && !RA0)
  1787     05AD  0020               	movlb	0	; select bank0
  1788     05AE  083F               	movf	main@timeout+1,w
  1789     05AF  0021               	movlb	1	; select bank1
  1790     05B0  00AA               	movwf	(??_main+1)^(0+128)
  1791     05B1  0020               	movlb	0	; select bank0
  1792     05B2  083E               	movf	main@timeout,w
  1793     05B3  0021               	movlb	1	; select bank1
  1794     05B4  00A9               	movwf	??_main^(0+128)
  1795     05B5  0020               	movlb	0	; select bank0
  1796     05B6  0ABE               	incf	main@timeout,f
  1797     05B7  1903               	skipnz
  1798     05B8  0ABF               	incf	main@timeout+1,f
  1799     05B9  0021               	movlb	1	; select bank1
  1800     05BA  082A               	movf	(??_main+1)^(0+128),w
  1801     05BB  3A80               	xorlw	128
  1802     05BC  00AB               	movwf	(??_main+2)^(0+128)
  1803     05BD  3087               	movlw	135
  1804     05BE  022B               	subwf	(??_main+2)^(0+128),w
  1805     05BF  1D03               	skipz
  1806     05C0  2DC3               	goto	u1815
  1807     05C1  30D0               	movlw	208
  1808     05C2  0229               	subwf	??_main^(0+128),w
  1809     05C3                     u1815:
  1810     05C3  1803               	skipnc
  1811     05C4  2DC6               	goto	u1811
  1812     05C5  2DC7               	goto	u1810
  1813     05C6                     u1811:
  1814     05C6  2DCC               	goto	l2450
  1815     05C7                     u1810:
  1816     05C7                     l2448:
  1817     05C7  0020               	movlb	0	; select bank0
  1818     05C8  1C0C               	btfss	12,0	;volatile
  1819     05C9  2DCB               	goto	u1821
  1820     05CA  2DCC               	goto	u1820
  1821     05CB                     u1821:
  1822     05CB  2DA4               	goto	l2446
  1823     05CC                     u1820:
  1824     05CC                     l2450:
  1825                           
  1826                           ;main.c: 335:         if (timeout > 2000)
  1827     05CC  0020               	movlb	0	; select bank0
  1828     05CD  083F               	movf	main@timeout+1,w
  1829     05CE  3A80               	xorlw	128
  1830     05CF  0021               	movlb	1	; select bank1
  1831     05D0  00A9               	movwf	??_main^(0+128)
  1832     05D1  3087               	movlw	135
  1833     05D2  0229               	subwf	??_main^(0+128),w
  1834     05D3  1D03               	skipz
  1835     05D4  2DD8               	goto	u1835
  1836     05D5  30D1               	movlw	209
  1837     05D6  0020               	movlb	0	; select bank0
  1838     05D7  023E               	subwf	main@timeout,w
  1839     05D8                     u1835:
  1840     05D8  1C03               	skipc
  1841     05D9  2DDB               	goto	u1831
  1842     05DA  2DDC               	goto	u1830
  1843     05DB                     u1831:
  1844     05DB  2D9F               	goto	l279
  1845     05DC                     u1830:
  1846     05DC                     l2452:
  1847                           
  1848                           ;main.c: 336:         {;main.c: 337:             counter = 0;
  1849     05DC  0020               	movlb	0	; select bank0
  1850     05DD  01C4               	clrf	_counter
  1851     05DE                     l2454:
  1852                           
  1853                           ;main.c: 338:             Display(counter);
  1854     05DE  0844               	movf	_counter,w
  1855     05DF  0021               	movlb	1	; select bank1
  1856     05E0  00A9               	movwf	??_main^(0+128)
  1857     05E1  01AA               	clrf	(??_main+1)^(0+128)
  1858     05E2  0829               	movf	??_main^(0+128),w
  1859     05E3  0020               	movlb	0	; select bank0
  1860     05E4  00BC               	movwf	Display@a
  1861     05E5  0021               	movlb	1	; select bank1
  1862     05E6  082A               	movf	(??_main+1)^(0+128),w
  1863     05E7  0020               	movlb	0	; select bank0
  1864     05E8  00BD               	movwf	Display@a+1
  1865     05E9  3184  24D8  3185   	fcall	_Display
  1866     05EC                     l2456:
  1867                           
  1868                           ;main.c: 339:             _delay((unsigned long)((1000)*(16000000/4000.0)));
  1869     05EC  3015               	movlw	21
  1870     05ED  0021               	movlb	1	; select bank1
  1871     05EE  00AA               	movwf	(??_main^(0+128)+1)
  1872     05EF  304B               	movlw	75
  1873     05F0  00A9               	movwf	??_main^(0+128)
  1874     05F1  30BE               	movlw	190
  1875     05F2                     u1857:
  1876     05F2  0B89               	decfsz	9,f
  1877     05F3  2DF2               	goto	u1857
  1878     05F4  0BA9               	decfsz	??_main^(0+128),f
  1879     05F5  2DF2               	goto	u1857
  1880     05F6  0BAA               	decfsz	(??_main^(0+128)+1),f
  1881     05F7  2DF2               	goto	u1857
  1882     05F8  0000               	nop
  1883     05F9  2D9F               	goto	l279
  1884     05FA  3180  2829         	ljmp	start
  1885     05FC                     __end_of_main:
  1886                           
  1887                           	psect	text1
  1888     07F3                     __ptext1:	
  1889 ;; *************** function _SYSTEM_Initialize *****************
  1890 ;; Defined at:
  1891 ;;		line 39 in file "mcc_generated_files/system/src/system.c"
  1892 ;; Parameters:    Size  Location     Type
  1893 ;;		None
  1894 ;; Auto vars:     Size  Location     Type
  1895 ;;		None
  1896 ;; Return value:  Size  Location     Type
  1897 ;;                  1    wreg      void 
  1898 ;; Registers used:
  1899 ;;		wreg, status,2, status,0, pclath, cstack
  1900 ;; Tracked objects:
  1901 ;;		On entry : 0/0
  1902 ;;		On exit  : 0/0
  1903 ;;		Unchanged: 0/0
  1904 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  1905 ;;      Params:         0       0       0       0       0       0       0       0
  1906 ;;      Locals:         0       0       0       0       0       0       0       0
  1907 ;;      Temps:          0       0       0       0       0       0       0       0
  1908 ;;      Totals:         0       0       0       0       0       0       0       0
  1909 ;;Total ram usage:        0 bytes
  1910 ;; Hardware stack levels used: 1
  1911 ;; Hardware stack levels required when called: 8
  1912 ;; This function calls:
  1913 ;;		_CLOCK_Initialize
  1914 ;;		_INTERRUPT_Initialize
  1915 ;;		_PIN_MANAGER_Initialize
  1916 ;;		_TMR1_Initialize
  1917 ;; This function is called by:
  1918 ;;		_main
  1919 ;; This function uses a non-reentrant model
  1920 ;;
  1921                           
  1922     07F3                     _SYSTEM_Initialize:	
  1923                           ;psect for function _SYSTEM_Initialize
  1924                           
  1925     07F3                     l1958:	
  1926                           ;incstack = 0
  1927                           ; Regs used in _SYSTEM_Initialize: [wreg+status,2+status,0+pclath+cstack]
  1928                           
  1929                           
  1930                           ;mcc_generated_files/system/src/system.c: 41:     CLOCK_Initialize();
  1931     07F3  318F  275C  3187   	fcall	_CLOCK_Initialize
  1932     07F6                     l1960:
  1933                           
  1934                           ;mcc_generated_files/system/src/system.c: 42:     PIN_MANAGER_Initialize();
  1935     07F6  3187  27CE  3187   	fcall	_PIN_MANAGER_Initialize
  1936     07F9                     l1962:
  1937                           
  1938                           ;mcc_generated_files/system/src/system.c: 43:     TMR1_Initialize();
  1939     07F9  318F  27C5  3187   	fcall	_TMR1_Initialize
  1940     07FC                     l1964:
  1941                           
  1942                           ;mcc_generated_files/system/src/system.c: 44:     INTERRUPT_Initialize();
  1943     07FC  318F  2783  3187   	fcall	_INTERRUPT_Initialize
  1944     07FF                     l83:
  1945     07FF  0008               	return
  1946     0800                     __end_of_SYSTEM_Initialize:
  1947                           
  1948                           	psect	text2
  1949     0FC5                     __ptext2:	
  1950 ;; *************** function _TMR1_Initialize *****************
  1951 ;; Defined at:
  1952 ;;		line 57 in file "mcc_generated_files/timer/src/tmr1.c"
  1953 ;; Parameters:    Size  Location     Type
  1954 ;;		None
  1955 ;; Auto vars:     Size  Location     Type
  1956 ;;		None
  1957 ;; Return value:  Size  Location     Type
  1958 ;;                  1    wreg      void 
  1959 ;; Registers used:
  1960 ;;		wreg, status,2, status,0, pclath, cstack
  1961 ;; Tracked objects:
  1962 ;;		On entry : 0/0
  1963 ;;		On exit  : 0/0
  1964 ;;		Unchanged: 0/0
  1965 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  1966 ;;      Params:         0       0       0       0       0       0       0       0
  1967 ;;      Locals:         0       0       0       0       0       0       0       0
  1968 ;;      Temps:          0       0       0       0       0       0       0       0
  1969 ;;      Totals:         0       0       0       0       0       0       0       0
  1970 ;;Total ram usage:        0 bytes
  1971 ;; Hardware stack levels used: 1
  1972 ;; Hardware stack levels required when called: 7
  1973 ;; This function calls:
  1974 ;;		_TMR1_OverflowCallbackRegister
  1975 ;; This function is called by:
  1976 ;;		_SYSTEM_Initialize
  1977 ;; This function uses a non-reentrant model
  1978 ;;
  1979                           
  1980     0FC5                     _TMR1_Initialize:	
  1981                           ;psect for function _TMR1_Initialize
  1982                           
  1983     0FC5                     l1724:	
  1984                           ;incstack = 0
  1985                           ; Regs used in _TMR1_Initialize: [wreg+status,2+status,0+pclath+cstack]
  1986                           
  1987                           
  1988                           ;mcc_generated_files/timer/src/tmr1.c: 60:     T1GCON = 0x0;
  1989     0FC5  0020               	movlb	0	; select bank0
  1990     0FC6  0199               	clrf	25	;volatile
  1991     0FC7                     l1726:
  1992                           
  1993                           ;mcc_generated_files/timer/src/tmr1.c: 62:     TMR1H = 0xC5;
  1994     0FC7  30C5               	movlw	197
  1995     0FC8  0097               	movwf	23	;volatile
  1996     0FC9                     l1728:
  1997                           
  1998                           ;mcc_generated_files/timer/src/tmr1.c: 64:     TMR1L = 0x67;
  1999     0FC9  3067               	movlw	103
  2000     0FCA  0096               	movwf	22	;volatile
  2001     0FCB                     l1730:
  2002                           
  2003                           ;mcc_generated_files/timer/src/tmr1.c: 67:     timer1ReloadVal=((uint16_t)TMR1H << 8) | 
      +                          TMR1L;
  2004     0FCB  0817               	movf	23,w	;volatile
  2005     0FCC  00C3               	movwf	_timer1ReloadVal+1	;volatile
  2006     0FCD  0816               	movf	22,w	;volatile
  2007     0FCE  00C2               	movwf	_timer1ReloadVal	;volatile
  2008     0FCF                     l1732:
  2009                           
  2010                           ;mcc_generated_files/timer/src/tmr1.c: 70:     TMR1_OverflowCallbackRegister(TMR1_Defaul
      +                          tOverflowCallback);
  2011     0FCF  3002               	movlw	low _TMR1_DefaultOverflowCallback
  2012     0FD0  00AE               	movwf	TMR1_OverflowCallbackRegister@CallbackHandler
  2013     0FD1  3000               	movlw	high _TMR1_DefaultOverflowCallback
  2014     0FD2  00AF               	movwf	TMR1_OverflowCallbackRegister@CallbackHandler+1
  2015     0FD3  318F  276E  318F   	fcall	_TMR1_OverflowCallbackRegister
  2016     0FD6                     l1734:
  2017                           
  2018                           ;mcc_generated_files/timer/src/tmr1.c: 73:      PIR1bits.TMR1IF = 0;
  2019     0FD6  0020               	movlb	0	; select bank0
  2020     0FD7  1011               	bcf	17,0	;volatile
  2021     0FD8                     l1736:
  2022                           
  2023                           ;mcc_generated_files/timer/src/tmr1.c: 75:      PIE1bits.TMR1IE = 1;
  2024     0FD8  0021               	movlb	1	; select bank1
  2025     0FD9  1411               	bsf	17,0	;volatile
  2026     0FDA                     l1738:
  2027                           
  2028                           ;mcc_generated_files/timer/src/tmr1.c: 78:     T1CON = 0x31;
  2029     0FDA  3031               	movlw	49
  2030     0FDB  0020               	movlb	0	; select bank0
  2031     0FDC  0098               	movwf	24	;volatile
  2032     0FDD                     l169:
  2033     0FDD  0008               	return
  2034     0FDE                     __end_of_TMR1_Initialize:
  2035                           
  2036                           	psect	text3
  2037     0F6E                     __ptext3:	
  2038 ;; *************** function _TMR1_OverflowCallbackRegister *****************
  2039 ;; Defined at:
  2040 ;;		line 163 in file "mcc_generated_files/timer/src/tmr1.c"
  2041 ;; Parameters:    Size  Location     Type
  2042 ;;  CallbackHand    2   14[BANK0 ] PTR FTN()void 
  2043 ;;		 -> Tmr1CallBack(1), TMR1_DefaultOverflowCallback(1), 
  2044 ;; Auto vars:     Size  Location     Type
  2045 ;;		None
  2046 ;; Return value:  Size  Location     Type
  2047 ;;                  1    wreg      void 
  2048 ;; Registers used:
  2049 ;;		wreg
  2050 ;; Tracked objects:
  2051 ;;		On entry : 0/0
  2052 ;;		On exit  : 0/0
  2053 ;;		Unchanged: 0/0
  2054 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  2055 ;;      Params:         0       2       0       0       0       0       0       0
  2056 ;;      Locals:         0       0       0       0       0       0       0       0
  2057 ;;      Temps:          0       0       0       0       0       0       0       0
  2058 ;;      Totals:         0       2       0       0       0       0       0       0
  2059 ;;Total ram usage:        2 bytes
  2060 ;; Hardware stack levels used: 1
  2061 ;; Hardware stack levels required when called: 6
  2062 ;; This function calls:
  2063 ;;		Nothing
  2064 ;; This function is called by:
  2065 ;;		_TMR1_Initialize
  2066 ;;		_main
  2067 ;; This function uses a non-reentrant model
  2068 ;;
  2069                           
  2070     0F6E                     _TMR1_OverflowCallbackRegister:	
  2071                           ;psect for function _TMR1_OverflowCallbackRegister
  2072                           
  2073     0F6E                     l1688:	
  2074                           ;incstack = 0
  2075                           ; Regs used in _TMR1_OverflowCallbackRegister: [wreg]
  2076                           
  2077                           
  2078                           ;mcc_generated_files/timer/src/tmr1.c: 163: void TMR1_OverflowCallbackRegister(void (* C
      +                          allbackHandler)(void));mcc_generated_files/timer/src/tmr1.c: 164: {;mcc_generated_files/
      +                          timer/src/tmr1.c: 165:     TMR1_OverflowCallback = CallbackHandler;
  2079     0F6E  0020               	movlb	0	; select bank0
  2080     0F6F  082F               	movf	TMR1_OverflowCallbackRegister@CallbackHandler+1,w
  2081     0F70  00DC               	movwf	_TMR1_OverflowCallback+1
  2082     0F71  082E               	movf	TMR1_OverflowCallbackRegister@CallbackHandler,w
  2083     0F72  00DB               	movwf	_TMR1_OverflowCallback
  2084     0F73                     l202:
  2085     0F73  0008               	return
  2086     0F74                     __end_of_TMR1_OverflowCallbackRegister:
  2087                           
  2088                           	psect	text4
  2089     07CE                     __ptext4:	
  2090 ;; *************** function _PIN_MANAGER_Initialize *****************
  2091 ;; Defined at:
  2092 ;;		line 39 in file "mcc_generated_files/system/src/pins.c"
  2093 ;; Parameters:    Size  Location     Type
  2094 ;;		None
  2095 ;; Auto vars:     Size  Location     Type
  2096 ;;		None
  2097 ;; Return value:  Size  Location     Type
  2098 ;;                  1    wreg      void 
  2099 ;; Registers used:
  2100 ;;		wreg, status,2, status,0, pclath, cstack
  2101 ;; Tracked objects:
  2102 ;;		On entry : 0/0
  2103 ;;		On exit  : 0/0
  2104 ;;		Unchanged: 0/0
  2105 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  2106 ;;      Params:         0       0       0       0       0       0       0       0
  2107 ;;      Locals:         0       0       0       0       0       0       0       0
  2108 ;;      Temps:          0       0       0       0       0       0       0       0
  2109 ;;      Totals:         0       0       0       0       0       0       0       0
  2110 ;;Total ram usage:        0 bytes
  2111 ;; Hardware stack levels used: 1
  2112 ;; Hardware stack levels required when called: 7
  2113 ;; This function calls:
  2114 ;;		_IO_RA0_SetInterruptHandler
  2115 ;; This function is called by:
  2116 ;;		_SYSTEM_Initialize
  2117 ;; This function uses a non-reentrant model
  2118 ;;
  2119                           
  2120     07CE                     _PIN_MANAGER_Initialize:	
  2121                           ;psect for function _PIN_MANAGER_Initialize
  2122                           
  2123     07CE                     l1704:	
  2124                           ;incstack = 0
  2125                           ; Regs used in _PIN_MANAGER_Initialize: [wreg+status,2+status,0+pclath+cstack]
  2126                           
  2127                           
  2128                           ;mcc_generated_files/system/src/pins.c: 44:     LATA = 0x0;
  2129     07CE  0022               	movlb	2	; select bank2
  2130     07CF  018C               	clrf	12	;volatile
  2131                           
  2132                           ;mcc_generated_files/system/src/pins.c: 45:     LATB = 0x0;
  2133     07D0  018D               	clrf	13	;volatile
  2134                           
  2135                           ;mcc_generated_files/system/src/pins.c: 46:     LATC = 0x0;
  2136     07D1  018E               	clrf	14	;volatile
  2137     07D2                     l1706:
  2138                           
  2139                           ;mcc_generated_files/system/src/pins.c: 51:     TRISA = 0x9;
  2140     07D2  3009               	movlw	9
  2141     07D3  0021               	movlb	1	; select bank1
  2142     07D4  008C               	movwf	12	;volatile
  2143                           
  2144                           ;mcc_generated_files/system/src/pins.c: 52:     TRISB = 0x0;
  2145     07D5  018D               	clrf	13	;volatile
  2146                           
  2147                           ;mcc_generated_files/system/src/pins.c: 53:     TRISC = 0x0;
  2148     07D6  018E               	clrf	14	;volatile
  2149                           
  2150                           ;mcc_generated_files/system/src/pins.c: 58:     ANSELA = 0x0;
  2151     07D7  0023               	movlb	3	; select bank3
  2152     07D8  018C               	clrf	12	;volatile
  2153                           
  2154                           ;mcc_generated_files/system/src/pins.c: 59:     ANSELB = 0x0;
  2155     07D9  018D               	clrf	13	;volatile
  2156                           
  2157                           ;mcc_generated_files/system/src/pins.c: 60:     ANSELC = 0x0;
  2158     07DA  018E               	clrf	14	;volatile
  2159     07DB                     l1708:
  2160                           
  2161                           ;mcc_generated_files/system/src/pins.c: 65:     WPUA = 0x9;
  2162     07DB  3009               	movlw	9
  2163     07DC  0024               	movlb	4	; select bank4
  2164     07DD  008C               	movwf	12	;volatile
  2165                           
  2166                           ;mcc_generated_files/system/src/pins.c: 66:     WPUB = 0x0;
  2167     07DE  018D               	clrf	13	;volatile
  2168     07DF                     l1710:
  2169                           
  2170                           ;mcc_generated_files/system/src/pins.c: 67:     OPTION_REGbits.nWPUEN = 0x0;
  2171     07DF  0021               	movlb	1	; select bank1
  2172     07E0  1395               	bcf	21,7	;volatile
  2173                           
  2174                           ;mcc_generated_files/system/src/pins.c: 91:     IOCAP = 0x0;
  2175     07E1  0027               	movlb	7	; select bank7
  2176     07E2  0191               	clrf	17	;volatile
  2177     07E3                     l1712:
  2178                           
  2179                           ;mcc_generated_files/system/src/pins.c: 92:     IOCAN = 0x1;
  2180     07E3  3001               	movlw	1
  2181     07E4  0092               	movwf	18	;volatile
  2182                           
  2183                           ;mcc_generated_files/system/src/pins.c: 93:     IOCAF = 0x0;
  2184     07E5  0193               	clrf	19	;volatile
  2185                           
  2186                           ;mcc_generated_files/system/src/pins.c: 94:     IOCBP = 0x0;
  2187     07E6  0194               	clrf	20	;volatile
  2188                           
  2189                           ;mcc_generated_files/system/src/pins.c: 95:     IOCBN = 0x0;
  2190     07E7  0195               	clrf	21	;volatile
  2191                           
  2192                           ;mcc_generated_files/system/src/pins.c: 96:     IOCBF = 0x0;
  2193     07E8  0196               	clrf	22	;volatile
  2194     07E9                     l1714:
  2195                           
  2196                           ;mcc_generated_files/system/src/pins.c: 98:     IO_RA0_SetInterruptHandler(IO_RA0_Defaul
      +                          tInterruptHandler);
  2197     07E9  305B               	movlw	low _IO_RA0_DefaultInterruptHandler
  2198     07EA  0020               	movlb	0	; select bank0
  2199     07EB  00AE               	movwf	IO_RA0_SetInterruptHandler@InterruptHandler
  2200     07EC  300F               	movlw	high _IO_RA0_DefaultInterruptHandler
  2201     07ED  00AF               	movwf	IO_RA0_SetInterruptHandler@InterruptHandler+1
  2202     07EE  318F  2768  3187   	fcall	_IO_RA0_SetInterruptHandler
  2203     07F1                     l1716:
  2204                           
  2205                           ;mcc_generated_files/system/src/pins.c: 101:     INTCONbits.IOCIE = 1;
  2206     07F1  158B               	bsf	11,3	;volatile
  2207     07F2                     l58:
  2208     07F2  0008               	return
  2209     07F3                     __end_of_PIN_MANAGER_Initialize:
  2210                           
  2211                           	psect	text5
  2212     0F68                     __ptext5:	
  2213 ;; *************** function _IO_RA0_SetInterruptHandler *****************
  2214 ;; Defined at:
  2215 ;;		line 131 in file "mcc_generated_files/system/src/pins.c"
  2216 ;; Parameters:    Size  Location     Type
  2217 ;;  InterruptHan    2   14[BANK0 ] PTR FTN()void 
  2218 ;;		 -> RA0Isr(1), IO_RA0_DefaultInterruptHandler(1), 
  2219 ;; Auto vars:     Size  Location     Type
  2220 ;;		None
  2221 ;; Return value:  Size  Location     Type
  2222 ;;                  1    wreg      void 
  2223 ;; Registers used:
  2224 ;;		wreg
  2225 ;; Tracked objects:
  2226 ;;		On entry : 0/0
  2227 ;;		On exit  : 0/0
  2228 ;;		Unchanged: 0/0
  2229 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  2230 ;;      Params:         0       2       0       0       0       0       0       0
  2231 ;;      Locals:         0       0       0       0       0       0       0       0
  2232 ;;      Temps:          0       0       0       0       0       0       0       0
  2233 ;;      Totals:         0       2       0       0       0       0       0       0
  2234 ;;Total ram usage:        2 bytes
  2235 ;; Hardware stack levels used: 1
  2236 ;; Hardware stack levels required when called: 6
  2237 ;; This function calls:
  2238 ;;		Nothing
  2239 ;; This function is called by:
  2240 ;;		_PIN_MANAGER_Initialize
  2241 ;;		_main
  2242 ;; This function uses a non-reentrant model
  2243 ;;
  2244                           
  2245     0F68                     _IO_RA0_SetInterruptHandler:	
  2246                           ;psect for function _IO_RA0_SetInterruptHandler
  2247                           
  2248     0F68                     l1684:	
  2249                           ;incstack = 0
  2250                           ; Regs used in _IO_RA0_SetInterruptHandler: [wreg]
  2251                           
  2252                           
  2253                           ;mcc_generated_files/system/src/pins.c: 132:     IO_RA0_InterruptHandler = InterruptHand
      +                          ler;
  2254     0F68  0020               	movlb	0	; select bank0
  2255     0F69  082F               	movf	IO_RA0_SetInterruptHandler@InterruptHandler+1,w
  2256     0F6A  00E0               	movwf	_IO_RA0_InterruptHandler+1
  2257     0F6B  082E               	movf	IO_RA0_SetInterruptHandler@InterruptHandler,w
  2258     0F6C  00DF               	movwf	_IO_RA0_InterruptHandler
  2259     0F6D                     l69:
  2260     0F6D  0008               	return
  2261     0F6E                     __end_of_IO_RA0_SetInterruptHandler:
  2262                           
  2263                           	psect	text6
  2264     0F83                     __ptext6:	
  2265 ;; *************** function _INTERRUPT_Initialize *****************
  2266 ;; Defined at:
  2267 ;;		line 40 in file "mcc_generated_files/system/src/interrupt.c"
  2268 ;; Parameters:    Size  Location     Type
  2269 ;;		None
  2270 ;; Auto vars:     Size  Location     Type
  2271 ;;		None
  2272 ;; Return value:  Size  Location     Type
  2273 ;;                  1    wreg      void 
  2274 ;; Registers used:
  2275 ;;		wreg, status,2, status,0, pclath, cstack
  2276 ;; Tracked objects:
  2277 ;;		On entry : 0/0
  2278 ;;		On exit  : 0/0
  2279 ;;		Unchanged: 0/0
  2280 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  2281 ;;      Params:         0       0       0       0       0       0       0       0
  2282 ;;      Locals:         0       0       0       0       0       0       0       0
  2283 ;;      Temps:          0       0       0       0       0       0       0       0
  2284 ;;      Totals:         0       0       0       0       0       0       0       0
  2285 ;;Total ram usage:        0 bytes
  2286 ;; Hardware stack levels used: 1
  2287 ;; Hardware stack levels required when called: 7
  2288 ;; This function calls:
  2289 ;;		_INT_SetInterruptHandler
  2290 ;; This function is called by:
  2291 ;;		_SYSTEM_Initialize
  2292 ;; This function uses a non-reentrant model
  2293 ;;
  2294                           
  2295     0F83                     _INTERRUPT_Initialize:	
  2296                           ;psect for function _INTERRUPT_Initialize
  2297                           
  2298     0F83                     l1740:	
  2299                           ;incstack = 0
  2300                           ; Regs used in _INTERRUPT_Initialize: [wreg+status,2+status,0+pclath+cstack]
  2301                           
  2302                           
  2303                           ;mcc_generated_files/system/src/interrupt.c: 44:     (INTCONbits.INTF = 0);
  2304     0F83  108B               	bcf	11,1	;volatile
  2305                           
  2306                           ;mcc_generated_files/system/src/interrupt.c: 45:     (OPTION_REGbits.INTEDG = 1);
  2307     0F84  0021               	movlb	1	; select bank1
  2308     0F85  1715               	bsf	21,6	;volatile
  2309     0F86                     l1742:
  2310                           
  2311                           ;mcc_generated_files/system/src/interrupt.c: 47:     INT_SetInterruptHandler(INT_Default
      +                          InterruptHandler);
  2312     0F86  3000               	movlw	0
  2313     0F87  0020               	movlb	0	; select bank0
  2314     0F88  00AE               	movwf	INT_SetInterruptHandler@InterruptHandler
  2315     0F89  3000               	movlw	0
  2316     0F8A  00AF               	movwf	INT_SetInterruptHandler@InterruptHandler+1
  2317     0F8B  318F  2762  318F   	fcall	_INT_SetInterruptHandler
  2318     0F8E                     l106:
  2319     0F8E  0008               	return
  2320     0F8F                     __end_of_INTERRUPT_Initialize:
  2321                           
  2322                           	psect	text7
  2323     0F62                     __ptext7:	
  2324 ;; *************** function _INT_SetInterruptHandler *****************
  2325 ;; Defined at:
  2326 ;;		line 101 in file "mcc_generated_files/system/src/interrupt.c"
  2327 ;; Parameters:    Size  Location     Type
  2328 ;;  InterruptHan    2   14[BANK0 ] PTR FTN()void 
  2329 ;;		 -> INT_DefaultInterruptHandler(1), 
  2330 ;; Auto vars:     Size  Location     Type
  2331 ;;		None
  2332 ;; Return value:  Size  Location     Type
  2333 ;;                  1    wreg      void 
  2334 ;; Registers used:
  2335 ;;		wreg
  2336 ;; Tracked objects:
  2337 ;;		On entry : 0/0
  2338 ;;		On exit  : 0/0
  2339 ;;		Unchanged: 0/0
  2340 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  2341 ;;      Params:         0       2       0       0       0       0       0       0
  2342 ;;      Locals:         0       0       0       0       0       0       0       0
  2343 ;;      Temps:          0       0       0       0       0       0       0       0
  2344 ;;      Totals:         0       2       0       0       0       0       0       0
  2345 ;;Total ram usage:        2 bytes
  2346 ;; Hardware stack levels used: 1
  2347 ;; Hardware stack levels required when called: 6
  2348 ;; This function calls:
  2349 ;;		Nothing
  2350 ;; This function is called by:
  2351 ;;		_INTERRUPT_Initialize
  2352 ;; This function uses a non-reentrant model
  2353 ;;
  2354                           
  2355     0F62                     _INT_SetInterruptHandler:	
  2356                           ;psect for function _INT_SetInterruptHandler
  2357                           
  2358     0F62                     l1686:	
  2359                           ;incstack = 0
  2360                           ; Regs used in _INT_SetInterruptHandler: [wreg]
  2361                           
  2362                           
  2363                           ;mcc_generated_files/system/src/interrupt.c: 102:     INT_InterruptHandler = InterruptHa
      +                          ndler;
  2364     0F62  0020               	movlb	0	; select bank0
  2365     0F63  082F               	movf	INT_SetInterruptHandler@InterruptHandler+1,w
  2366     0F64  00DE               	movwf	_INT_InterruptHandler+1
  2367     0F65  082E               	movf	INT_SetInterruptHandler@InterruptHandler,w
  2368     0F66  00DD               	movwf	_INT_InterruptHandler
  2369     0F67                     l127:
  2370     0F67  0008               	return
  2371     0F68                     __end_of_INT_SetInterruptHandler:
  2372                           
  2373                           	psect	text8
  2374     0F5C                     __ptext8:	
  2375 ;; *************** function _CLOCK_Initialize *****************
  2376 ;; Defined at:
  2377 ;;		line 39 in file "mcc_generated_files/system/src/clock.c"
  2378 ;; Parameters:    Size  Location     Type
  2379 ;;		None
  2380 ;; Auto vars:     Size  Location     Type
  2381 ;;		None
  2382 ;; Return value:  Size  Location     Type
  2383 ;;                  1    wreg      void 
  2384 ;; Registers used:
  2385 ;;		status,2
  2386 ;; Tracked objects:
  2387 ;;		On entry : 0/0
  2388 ;;		On exit  : 0/0
  2389 ;;		Unchanged: 0/0
  2390 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  2391 ;;      Params:         0       0       0       0       0       0       0       0
  2392 ;;      Locals:         0       0       0       0       0       0       0       0
  2393 ;;      Temps:          0       0       0       0       0       0       0       0
  2394 ;;      Totals:         0       0       0       0       0       0       0       0
  2395 ;;Total ram usage:        0 bytes
  2396 ;; Hardware stack levels used: 1
  2397 ;; Hardware stack levels required when called: 6
  2398 ;; This function calls:
  2399 ;;		Nothing
  2400 ;; This function is called by:
  2401 ;;		_SYSTEM_Initialize
  2402 ;; This function uses a non-reentrant model
  2403 ;;
  2404                           
  2405     0F5C                     _CLOCK_Initialize:	
  2406                           ;psect for function _CLOCK_Initialize
  2407                           
  2408     0F5C                     l1700:	
  2409                           ;incstack = 0
  2410                           ; Regs used in _CLOCK_Initialize: [status,2]
  2411                           
  2412                           
  2413                           ;mcc_generated_files/system/src/clock.c: 41:     OSCCON = (15 << 0x3)
  2414     0F5C  3078               	movlw	120
  2415     0F5D  0021               	movlb	1	; select bank1
  2416     0F5E  0099               	movwf	25	;volatile
  2417     0F5F                     l1702:
  2418                           
  2419                           ;mcc_generated_files/system/src/clock.c: 43:     BORCON = (0 << 0x7)
  2420     0F5F  0022               	movlb	2	; select bank2
  2421     0F60  0196               	clrf	22	;volatile
  2422     0F61                     l7:
  2423     0F61  0008               	return
  2424     0F62                     __end_of_CLOCK_Initialize:
  2425                           
  2426                           	psect	text9
  2427     04D8                     __ptext9:	
  2428 ;; *************** function _Display *****************
  2429 ;; Defined at:
  2430 ;;		line 243 in file "main.c"
  2431 ;; Parameters:    Size  Location     Type
  2432 ;;  a               2   28[BANK0 ] int 
  2433 ;; Auto vars:     Size  Location     Type
  2434 ;;  hundreds        2    7[BANK1 ] int 
  2435 ;;  tens            2    5[BANK1 ] int 
  2436 ;;  ones            2    3[BANK1 ] int 
  2437 ;; Return value:  Size  Location     Type
  2438 ;;                  1    wreg      void 
  2439 ;; Registers used:
  2440 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  2441 ;; Tracked objects:
  2442 ;;		On entry : 0/0
  2443 ;;		On exit  : 0/0
  2444 ;;		Unchanged: 0/0
  2445 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  2446 ;;      Params:         0       2       0       0       0       0       0       0
  2447 ;;      Locals:         0       0       6       0       0       0       0       0
  2448 ;;      Temps:          0       0       3       0       0       0       0       0
  2449 ;;      Totals:         0       2       9       0       0       0       0       0
  2450 ;;Total ram usage:       11 bytes
  2451 ;; Hardware stack levels used: 1
  2452 ;; Hardware stack levels required when called: 7
  2453 ;; This function calls:
  2454 ;;		_SetSegments
  2455 ;;		___awdiv
  2456 ;;		___awmod
  2457 ;; This function is called by:
  2458 ;;		_main
  2459 ;; This function uses a non-reentrant model
  2460 ;;
  2461                           
  2462     04D8                     _Display:	
  2463                           ;psect for function _Display
  2464                           
  2465     04D8                     l2406:	
  2466                           ;incstack = 0
  2467                           ; Regs used in _Display: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  2468                           
  2469                           
  2470                           ;main.c: 244:     int ones = a % 10;
  2471     04D8  300A               	movlw	10
  2472     04D9  0020               	movlb	0	; select bank0
  2473     04DA  00B6               	movwf	___awmod@divisor
  2474     04DB  3000               	movlw	0
  2475     04DC  00B7               	movwf	___awmod@divisor+1
  2476     04DD  083D               	movf	Display@a+1,w
  2477     04DE  00B9               	movwf	___awmod@dividend+1
  2478     04DF  083C               	movf	Display@a,w
  2479     04E0  00B8               	movwf	___awmod@dividend
  2480     04E1  3187  272B  3184   	fcall	___awmod
  2481     04E4  0020               	movlb	0	; select bank0
  2482     04E5  0837               	movf	?___awmod+1,w
  2483     04E6  0021               	movlb	1	; select bank1
  2484     04E7  00A4               	movwf	(Display@ones+1)^(0+128)
  2485     04E8  0020               	movlb	0	; select bank0
  2486     04E9  0836               	movf	?___awmod,w
  2487     04EA  0021               	movlb	1	; select bank1
  2488     04EB  00A3               	movwf	Display@ones^(0+128)
  2489                           
  2490                           ;main.c: 245:     int tens = (a / 10) % 10;
  2491     04EC  300A               	movlw	10
  2492     04ED  0020               	movlb	0	; select bank0
  2493     04EE  00B6               	movwf	___awmod@divisor
  2494     04EF  3000               	movlw	0
  2495     04F0  00B7               	movwf	___awmod@divisor+1
  2496     04F1  300A               	movlw	10
  2497     04F2  00AE               	movwf	___awdiv@divisor
  2498     04F3  3000               	movlw	0
  2499     04F4  00AF               	movwf	___awdiv@divisor+1
  2500     04F5  083D               	movf	Display@a+1,w
  2501     04F6  00B1               	movwf	___awdiv@dividend+1
  2502     04F7  083C               	movf	Display@a,w
  2503     04F8  00B0               	movwf	___awdiv@dividend
  2504     04F9  3186  2674  3184   	fcall	___awdiv
  2505     04FC  0020               	movlb	0	; select bank0
  2506     04FD  082F               	movf	?___awdiv+1,w
  2507     04FE  00B9               	movwf	___awmod@dividend+1
  2508     04FF  082E               	movf	?___awdiv,w
  2509     0500  00B8               	movwf	___awmod@dividend
  2510     0501  3187  272B  3184   	fcall	___awmod
  2511     0504  0020               	movlb	0	; select bank0
  2512     0505  0837               	movf	?___awmod+1,w
  2513     0506  0021               	movlb	1	; select bank1
  2514     0507  00A6               	movwf	(Display@tens+1)^(0+128)
  2515     0508  0020               	movlb	0	; select bank0
  2516     0509  0836               	movf	?___awmod,w
  2517     050A  0021               	movlb	1	; select bank1
  2518     050B  00A5               	movwf	Display@tens^(0+128)
  2519     050C                     l2408:
  2520                           
  2521                           ;main.c: 246:     int hundreds = a > 99;
  2522     050C  0020               	movlb	0	; select bank0
  2523     050D  083D               	movf	Display@a+1,w
  2524     050E  3A80               	xorlw	128
  2525     050F  0021               	movlb	1	; select bank1
  2526     0510  00A0               	movwf	??_Display^(0+128)
  2527     0511  3080               	movlw	128
  2528     0512  0220               	subwf	??_Display^(0+128),w
  2529     0513  1D03               	skipz
  2530     0514  2D18               	goto	u1725
  2531     0515  3064               	movlw	100
  2532     0516  0020               	movlb	0	; select bank0
  2533     0517  023C               	subwf	Display@a,w
  2534     0518                     u1725:
  2535     0518  1803               	skipnc
  2536     0519  2D1B               	goto	u1721
  2537     051A  2D1D               	goto	u1720
  2538     051B                     u1721:
  2539     051B  3001               	movlw	1
  2540     051C  2D1E               	goto	u1730
  2541     051D                     u1720:
  2542     051D  3000               	movlw	0
  2543     051E                     u1730:
  2544     051E  0021               	movlb	1	; select bank1
  2545     051F  00A1               	movwf	(??_Display+1)^(0+128)
  2546     0520  01A2               	clrf	(??_Display+2)^(0+128)
  2547     0521  0821               	movf	(??_Display+1)^(0+128),w
  2548     0522  00A7               	movwf	Display@hundreds^(0+128)
  2549     0523  0822               	movf	(??_Display+2)^(0+128),w
  2550     0524  00A8               	movwf	(Display@hundreds+1)^(0+128)
  2551     0525                     l2410:
  2552                           
  2553                           ;main.c: 248:     SetSegments(&one, ones, 0);
  2554     0525  3054               	movlw	low _one
  2555     0526  0020               	movlb	0	; select bank0
  2556     0527  00AE               	movwf	SetSegments@digit
  2557     0528  3000               	movlw	high _one
  2558     0529  00AF               	movwf	SetSegments@digit+1
  2559     052A  0021               	movlb	1	; select bank1
  2560     052B  0824               	movf	(Display@ones+1)^(0+128),w
  2561     052C  0020               	movlb	0	; select bank0
  2562     052D  00B1               	movwf	SetSegments@a+1
  2563     052E  0021               	movlb	1	; select bank1
  2564     052F  0823               	movf	Display@ones^(0+128),w
  2565     0530  0020               	movlb	0	; select bank0
  2566     0531  00B0               	movwf	SetSegments@a
  2567     0532  01B2               	clrf	SetSegments@blank
  2568     0533  3180  203B  3184   	fcall	_SetSegments
  2569     0536                     l2412:
  2570                           
  2571                           ;main.c: 249:     SetSegments(&ten, tens, (a < 10));
  2572     0536  304D               	movlw	low _ten
  2573     0537  0020               	movlb	0	; select bank0
  2574     0538  00AE               	movwf	SetSegments@digit
  2575     0539  3000               	movlw	high _ten
  2576     053A  00AF               	movwf	SetSegments@digit+1
  2577     053B  0021               	movlb	1	; select bank1
  2578     053C  0826               	movf	(Display@tens+1)^(0+128),w
  2579     053D  0020               	movlb	0	; select bank0
  2580     053E  00B1               	movwf	SetSegments@a+1
  2581     053F  0021               	movlb	1	; select bank1
  2582     0540  0825               	movf	Display@tens^(0+128),w
  2583     0541  0020               	movlb	0	; select bank0
  2584     0542  00B0               	movwf	SetSegments@a
  2585     0543  083D               	movf	Display@a+1,w
  2586     0544  3A80               	xorlw	128
  2587     0545  0021               	movlb	1	; select bank1
  2588     0546  00A0               	movwf	??_Display^(0+128)
  2589     0547  3080               	movlw	128
  2590     0548  0220               	subwf	??_Display^(0+128),w
  2591     0549  1D03               	skipz
  2592     054A  2D4E               	goto	u1745
  2593     054B  300A               	movlw	10
  2594     054C  0020               	movlb	0	; select bank0
  2595     054D  023C               	subwf	Display@a,w
  2596     054E                     u1745:
  2597     054E  1C03               	skipc
  2598     054F  2D51               	goto	u1741
  2599     0550  2D53               	goto	u1740
  2600     0551                     u1741:
  2601     0551  3001               	movlw	1
  2602     0552  2D54               	goto	u1750
  2603     0553                     u1740:
  2604     0553  3000               	movlw	0
  2605     0554                     u1750:
  2606     0554  0020               	movlb	0	; select bank0
  2607     0555  00B2               	movwf	SetSegments@blank
  2608     0556  3180  203B  3184   	fcall	_SetSegments
  2609     0559                     l2414:
  2610                           
  2611                           ;main.c: 250:     SetSegments(&hundred, hundreds, 0);
  2612     0559  3046               	movlw	low _hundred
  2613     055A  0020               	movlb	0	; select bank0
  2614     055B  00AE               	movwf	SetSegments@digit
  2615     055C  3000               	movlw	high _hundred
  2616     055D  00AF               	movwf	SetSegments@digit+1
  2617     055E  0021               	movlb	1	; select bank1
  2618     055F  0828               	movf	(Display@hundreds+1)^(0+128),w
  2619     0560  0020               	movlb	0	; select bank0
  2620     0561  00B1               	movwf	SetSegments@a+1
  2621     0562  0021               	movlb	1	; select bank1
  2622     0563  0827               	movf	Display@hundreds^(0+128),w
  2623     0564  0020               	movlb	0	; select bank0
  2624     0565  00B0               	movwf	SetSegments@a
  2625     0566  01B2               	clrf	SetSegments@blank
  2626     0567  3180  203B  3184   	fcall	_SetSegments
  2627     056A                     l270:
  2628     056A  0008               	return
  2629     056B                     __end_of_Display:
  2630                           
  2631                           	psect	text10
  2632     072B                     __ptext10:	
  2633 ;; *************** function ___awmod *****************
  2634 ;; Defined at:
  2635 ;;		line 5 in file "C:\Program Files\Microchip\xc8\v3.10\pic\sources\c99\common\awmod.c"
  2636 ;; Parameters:    Size  Location     Type
  2637 ;;  divisor         2   22[BANK0 ] int 
  2638 ;;  dividend        2   24[BANK0 ] int 
  2639 ;; Auto vars:     Size  Location     Type
  2640 ;;  sign            1   27[BANK0 ] unsigned char 
  2641 ;;  counter         1   26[BANK0 ] unsigned char 
  2642 ;; Return value:  Size  Location     Type
  2643 ;;                  2   22[BANK0 ] int 
  2644 ;; Registers used:
  2645 ;;		wreg, status,2, status,0
  2646 ;; Tracked objects:
  2647 ;;		On entry : 0/0
  2648 ;;		On exit  : 0/0
  2649 ;;		Unchanged: 0/0
  2650 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  2651 ;;      Params:         0       4       0       0       0       0       0       0
  2652 ;;      Locals:         0       2       0       0       0       0       0       0
  2653 ;;      Temps:          0       0       0       0       0       0       0       0
  2654 ;;      Totals:         0       6       0       0       0       0       0       0
  2655 ;;Total ram usage:        6 bytes
  2656 ;; Hardware stack levels used: 1
  2657 ;; Hardware stack levels required when called: 6
  2658 ;; This function calls:
  2659 ;;		Nothing
  2660 ;; This function is called by:
  2661 ;;		_Display
  2662 ;; This function uses a non-reentrant model
  2663 ;;
  2664                           
  2665     072B                     ___awmod:	
  2666                           ;psect for function ___awmod
  2667                           
  2668     072B                     l2356:	
  2669                           ;incstack = 0
  2670                           ; Regs used in ___awmod: [wreg+status,2+status,0]
  2671                           
  2672     072B  0020               	movlb	0	; select bank0
  2673     072C  01BB               	clrf	___awmod@sign
  2674     072D                     l2358:
  2675     072D  1FB9               	btfss	___awmod@dividend+1,7
  2676     072E  2F30               	goto	u1611
  2677     072F  2F31               	goto	u1610
  2678     0730                     u1611:
  2679     0730  2F38               	goto	l2364
  2680     0731                     u1610:
  2681     0731                     l2360:
  2682     0731  09B8               	comf	___awmod@dividend,f
  2683     0732  09B9               	comf	___awmod@dividend+1,f
  2684     0733  0AB8               	incf	___awmod@dividend,f
  2685     0734  1903               	skipnz
  2686     0735  0AB9               	incf	___awmod@dividend+1,f
  2687     0736                     l2362:
  2688     0736  3001               	movlw	1
  2689     0737  00BB               	movwf	___awmod@sign
  2690     0738                     l2364:
  2691     0738  1FB7               	btfss	___awmod@divisor+1,7
  2692     0739  2F3B               	goto	u1621
  2693     073A  2F3C               	goto	u1620
  2694     073B                     u1621:
  2695     073B  2F41               	goto	l2368
  2696     073C                     u1620:
  2697     073C                     l2366:
  2698     073C  09B6               	comf	___awmod@divisor,f
  2699     073D  09B7               	comf	___awmod@divisor+1,f
  2700     073E  0AB6               	incf	___awmod@divisor,f
  2701     073F  1903               	skipnz
  2702     0740  0AB7               	incf	___awmod@divisor+1,f
  2703     0741                     l2368:
  2704     0741  0836               	movf	___awmod@divisor,w
  2705     0742  0437               	iorwf	___awmod@divisor+1,w
  2706     0743  1903               	btfsc	3,2
  2707     0744  2F46               	goto	u1631
  2708     0745  2F47               	goto	u1630
  2709     0746                     u1631:
  2710     0746  2F6E               	goto	l2386
  2711     0747                     u1630:
  2712     0747                     l2370:
  2713     0747  3001               	movlw	1
  2714     0748  00BA               	movwf	___awmod@counter
  2715     0749  2F51               	goto	l2376
  2716     074A                     l2372:
  2717     074A  3001               	movlw	1
  2718     074B                     u1645:
  2719     074B  35B6               	lslf	___awmod@divisor,f
  2720     074C  0DB7               	rlf	___awmod@divisor+1,f
  2721     074D  0B89               	decfsz	9,f
  2722     074E  2F4B               	goto	u1645
  2723     074F                     l2374:
  2724     074F  3001               	movlw	1
  2725     0750  07BA               	addwf	___awmod@counter,f
  2726     0751                     l2376:
  2727     0751  1FB7               	btfss	___awmod@divisor+1,7
  2728     0752  2F54               	goto	u1651
  2729     0753  2F55               	goto	u1650
  2730     0754                     u1651:
  2731     0754  2F4A               	goto	l2372
  2732     0755                     u1650:
  2733     0755                     l2378:
  2734     0755  0837               	movf	___awmod@divisor+1,w
  2735     0756  0239               	subwf	___awmod@dividend+1,w
  2736     0757  1D03               	skipz
  2737     0758  2F5B               	goto	u1665
  2738     0759  0836               	movf	___awmod@divisor,w
  2739     075A  0238               	subwf	___awmod@dividend,w
  2740     075B                     u1665:
  2741     075B  1C03               	skipc
  2742     075C  2F5E               	goto	u1661
  2743     075D  2F5F               	goto	u1660
  2744     075E                     u1661:
  2745     075E  2F63               	goto	l2382
  2746     075F                     u1660:
  2747     075F                     l2380:
  2748     075F  0836               	movf	___awmod@divisor,w
  2749     0760  02B8               	subwf	___awmod@dividend,f
  2750     0761  0837               	movf	___awmod@divisor+1,w
  2751     0762  3BB9               	subwfb	___awmod@dividend+1,f
  2752     0763                     l2382:
  2753     0763  3001               	movlw	1
  2754     0764                     u1675:
  2755     0764  36B7               	lsrf	___awmod@divisor+1,f
  2756     0765  0CB6               	rrf	___awmod@divisor,f
  2757     0766  0B89               	decfsz	9,f
  2758     0767  2F64               	goto	u1675
  2759     0768                     l2384:
  2760     0768  3001               	movlw	1
  2761     0769  02BA               	subwf	___awmod@counter,f
  2762     076A  1D03               	btfss	3,2
  2763     076B  2F6D               	goto	u1681
  2764     076C  2F6E               	goto	u1680
  2765     076D                     u1681:
  2766     076D  2F55               	goto	l2378
  2767     076E                     u1680:
  2768     076E                     l2386:
  2769     076E  083B               	movf	___awmod@sign,w
  2770     076F  1903               	btfsc	3,2
  2771     0770  2F72               	goto	u1691
  2772     0771  2F73               	goto	u1690
  2773     0772                     u1691:
  2774     0772  2F78               	goto	l2390
  2775     0773                     u1690:
  2776     0773                     l2388:
  2777     0773  09B8               	comf	___awmod@dividend,f
  2778     0774  09B9               	comf	___awmod@dividend+1,f
  2779     0775  0AB8               	incf	___awmod@dividend,f
  2780     0776  1903               	skipnz
  2781     0777  0AB9               	incf	___awmod@dividend+1,f
  2782     0778                     l2390:
  2783     0778  0839               	movf	___awmod@dividend+1,w
  2784     0779  00B7               	movwf	?___awmod+1
  2785     077A  0838               	movf	___awmod@dividend,w
  2786     077B  00B6               	movwf	?___awmod
  2787     077C                     l470:
  2788     077C  0008               	return
  2789     077D                     __end_of___awmod:
  2790                           
  2791                           	psect	text11
  2792     0674                     __ptext11:	
  2793 ;; *************** function ___awdiv *****************
  2794 ;; Defined at:
  2795 ;;		line 5 in file "C:\Program Files\Microchip\xc8\v3.10\pic\sources\c99\common\awdiv.c"
  2796 ;; Parameters:    Size  Location     Type
  2797 ;;  divisor         2   14[BANK0 ] int 
  2798 ;;  dividend        2   16[BANK0 ] int 
  2799 ;; Auto vars:     Size  Location     Type
  2800 ;;  quotient        2   20[BANK0 ] int 
  2801 ;;  sign            1   19[BANK0 ] unsigned char 
  2802 ;;  counter         1   18[BANK0 ] unsigned char 
  2803 ;; Return value:  Size  Location     Type
  2804 ;;                  2   14[BANK0 ] int 
  2805 ;; Registers used:
  2806 ;;		wreg, status,2, status,0
  2807 ;; Tracked objects:
  2808 ;;		On entry : 0/0
  2809 ;;		On exit  : 0/0
  2810 ;;		Unchanged: 0/0
  2811 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  2812 ;;      Params:         0       4       0       0       0       0       0       0
  2813 ;;      Locals:         0       4       0       0       0       0       0       0
  2814 ;;      Temps:          0       0       0       0       0       0       0       0
  2815 ;;      Totals:         0       8       0       0       0       0       0       0
  2816 ;;Total ram usage:        8 bytes
  2817 ;; Hardware stack levels used: 1
  2818 ;; Hardware stack levels required when called: 6
  2819 ;; This function calls:
  2820 ;;		Nothing
  2821 ;; This function is called by:
  2822 ;;		_Display
  2823 ;; This function uses a non-reentrant model
  2824 ;;
  2825                           
  2826     0674                     ___awdiv:	
  2827                           ;psect for function ___awdiv
  2828                           
  2829     0674                     l2312:	
  2830                           ;incstack = 0
  2831                           ; Regs used in ___awdiv: [wreg+status,2+status,0]
  2832                           
  2833     0674  0020               	movlb	0	; select bank0
  2834     0675  01B3               	clrf	___awdiv@sign
  2835     0676                     l2314:
  2836     0676  1FAF               	btfss	___awdiv@divisor+1,7
  2837     0677  2E79               	goto	u1511
  2838     0678  2E7A               	goto	u1510
  2839     0679                     u1511:
  2840     0679  2E81               	goto	l2320
  2841     067A                     u1510:
  2842     067A                     l2316:
  2843     067A  09AE               	comf	___awdiv@divisor,f
  2844     067B  09AF               	comf	___awdiv@divisor+1,f
  2845     067C  0AAE               	incf	___awdiv@divisor,f
  2846     067D  1903               	skipnz
  2847     067E  0AAF               	incf	___awdiv@divisor+1,f
  2848     067F                     l2318:
  2849     067F  3001               	movlw	1
  2850     0680  00B3               	movwf	___awdiv@sign
  2851     0681                     l2320:
  2852     0681  1FB1               	btfss	___awdiv@dividend+1,7
  2853     0682  2E84               	goto	u1521
  2854     0683  2E85               	goto	u1520
  2855     0684                     u1521:
  2856     0684  2E8C               	goto	l2326
  2857     0685                     u1520:
  2858     0685                     l2322:
  2859     0685  09B0               	comf	___awdiv@dividend,f
  2860     0686  09B1               	comf	___awdiv@dividend+1,f
  2861     0687  0AB0               	incf	___awdiv@dividend,f
  2862     0688  1903               	skipnz
  2863     0689  0AB1               	incf	___awdiv@dividend+1,f
  2864     068A                     l2324:
  2865     068A  3001               	movlw	1
  2866     068B  06B3               	xorwf	___awdiv@sign,f
  2867     068C                     l2326:
  2868     068C  01B4               	clrf	___awdiv@quotient
  2869     068D  01B5               	clrf	___awdiv@quotient+1
  2870     068E                     l2328:
  2871     068E  082E               	movf	___awdiv@divisor,w
  2872     068F  042F               	iorwf	___awdiv@divisor+1,w
  2873     0690  1903               	btfsc	3,2
  2874     0691  2E93               	goto	u1531
  2875     0692  2E94               	goto	u1530
  2876     0693                     u1531:
  2877     0693  2EC1               	goto	l2348
  2878     0694                     u1530:
  2879     0694                     l2330:
  2880     0694  3001               	movlw	1
  2881     0695  00B2               	movwf	___awdiv@counter
  2882     0696  2E9E               	goto	l2336
  2883     0697                     l2332:
  2884     0697  3001               	movlw	1
  2885     0698                     u1545:
  2886     0698  35AE               	lslf	___awdiv@divisor,f
  2887     0699  0DAF               	rlf	___awdiv@divisor+1,f
  2888     069A  0B89               	decfsz	9,f
  2889     069B  2E98               	goto	u1545
  2890     069C                     l2334:
  2891     069C  3001               	movlw	1
  2892     069D  07B2               	addwf	___awdiv@counter,f
  2893     069E                     l2336:
  2894     069E  1FAF               	btfss	___awdiv@divisor+1,7
  2895     069F  2EA1               	goto	u1551
  2896     06A0  2EA2               	goto	u1550
  2897     06A1                     u1551:
  2898     06A1  2E97               	goto	l2332
  2899     06A2                     u1550:
  2900     06A2                     l2338:
  2901     06A2  3001               	movlw	1
  2902     06A3                     u1565:
  2903     06A3  35B4               	lslf	___awdiv@quotient,f
  2904     06A4  0DB5               	rlf	___awdiv@quotient+1,f
  2905     06A5  0B89               	decfsz	9,f
  2906     06A6  2EA3               	goto	u1565
  2907     06A7  082F               	movf	___awdiv@divisor+1,w
  2908     06A8  0231               	subwf	___awdiv@dividend+1,w
  2909     06A9  1D03               	skipz
  2910     06AA  2EAD               	goto	u1575
  2911     06AB  082E               	movf	___awdiv@divisor,w
  2912     06AC  0230               	subwf	___awdiv@dividend,w
  2913     06AD                     u1575:
  2914     06AD  1C03               	skipc
  2915     06AE  2EB0               	goto	u1571
  2916     06AF  2EB1               	goto	u1570
  2917     06B0                     u1571:
  2918     06B0  2EB6               	goto	l2344
  2919     06B1                     u1570:
  2920     06B1                     l2340:
  2921     06B1  082E               	movf	___awdiv@divisor,w
  2922     06B2  02B0               	subwf	___awdiv@dividend,f
  2923     06B3  082F               	movf	___awdiv@divisor+1,w
  2924     06B4  3BB1               	subwfb	___awdiv@dividend+1,f
  2925     06B5                     l2342:
  2926     06B5  1434               	bsf	___awdiv@quotient,0
  2927     06B6                     l2344:
  2928     06B6  3001               	movlw	1
  2929     06B7                     u1585:
  2930     06B7  36AF               	lsrf	___awdiv@divisor+1,f
  2931     06B8  0CAE               	rrf	___awdiv@divisor,f
  2932     06B9  0B89               	decfsz	9,f
  2933     06BA  2EB7               	goto	u1585
  2934     06BB                     l2346:
  2935     06BB  3001               	movlw	1
  2936     06BC  02B2               	subwf	___awdiv@counter,f
  2937     06BD  1D03               	btfss	3,2
  2938     06BE  2EC0               	goto	u1591
  2939     06BF  2EC1               	goto	u1590
  2940     06C0                     u1591:
  2941     06C0  2EA2               	goto	l2338
  2942     06C1                     u1590:
  2943     06C1                     l2348:
  2944     06C1  0833               	movf	___awdiv@sign,w
  2945     06C2  1903               	btfsc	3,2
  2946     06C3  2EC5               	goto	u1601
  2947     06C4  2EC6               	goto	u1600
  2948     06C5                     u1601:
  2949     06C5  2ECB               	goto	l2352
  2950     06C6                     u1600:
  2951     06C6                     l2350:
  2952     06C6  09B4               	comf	___awdiv@quotient,f
  2953     06C7  09B5               	comf	___awdiv@quotient+1,f
  2954     06C8  0AB4               	incf	___awdiv@quotient,f
  2955     06C9  1903               	skipnz
  2956     06CA  0AB5               	incf	___awdiv@quotient+1,f
  2957     06CB                     l2352:
  2958     06CB  0835               	movf	___awdiv@quotient+1,w
  2959     06CC  00AF               	movwf	?___awdiv+1
  2960     06CD  0834               	movf	___awdiv@quotient,w
  2961     06CE  00AE               	movwf	?___awdiv
  2962     06CF                     l457:
  2963     06CF  0008               	return
  2964     06D0                     __end_of___awdiv:
  2965                           
  2966                           	psect	text12
  2967     003B                     __ptext12:	
  2968 ;; *************** function _SetSegments *****************
  2969 ;; Defined at:
  2970 ;;		line 129 in file "main.c"
  2971 ;; Parameters:    Size  Location     Type
  2972 ;;  digit           2   14[BANK0 ] PTR struct digit
  2973 ;;		 -> one(7), ten(7), hundred(7), 
  2974 ;;  a               2   16[BANK0 ] int 
  2975 ;;  blank           1   18[BANK0 ] unsigned char 
  2976 ;; Auto vars:     Size  Location     Type
  2977 ;;		None
  2978 ;; Return value:  Size  Location     Type
  2979 ;;                  1    wreg      void 
  2980 ;; Registers used:
  2981 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0
  2982 ;; Tracked objects:
  2983 ;;		On entry : 0/0
  2984 ;;		On exit  : 0/0
  2985 ;;		Unchanged: 0/0
  2986 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  2987 ;;      Params:         0       5       0       0       0       0       0       0
  2988 ;;      Locals:         0       0       0       0       0       0       0       0
  2989 ;;      Temps:          0       0       0       0       0       0       0       0
  2990 ;;      Totals:         0       5       0       0       0       0       0       0
  2991 ;;Total ram usage:        5 bytes
  2992 ;; Hardware stack levels used: 1
  2993 ;; Hardware stack levels required when called: 6
  2994 ;; This function calls:
  2995 ;;		Nothing
  2996 ;; This function is called by:
  2997 ;;		_Display
  2998 ;; This function uses a non-reentrant model
  2999 ;;
  3000                           
  3001     003B                     _SetSegments:	
  3002                           ;psect for function _SetSegments
  3003                           
  3004     003B                     l2220:	
  3005                           ;incstack = 0
  3006                           ; Regs used in _SetSegments: [wreg-fsr1h+status,2+status,0]
  3007                           
  3008                           
  3009                           ;main.c: 130:     if (blank) {
  3010     003B  0020               	movlb	0	; select bank0
  3011     003C  0832               	movf	SetSegments@blank,w
  3012     003D  1903               	btfsc	3,2
  3013     003E  2840               	goto	u1501
  3014     003F  2841               	goto	u1500
  3015     0040                     u1501:
  3016     0040  29FE               	goto	l2306
  3017     0041                     u1500:
  3018     0041                     l2222:
  3019                           
  3020                           ;main.c: 131:         digit->a = 0;
  3021     0041  082E               	movf	SetSegments@digit,w
  3022     0042  0086               	movwf	6
  3023     0043  082F               	movf	SetSegments@digit+1,w
  3024     0044  0087               	movwf	7
  3025     0045  0181               	clrf	1
  3026                           
  3027                           ;main.c: 132:         digit->b = 0;
  3028     0046  082E               	movf	SetSegments@digit,w
  3029     0047  0086               	movwf	6
  3030     0048  0187               	clrf	7
  3031     0049  3141               	addfsr 1,1
  3032     004A  0181               	clrf	1
  3033                           
  3034                           ;main.c: 133:         digit->c = 0;
  3035     004B  082E               	movf	SetSegments@digit,w
  3036     004C  0086               	movwf	6
  3037     004D  0187               	clrf	7
  3038     004E  3142               	addfsr 1,2
  3039     004F  0181               	clrf	1
  3040                           
  3041                           ;main.c: 134:         digit->d = 0;
  3042     0050  082E               	movf	SetSegments@digit,w
  3043     0051  0086               	movwf	6
  3044     0052  0187               	clrf	7
  3045     0053  3143               	addfsr 1,3
  3046     0054  0181               	clrf	1
  3047                           
  3048                           ;main.c: 135:         digit->e = 0;
  3049     0055  082E               	movf	SetSegments@digit,w
  3050     0056  0086               	movwf	6
  3051     0057  0187               	clrf	7
  3052     0058  3144               	addfsr 1,4
  3053     0059  0181               	clrf	1
  3054                           
  3055                           ;main.c: 136:         digit->f = 0;
  3056     005A  082E               	movf	SetSegments@digit,w
  3057     005B  0086               	movwf	6
  3058     005C  0187               	clrf	7
  3059     005D  3145               	addfsr 1,5
  3060     005E  0181               	clrf	1
  3061                           
  3062                           ;main.c: 137:         digit->g = 0;
  3063     005F  082E               	movf	SetSegments@digit,w
  3064     0060  0086               	movwf	6
  3065     0061  0187               	clrf	7
  3066     0062  3146               	addfsr 1,6
  3067     0063  0181               	clrf	1
  3068                           
  3069                           ;main.c: 138:     } else {
  3070     0064  2A23               	goto	l267
  3071     0065                     l2224:
  3072                           
  3073                           ;main.c: 141:                 digit->a = 1;
  3074     0065  082E               	movf	SetSegments@digit,w
  3075     0066  0086               	movwf	6
  3076     0067  082F               	movf	SetSegments@digit+1,w
  3077     0068  0087               	movwf	7
  3078     0069  3001               	movlw	1
  3079     006A  0081               	movwf	1
  3080                           
  3081                           ;main.c: 142:                 digit->b = 1;
  3082     006B  082E               	movf	SetSegments@digit,w
  3083     006C  0086               	movwf	6
  3084     006D  0187               	clrf	7
  3085     006E  3141               	addfsr 1,1
  3086     006F  3001               	movlw	1
  3087     0070  0081               	movwf	1
  3088                           
  3089                           ;main.c: 143:                 digit->c = 1;
  3090     0071  082E               	movf	SetSegments@digit,w
  3091     0072  0086               	movwf	6
  3092     0073  0187               	clrf	7
  3093     0074  3142               	addfsr 1,2
  3094     0075  3001               	movlw	1
  3095     0076  0081               	movwf	1
  3096                           
  3097                           ;main.c: 144:                 digit->d = 1;
  3098     0077  082E               	movf	SetSegments@digit,w
  3099     0078  0086               	movwf	6
  3100     0079  0187               	clrf	7
  3101     007A  3143               	addfsr 1,3
  3102     007B  3001               	movlw	1
  3103     007C  0081               	movwf	1
  3104                           
  3105                           ;main.c: 145:                 digit->e = 1;
  3106     007D  082E               	movf	SetSegments@digit,w
  3107     007E  0086               	movwf	6
  3108     007F  0187               	clrf	7
  3109     0080  3144               	addfsr 1,4
  3110     0081  3001               	movlw	1
  3111     0082  0081               	movwf	1
  3112                           
  3113                           ;main.c: 146:                 digit->f = 1;
  3114     0083  082E               	movf	SetSegments@digit,w
  3115     0084  0086               	movwf	6
  3116     0085  0187               	clrf	7
  3117     0086  3145               	addfsr 1,5
  3118     0087  3001               	movlw	1
  3119     0088  0081               	movwf	1
  3120     0089                     l2226:
  3121                           
  3122                           ;main.c: 147:                 digit->g = 0;
  3123     0089  082E               	movf	SetSegments@digit,w
  3124     008A  0086               	movwf	6
  3125     008B  0187               	clrf	7
  3126     008C  3146               	addfsr 1,6
  3127     008D  0181               	clrf	1
  3128                           
  3129                           ;main.c: 148:                 break;
  3130     008E  2A23               	goto	l267
  3131     008F                     l2228:
  3132                           
  3133                           ;main.c: 151:                 digit->a = 0;
  3134     008F  082E               	movf	SetSegments@digit,w
  3135     0090  0086               	movwf	6
  3136     0091  082F               	movf	SetSegments@digit+1,w
  3137     0092  0087               	movwf	7
  3138     0093  0181               	clrf	1
  3139     0094                     l2230:
  3140                           
  3141                           ;main.c: 152:                 digit->b = 1;
  3142     0094  082E               	movf	SetSegments@digit,w
  3143     0095  0086               	movwf	6
  3144     0096  0187               	clrf	7
  3145     0097  3141               	addfsr 1,1
  3146     0098  3001               	movlw	1
  3147     0099  0081               	movwf	1
  3148     009A                     l2232:
  3149                           
  3150                           ;main.c: 153:                 digit->c = 1;
  3151     009A  082E               	movf	SetSegments@digit,w
  3152     009B  0086               	movwf	6
  3153     009C  0187               	clrf	7
  3154     009D  3142               	addfsr 1,2
  3155     009E  3001               	movlw	1
  3156     009F  0081               	movwf	1
  3157                           
  3158                           ;main.c: 154:                 digit->d = 0;
  3159     00A0  082E               	movf	SetSegments@digit,w
  3160     00A1  0086               	movwf	6
  3161     00A2  0187               	clrf	7
  3162     00A3  3143               	addfsr 1,3
  3163     00A4  0181               	clrf	1
  3164                           
  3165                           ;main.c: 155:                 digit->e = 0;
  3166     00A5  082E               	movf	SetSegments@digit,w
  3167     00A6  0086               	movwf	6
  3168     00A7  0187               	clrf	7
  3169     00A8  3144               	addfsr 1,4
  3170     00A9  0181               	clrf	1
  3171                           
  3172                           ;main.c: 156:                 digit->f = 0;
  3173     00AA  082E               	movf	SetSegments@digit,w
  3174     00AB  0086               	movwf	6
  3175     00AC  0187               	clrf	7
  3176     00AD  3145               	addfsr 1,5
  3177     00AE  0181               	clrf	1
  3178                           
  3179                           ;main.c: 157:                 digit->g = 0;
  3180     00AF  082E               	movf	SetSegments@digit,w
  3181     00B0  0086               	movwf	6
  3182     00B1  0187               	clrf	7
  3183     00B2  3146               	addfsr 1,6
  3184     00B3  0181               	clrf	1
  3185                           
  3186                           ;main.c: 158:                 break;
  3187     00B4  2A23               	goto	l267
  3188     00B5                     l2234:
  3189                           
  3190                           ;main.c: 161:                 digit->a = 1;
  3191     00B5  082E               	movf	SetSegments@digit,w
  3192     00B6  0086               	movwf	6
  3193     00B7  082F               	movf	SetSegments@digit+1,w
  3194     00B8  0087               	movwf	7
  3195     00B9  3001               	movlw	1
  3196     00BA  0081               	movwf	1
  3197                           
  3198                           ;main.c: 162:                 digit->b = 1;
  3199     00BB  082E               	movf	SetSegments@digit,w
  3200     00BC  0086               	movwf	6
  3201     00BD  0187               	clrf	7
  3202     00BE  3141               	addfsr 1,1
  3203     00BF  3001               	movlw	1
  3204     00C0  0081               	movwf	1
  3205     00C1                     l2236:
  3206                           
  3207                           ;main.c: 163:                 digit->c = 0;
  3208     00C1  082E               	movf	SetSegments@digit,w
  3209     00C2  0086               	movwf	6
  3210     00C3  0187               	clrf	7
  3211     00C4  3142               	addfsr 1,2
  3212     00C5  0181               	clrf	1
  3213     00C6                     l2238:
  3214                           
  3215                           ;main.c: 164:                 digit->d = 1;
  3216     00C6  082E               	movf	SetSegments@digit,w
  3217     00C7  0086               	movwf	6
  3218     00C8  0187               	clrf	7
  3219     00C9  3143               	addfsr 1,3
  3220     00CA  3001               	movlw	1
  3221     00CB  0081               	movwf	1
  3222     00CC                     l2240:
  3223                           
  3224                           ;main.c: 165:                 digit->e = 1;
  3225     00CC  082E               	movf	SetSegments@digit,w
  3226     00CD  0086               	movwf	6
  3227     00CE  0187               	clrf	7
  3228     00CF  3144               	addfsr 1,4
  3229     00D0  3001               	movlw	1
  3230     00D1  0081               	movwf	1
  3231     00D2                     l2242:
  3232                           
  3233                           ;main.c: 166:                 digit->f = 0;
  3234     00D2  082E               	movf	SetSegments@digit,w
  3235     00D3  0086               	movwf	6
  3236     00D4  0187               	clrf	7
  3237     00D5  3145               	addfsr 1,5
  3238     00D6  0181               	clrf	1
  3239                           
  3240                           ;main.c: 167:                 digit->g = 1;
  3241     00D7  082E               	movf	SetSegments@digit,w
  3242     00D8  0086               	movwf	6
  3243     00D9  0187               	clrf	7
  3244     00DA  3146               	addfsr 1,6
  3245     00DB  3001               	movlw	1
  3246     00DC  0081               	movwf	1
  3247                           
  3248                           ;main.c: 168:                 break;
  3249     00DD  2A23               	goto	l267
  3250     00DE                     l2244:
  3251                           
  3252                           ;main.c: 171:                 digit->a = 1;
  3253     00DE  082E               	movf	SetSegments@digit,w
  3254     00DF  0086               	movwf	6
  3255     00E0  082F               	movf	SetSegments@digit+1,w
  3256     00E1  0087               	movwf	7
  3257     00E2  3001               	movlw	1
  3258     00E3  0081               	movwf	1
  3259                           
  3260                           ;main.c: 172:                 digit->b = 1;
  3261     00E4  082E               	movf	SetSegments@digit,w
  3262     00E5  0086               	movwf	6
  3263     00E6  0187               	clrf	7
  3264     00E7  3141               	addfsr 1,1
  3265     00E8  3001               	movlw	1
  3266     00E9  0081               	movwf	1
  3267                           
  3268                           ;main.c: 173:                 digit->c = 1;
  3269     00EA  082E               	movf	SetSegments@digit,w
  3270     00EB  0086               	movwf	6
  3271     00EC  0187               	clrf	7
  3272     00ED  3142               	addfsr 1,2
  3273     00EE  3001               	movlw	1
  3274     00EF  0081               	movwf	1
  3275                           
  3276                           ;main.c: 174:                 digit->d = 1;
  3277     00F0  082E               	movf	SetSegments@digit,w
  3278     00F1  0086               	movwf	6
  3279     00F2  0187               	clrf	7
  3280     00F3  3143               	addfsr 1,3
  3281     00F4  3001               	movlw	1
  3282     00F5  0081               	movwf	1
  3283     00F6                     l2246:
  3284                           
  3285                           ;main.c: 175:                 digit->e = 0;
  3286     00F6  082E               	movf	SetSegments@digit,w
  3287     00F7  0086               	movwf	6
  3288     00F8  0187               	clrf	7
  3289     00F9  3144               	addfsr 1,4
  3290     00FA  0181               	clrf	1
  3291     00FB                     l2248:
  3292                           
  3293                           ;main.c: 176:                 digit->f = 0;
  3294     00FB  082E               	movf	SetSegments@digit,w
  3295     00FC  0086               	movwf	6
  3296     00FD  0187               	clrf	7
  3297     00FE  3145               	addfsr 1,5
  3298     00FF  0181               	clrf	1
  3299                           
  3300                           ;main.c: 177:                 digit->g = 1;
  3301     0100  082E               	movf	SetSegments@digit,w
  3302     0101  0086               	movwf	6
  3303     0102  0187               	clrf	7
  3304     0103  3146               	addfsr 1,6
  3305     0104  3001               	movlw	1
  3306     0105  0081               	movwf	1
  3307                           
  3308                           ;main.c: 178:                 break;
  3309     0106  2A23               	goto	l267
  3310     0107                     l2250:
  3311                           
  3312                           ;main.c: 181:                 digit->a = 0;
  3313     0107  082E               	movf	SetSegments@digit,w
  3314     0108  0086               	movwf	6
  3315     0109  082F               	movf	SetSegments@digit+1,w
  3316     010A  0087               	movwf	7
  3317     010B  0181               	clrf	1
  3318     010C                     l2252:
  3319                           
  3320                           ;main.c: 182:                 digit->b = 1;
  3321     010C  082E               	movf	SetSegments@digit,w
  3322     010D  0086               	movwf	6
  3323     010E  0187               	clrf	7
  3324     010F  3141               	addfsr 1,1
  3325     0110  3001               	movlw	1
  3326     0111  0081               	movwf	1
  3327     0112                     l2254:
  3328                           
  3329                           ;main.c: 183:                 digit->c = 1;
  3330     0112  082E               	movf	SetSegments@digit,w
  3331     0113  0086               	movwf	6
  3332     0114  0187               	clrf	7
  3333     0115  3142               	addfsr 1,2
  3334     0116  3001               	movlw	1
  3335     0117  0081               	movwf	1
  3336                           
  3337                           ;main.c: 184:                 digit->d = 0;
  3338     0118  082E               	movf	SetSegments@digit,w
  3339     0119  0086               	movwf	6
  3340     011A  0187               	clrf	7
  3341     011B  3143               	addfsr 1,3
  3342     011C  0181               	clrf	1
  3343                           
  3344                           ;main.c: 185:                 digit->e = 0;
  3345     011D  082E               	movf	SetSegments@digit,w
  3346     011E  0086               	movwf	6
  3347     011F  0187               	clrf	7
  3348     0120  3144               	addfsr 1,4
  3349     0121  0181               	clrf	1
  3350     0122                     l2256:
  3351                           
  3352                           ;main.c: 186:                 digit->f = 1;
  3353     0122  082E               	movf	SetSegments@digit,w
  3354     0123  0086               	movwf	6
  3355     0124  0187               	clrf	7
  3356     0125  3145               	addfsr 1,5
  3357     0126  3001               	movlw	1
  3358     0127  0081               	movwf	1
  3359     0128                     l2258:
  3360                           
  3361                           ;main.c: 187:                 digit->g = 1;
  3362     0128  082E               	movf	SetSegments@digit,w
  3363     0129  0086               	movwf	6
  3364     012A  0187               	clrf	7
  3365     012B  3146               	addfsr 1,6
  3366     012C  3001               	movlw	1
  3367     012D  0081               	movwf	1
  3368                           
  3369                           ;main.c: 188:                 break;
  3370     012E  2A23               	goto	l267
  3371     012F                     l2260:
  3372                           
  3373                           ;main.c: 191:                 digit->a = 1;
  3374     012F  082E               	movf	SetSegments@digit,w
  3375     0130  0086               	movwf	6
  3376     0131  082F               	movf	SetSegments@digit+1,w
  3377     0132  0087               	movwf	7
  3378     0133  3001               	movlw	1
  3379     0134  0081               	movwf	1
  3380     0135                     l2262:
  3381                           
  3382                           ;main.c: 192:                 digit->b = 0;
  3383     0135  082E               	movf	SetSegments@digit,w
  3384     0136  0086               	movwf	6
  3385     0137  0187               	clrf	7
  3386     0138  3141               	addfsr 1,1
  3387     0139  0181               	clrf	1
  3388     013A                     l2264:
  3389                           
  3390                           ;main.c: 193:                 digit->c = 1;
  3391     013A  082E               	movf	SetSegments@digit,w
  3392     013B  0086               	movwf	6
  3393     013C  0187               	clrf	7
  3394     013D  3142               	addfsr 1,2
  3395     013E  3001               	movlw	1
  3396     013F  0081               	movwf	1
  3397     0140                     l2266:
  3398                           
  3399                           ;main.c: 194:                 digit->d = 1;
  3400     0140  082E               	movf	SetSegments@digit,w
  3401     0141  0086               	movwf	6
  3402     0142  0187               	clrf	7
  3403     0143  3143               	addfsr 1,3
  3404     0144  3001               	movlw	1
  3405     0145  0081               	movwf	1
  3406     0146                     l2268:
  3407                           
  3408                           ;main.c: 195:                 digit->e = 0;
  3409     0146  082E               	movf	SetSegments@digit,w
  3410     0147  0086               	movwf	6
  3411     0148  0187               	clrf	7
  3412     0149  3144               	addfsr 1,4
  3413     014A  0181               	clrf	1
  3414                           
  3415                           ;main.c: 196:                 digit->f = 1;
  3416     014B  082E               	movf	SetSegments@digit,w
  3417     014C  0086               	movwf	6
  3418     014D  0187               	clrf	7
  3419     014E  3145               	addfsr 1,5
  3420     014F  3001               	movlw	1
  3421     0150  0081               	movwf	1
  3422                           
  3423                           ;main.c: 197:                 digit->g = 1;
  3424     0151  082E               	movf	SetSegments@digit,w
  3425     0152  0086               	movwf	6
  3426     0153  0187               	clrf	7
  3427     0154  3146               	addfsr 1,6
  3428     0155  3001               	movlw	1
  3429     0156  0081               	movwf	1
  3430                           
  3431                           ;main.c: 198:                 break;
  3432     0157  2A23               	goto	l267
  3433     0158                     l2270:
  3434                           
  3435                           ;main.c: 201:                 digit->a = 1;
  3436     0158  082E               	movf	SetSegments@digit,w
  3437     0159  0086               	movwf	6
  3438     015A  082F               	movf	SetSegments@digit+1,w
  3439     015B  0087               	movwf	7
  3440     015C  3001               	movlw	1
  3441     015D  0081               	movwf	1
  3442     015E                     l2272:
  3443                           
  3444                           ;main.c: 202:                 digit->b = 0;
  3445     015E  082E               	movf	SetSegments@digit,w
  3446     015F  0086               	movwf	6
  3447     0160  0187               	clrf	7
  3448     0161  3141               	addfsr 1,1
  3449     0162  0181               	clrf	1
  3450     0163                     l2274:
  3451                           
  3452                           ;main.c: 203:                 digit->c = 1;
  3453     0163  082E               	movf	SetSegments@digit,w
  3454     0164  0086               	movwf	6
  3455     0165  0187               	clrf	7
  3456     0166  3142               	addfsr 1,2
  3457     0167  3001               	movlw	1
  3458     0168  0081               	movwf	1
  3459     0169                     l2276:
  3460                           
  3461                           ;main.c: 204:                 digit->d = 1;
  3462     0169  082E               	movf	SetSegments@digit,w
  3463     016A  0086               	movwf	6
  3464     016B  0187               	clrf	7
  3465     016C  3143               	addfsr 1,3
  3466     016D  3001               	movlw	1
  3467     016E  0081               	movwf	1
  3468     016F                     l2278:
  3469                           
  3470                           ;main.c: 205:                 digit->e = 1;
  3471     016F  082E               	movf	SetSegments@digit,w
  3472     0170  0086               	movwf	6
  3473     0171  0187               	clrf	7
  3474     0172  3144               	addfsr 1,4
  3475     0173  3001               	movlw	1
  3476     0174  0081               	movwf	1
  3477     0175                     l2280:
  3478                           
  3479                           ;main.c: 206:                 digit->f = 1;
  3480     0175  082E               	movf	SetSegments@digit,w
  3481     0176  0086               	movwf	6
  3482     0177  0187               	clrf	7
  3483     0178  3145               	addfsr 1,5
  3484     0179  3001               	movlw	1
  3485     017A  0081               	movwf	1
  3486     017B                     l2282:
  3487                           
  3488                           ;main.c: 207:                 digit->g = 1;
  3489     017B  082E               	movf	SetSegments@digit,w
  3490     017C  0086               	movwf	6
  3491     017D  0187               	clrf	7
  3492     017E  3146               	addfsr 1,6
  3493     017F  3001               	movlw	1
  3494     0180  0081               	movwf	1
  3495                           
  3496                           ;main.c: 208:                 break;
  3497     0181  2A23               	goto	l267
  3498     0182                     l2284:
  3499                           
  3500                           ;main.c: 211:                 digit->a = 1;
  3501     0182  082E               	movf	SetSegments@digit,w
  3502     0183  0086               	movwf	6
  3503     0184  082F               	movf	SetSegments@digit+1,w
  3504     0185  0087               	movwf	7
  3505     0186  3001               	movlw	1
  3506     0187  0081               	movwf	1
  3507                           
  3508                           ;main.c: 212:                 digit->b = 1;
  3509     0188  082E               	movf	SetSegments@digit,w
  3510     0189  0086               	movwf	6
  3511     018A  0187               	clrf	7
  3512     018B  3141               	addfsr 1,1
  3513     018C  3001               	movlw	1
  3514     018D  0081               	movwf	1
  3515                           
  3516                           ;main.c: 213:                 digit->c = 1;
  3517     018E  082E               	movf	SetSegments@digit,w
  3518     018F  0086               	movwf	6
  3519     0190  0187               	clrf	7
  3520     0191  3142               	addfsr 1,2
  3521     0192  3001               	movlw	1
  3522     0193  0081               	movwf	1
  3523     0194                     l2286:
  3524                           
  3525                           ;main.c: 214:                 digit->d = 0;
  3526     0194  082E               	movf	SetSegments@digit,w
  3527     0195  0086               	movwf	6
  3528     0196  0187               	clrf	7
  3529     0197  3143               	addfsr 1,3
  3530     0198  0181               	clrf	1
  3531     0199                     l2288:
  3532                           
  3533                           ;main.c: 215:                 digit->e = 0;
  3534     0199  082E               	movf	SetSegments@digit,w
  3535     019A  0086               	movwf	6
  3536     019B  0187               	clrf	7
  3537     019C  3144               	addfsr 1,4
  3538     019D  0181               	clrf	1
  3539     019E                     l2290:
  3540                           
  3541                           ;main.c: 216:                 digit->f = 0;
  3542     019E  082E               	movf	SetSegments@digit,w
  3543     019F  0086               	movwf	6
  3544     01A0  0187               	clrf	7
  3545     01A1  3145               	addfsr 1,5
  3546     01A2  0181               	clrf	1
  3547     01A3                     l2292:
  3548                           
  3549                           ;main.c: 217:                 digit->g = 0;
  3550     01A3  082E               	movf	SetSegments@digit,w
  3551     01A4  0086               	movwf	6
  3552     01A5  0187               	clrf	7
  3553     01A6  3146               	addfsr 1,6
  3554     01A7  0181               	clrf	1
  3555                           
  3556                           ;main.c: 218:                 break;
  3557     01A8  2A23               	goto	l267
  3558     01A9                     l2294:
  3559                           
  3560                           ;main.c: 221:                 digit->a = 1;
  3561     01A9  082E               	movf	SetSegments@digit,w
  3562     01AA  0086               	movwf	6
  3563     01AB  082F               	movf	SetSegments@digit+1,w
  3564     01AC  0087               	movwf	7
  3565     01AD  3001               	movlw	1
  3566     01AE  0081               	movwf	1
  3567                           
  3568                           ;main.c: 222:                 digit->b = 1;
  3569     01AF  082E               	movf	SetSegments@digit,w
  3570     01B0  0086               	movwf	6
  3571     01B1  0187               	clrf	7
  3572     01B2  3141               	addfsr 1,1
  3573     01B3  3001               	movlw	1
  3574     01B4  0081               	movwf	1
  3575                           
  3576                           ;main.c: 223:                 digit->c = 1;
  3577     01B5  082E               	movf	SetSegments@digit,w
  3578     01B6  0086               	movwf	6
  3579     01B7  0187               	clrf	7
  3580     01B8  3142               	addfsr 1,2
  3581     01B9  3001               	movlw	1
  3582     01BA  0081               	movwf	1
  3583                           
  3584                           ;main.c: 224:                 digit->d = 1;
  3585     01BB  082E               	movf	SetSegments@digit,w
  3586     01BC  0086               	movwf	6
  3587     01BD  0187               	clrf	7
  3588     01BE  3143               	addfsr 1,3
  3589     01BF  3001               	movlw	1
  3590     01C0  0081               	movwf	1
  3591                           
  3592                           ;main.c: 225:                 digit->e = 1;
  3593     01C1  082E               	movf	SetSegments@digit,w
  3594     01C2  0086               	movwf	6
  3595     01C3  0187               	clrf	7
  3596     01C4  3144               	addfsr 1,4
  3597     01C5  3001               	movlw	1
  3598     01C6  0081               	movwf	1
  3599                           
  3600                           ;main.c: 226:                 digit->f = 1;
  3601     01C7  082E               	movf	SetSegments@digit,w
  3602     01C8  0086               	movwf	6
  3603     01C9  0187               	clrf	7
  3604     01CA  3145               	addfsr 1,5
  3605     01CB  3001               	movlw	1
  3606     01CC  0081               	movwf	1
  3607                           
  3608                           ;main.c: 227:                 digit->g = 1;
  3609     01CD  082E               	movf	SetSegments@digit,w
  3610     01CE  0086               	movwf	6
  3611     01CF  0187               	clrf	7
  3612     01D0  3146               	addfsr 1,6
  3613     01D1  3001               	movlw	1
  3614     01D2  0081               	movwf	1
  3615                           
  3616                           ;main.c: 228:                 break;
  3617     01D3  2A23               	goto	l267
  3618     01D4                     l2296:
  3619                           
  3620                           ;main.c: 231:                 digit->a = 1;
  3621     01D4  082E               	movf	SetSegments@digit,w
  3622     01D5  0086               	movwf	6
  3623     01D6  082F               	movf	SetSegments@digit+1,w
  3624     01D7  0087               	movwf	7
  3625     01D8  3001               	movlw	1
  3626     01D9  0081               	movwf	1
  3627                           
  3628                           ;main.c: 232:                 digit->b = 1;
  3629     01DA  082E               	movf	SetSegments@digit,w
  3630     01DB  0086               	movwf	6
  3631     01DC  0187               	clrf	7
  3632     01DD  3141               	addfsr 1,1
  3633     01DE  3001               	movlw	1
  3634     01DF  0081               	movwf	1
  3635                           
  3636                           ;main.c: 233:                 digit->c = 1;
  3637     01E0  082E               	movf	SetSegments@digit,w
  3638     01E1  0086               	movwf	6
  3639     01E2  0187               	clrf	7
  3640     01E3  3142               	addfsr 1,2
  3641     01E4  3001               	movlw	1
  3642     01E5  0081               	movwf	1
  3643                           
  3644                           ;main.c: 234:                 digit->d = 1;
  3645     01E6  082E               	movf	SetSegments@digit,w
  3646     01E7  0086               	movwf	6
  3647     01E8  0187               	clrf	7
  3648     01E9  3143               	addfsr 1,3
  3649     01EA  3001               	movlw	1
  3650     01EB  0081               	movwf	1
  3651     01EC                     l2298:
  3652                           
  3653                           ;main.c: 235:                 digit->e = 0;
  3654     01EC  082E               	movf	SetSegments@digit,w
  3655     01ED  0086               	movwf	6
  3656     01EE  0187               	clrf	7
  3657     01EF  3144               	addfsr 1,4
  3658     01F0  0181               	clrf	1
  3659     01F1                     l2300:
  3660                           
  3661                           ;main.c: 236:                 digit->f = 1;
  3662     01F1  082E               	movf	SetSegments@digit,w
  3663     01F2  0086               	movwf	6
  3664     01F3  0187               	clrf	7
  3665     01F4  3145               	addfsr 1,5
  3666     01F5  3001               	movlw	1
  3667     01F6  0081               	movwf	1
  3668     01F7                     l2302:
  3669                           
  3670                           ;main.c: 237:                 digit->g = 1;
  3671     01F7  082E               	movf	SetSegments@digit,w
  3672     01F8  0086               	movwf	6
  3673     01F9  0187               	clrf	7
  3674     01FA  3146               	addfsr 1,6
  3675     01FB  3001               	movlw	1
  3676     01FC  0081               	movwf	1
  3677                           
  3678                           ;main.c: 238:                 break;
  3679     01FD  2A23               	goto	l267
  3680     01FE                     l2306:
  3681                           
  3682                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  3683                           ; Switch size 1, requested type "simple"
  3684                           ; Number of cases is 1, Range of values is 0 to 0
  3685                           ; switch strategies available:
  3686                           ; Name         Instructions Cycles
  3687                           ; simple_byte            4     3 (average)
  3688                           ; direct_byte            8     6 (fixed)
  3689                           ; jumptable            260     6 (fixed)
  3690                           ;	Chosen strategy is simple_byte
  3691     01FE  0831               	movf	SetSegments@a+1,w
  3692     01FF  3A00               	xorlw	0	; case 0
  3693     0200  1903               	skipnz
  3694     0201  2A03               	goto	l2498
  3695     0202  2A23               	goto	l267
  3696     0203                     l2498:
  3697                           
  3698                           ; Switch size 1, requested type "simple"
  3699                           ; Number of cases is 10, Range of values is 0 to 9
  3700                           ; switch strategies available:
  3701                           ; Name         Instructions Cycles
  3702                           ; direct_byte           26     6 (fixed)
  3703                           ; simple_byte           31    16 (average)
  3704                           ; jumptable            260     6 (fixed)
  3705                           ;	Chosen strategy is simple_byte
  3706     0203  0830               	movf	SetSegments@a,w
  3707     0204  3A00               	xorlw	0	; case 0
  3708     0205  1903               	skipnz
  3709     0206  2865               	goto	l2224
  3710     0207  3A01               	xorlw	1	; case 1
  3711     0208  1903               	skipnz
  3712     0209  288F               	goto	l2228
  3713     020A  3A03               	xorlw	3	; case 2
  3714     020B  1903               	skipnz
  3715     020C  28B5               	goto	l2234
  3716     020D  3A01               	xorlw	1	; case 3
  3717     020E  1903               	skipnz
  3718     020F  28DE               	goto	l2244
  3719     0210  3A07               	xorlw	7	; case 4
  3720     0211  1903               	skipnz
  3721     0212  2907               	goto	l2250
  3722     0213  3A01               	xorlw	1	; case 5
  3723     0214  1903               	skipnz
  3724     0215  292F               	goto	l2260
  3725     0216  3A03               	xorlw	3	; case 6
  3726     0217  1903               	skipnz
  3727     0218  2958               	goto	l2270
  3728     0219  3A01               	xorlw	1	; case 7
  3729     021A  1903               	skipnz
  3730     021B  2982               	goto	l2284
  3731     021C  3A0F               	xorlw	15	; case 8
  3732     021D  1903               	skipnz
  3733     021E  29A9               	goto	l2294
  3734     021F  3A01               	xorlw	1	; case 9
  3735     0220  1903               	skipnz
  3736     0221  29D4               	goto	l2296
  3737     0222  2A23               	goto	l267
  3738     0223                     l267:
  3739     0223  0008               	return
  3740     0224                     __end_of_SetSegments:
  3741                           
  3742                           	psect	intentry
  3743     0004                     __pintentry:	
  3744 ;; *************** function _INTERRUPT_InterruptManager *****************
  3745 ;; Defined at:
  3746 ;;		line 59 in file "mcc_generated_files/system/src/interrupt.c"
  3747 ;; Parameters:    Size  Location     Type
  3748 ;;		None
  3749 ;; Auto vars:     Size  Location     Type
  3750 ;;		None
  3751 ;; Return value:  Size  Location     Type
  3752 ;;                  1    wreg      void 
  3753 ;; Registers used:
  3754 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  3755 ;; Tracked objects:
  3756 ;;		On entry : 0/0
  3757 ;;		On exit  : 0/0
  3758 ;;		Unchanged: 0/0
  3759 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  3760 ;;      Params:         0       0       0       0       0       0       0       0
  3761 ;;      Locals:         0       0       0       0       0       0       0       0
  3762 ;;      Temps:          0       0       0       0       0       0       0       0
  3763 ;;      Totals:         0       0       0       0       0       0       0       0
  3764 ;;Total ram usage:        0 bytes
  3765 ;; Hardware stack levels used: 1
  3766 ;; Hardware stack levels required when called: 5
  3767 ;; This function calls:
  3768 ;;		_PIN_MANAGER_IOC
  3769 ;;		_TMR1_OverflowISR
  3770 ;; This function is called by:
  3771 ;;		Interrupt level 1
  3772 ;; This function uses a non-reentrant model
  3773 ;;
  3774                           
  3775     0004                     _INTERRUPT_InterruptManager:
  3776                           
  3777                           ;incstack = 0
  3778     0004  147E               	bsf	int$flags,0	;set compiler interrupt flag (level 1)
  3779                           
  3780                           ; Regs used in _INTERRUPT_InterruptManager: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  3781     0005  3180               	pagesel	$
  3782     0006  3000               	movlw	low ___int_sp
  3783     0007  0086               	movwf	6
  3784     0008  3000               	movlw	high ___int_sp
  3785     0009  0087               	movwf	7
  3786     000A                     i1l2416:
  3787                           
  3788                           ;mcc_generated_files/system/src/interrupt.c: 62:     if(INTCONbits.IOCIE == 1 && INTCONb
      +                          its.IOCIF == 1)
  3789     000A  1D8B               	btfss	11,3	;volatile
  3790     000B  280D               	goto	u176_21
  3791     000C  280E               	goto	u176_20
  3792     000D                     u176_21:
  3793     000D  2816               	goto	i1l111
  3794     000E                     u176_20:
  3795     000E                     i1l2418:
  3796     000E  1C0B               	btfss	11,0	;volatile
  3797     000F  2811               	goto	u177_21
  3798     0010  2812               	goto	u177_20
  3799     0011                     u177_21:
  3800     0011  2816               	goto	i1l111
  3801     0012                     u177_20:
  3802     0012                     i1l2420:
  3803                           
  3804                           ;mcc_generated_files/system/src/interrupt.c: 63:     {;mcc_generated_files/system/src/in
      +                          terrupt.c: 64:         PIN_MANAGER_IOC();
  3805     0012  318F  277A  3180   	fcall	_PIN_MANAGER_IOC
  3806                           
  3807                           ;mcc_generated_files/system/src/interrupt.c: 65:     }
  3808     0015  2827               	goto	i1l117
  3809     0016                     i1l111:	
  3810                           ;mcc_generated_files/system/src/interrupt.c: 66:     else if(INTCONbits.PEIE == 1)
  3811                           
  3812     0016  1F0B               	btfss	11,6	;volatile
  3813     0017  2819               	goto	u178_21
  3814     0018  281A               	goto	u178_20
  3815     0019                     u178_21:
  3816     0019  2827               	goto	i1l117
  3817     001A                     u178_20:
  3818     001A                     i1l2422:
  3819                           
  3820                           ;mcc_generated_files/system/src/interrupt.c: 67:     {;mcc_generated_files/system/src/in
      +                          terrupt.c: 68:         if(PIE1bits.TMR1IE == 1 && PIR1bits.TMR1IF == 1)
  3821     001A  0021               	movlb	1	; select bank1
  3822     001B  1C11               	btfss	17,0	;volatile
  3823     001C  281E               	goto	u179_21
  3824     001D  281F               	goto	u179_20
  3825     001E                     u179_21:
  3826     001E  2827               	goto	i1l117
  3827     001F                     u179_20:
  3828     001F                     i1l2424:
  3829     001F  0020               	movlb	0	; select bank0
  3830     0020  1C11               	btfss	17,0	;volatile
  3831     0021  2823               	goto	u180_21
  3832     0022  2824               	goto	u180_20
  3833     0023                     u180_21:
  3834     0023  2827               	goto	i1l117
  3835     0024                     u180_20:
  3836     0024                     i1l2426:
  3837                           
  3838                           ;mcc_generated_files/system/src/interrupt.c: 69:         {;mcc_generated_files/system/sr
      +                          c/interrupt.c: 70:             TMR1_OverflowISR();
  3839     0024  318F  27AF  3180   	fcall	_TMR1_OverflowISR
  3840     0027                     i1l117:	
  3841                           ;mcc_generated_files/system/src/interrupt.c: 71:         }
  3842                           
  3843     0027  107E               	bcf	int$flags,0	;clear compiler interrupt flag (level 1)
  3844     0028  0009               	retfie
  3845     0029                     __end_of_INTERRUPT_InterruptManager:
  3846                           
  3847                           	psect	text14
  3848     0FAF                     __ptext14:	
  3849 ;; *************** function _TMR1_OverflowISR *****************
  3850 ;; Defined at:
  3851 ;;		line 150 in file "mcc_generated_files/timer/src/tmr1.c"
  3852 ;; Parameters:    Size  Location     Type
  3853 ;;		None
  3854 ;; Auto vars:     Size  Location     Type
  3855 ;;		None
  3856 ;; Return value:  Size  Location     Type
  3857 ;;                  1    wreg      void 
  3858 ;; Registers used:
  3859 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  3860 ;; Tracked objects:
  3861 ;;		On entry : 0/0
  3862 ;;		On exit  : 0/0
  3863 ;;		Unchanged: 0/0
  3864 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  3865 ;;      Params:         0       0       0       0       0       0       0       0
  3866 ;;      Locals:         0       0       0       0       0       0       0       0
  3867 ;;      Temps:          0       0       0       0       0       0       0       0
  3868 ;;      Totals:         0       0       0       0       0       0       0       0
  3869 ;;Total ram usage:        0 bytes
  3870 ;; Hardware stack levels used: 1
  3871 ;; Hardware stack levels required when called: 2
  3872 ;; This function calls:
  3873 ;;		NULL
  3874 ;;		_TMR1_DefaultOverflowCallback
  3875 ;;		_TMR1_Write
  3876 ;;		_Tmr1CallBack
  3877 ;; This function is called by:
  3878 ;;		_INTERRUPT_InterruptManager
  3879 ;; This function uses a non-reentrant model
  3880 ;;
  3881                           
  3882     0FAF                     _TMR1_OverflowISR:	
  3883                           ;psect for function _TMR1_OverflowISR
  3884                           
  3885     0FAF                     i1l2398:	
  3886                           ;incstack = 0
  3887                           ; Regs used in _TMR1_OverflowISR: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  3888                           
  3889                           
  3890                           ;mcc_generated_files/timer/src/tmr1.c: 154:     PIR1bits.TMR1IF = 0;
  3891     0FAF  0020               	movlb	0	; select bank0
  3892     0FB0  1011               	bcf	17,0	;volatile
  3893     0FB1                     i1l2400:
  3894                           
  3895                           ;mcc_generated_files/timer/src/tmr1.c: 155:     TMR1_Write(timer1ReloadVal);
  3896     0FB1  0843               	movf	_timer1ReloadVal+1,w	;volatile
  3897     0FB2  00F1               	movwf	TMR1_Write@timerVal+1
  3898     0FB3  0842               	movf	_timer1ReloadVal,w	;volatile
  3899     0FB4  00F0               	movwf	TMR1_Write@timerVal
  3900     0FB5  318F  279E  318F   	fcall	_TMR1_Write
  3901     0FB8                     i1l2402:
  3902                           
  3903                           ;mcc_generated_files/timer/src/tmr1.c: 157:     if(TMR1_OverflowCallback)
  3904     0FB8  0020               	movlb	0	; select bank0
  3905     0FB9  085B               	movf	_TMR1_OverflowCallback,w
  3906     0FBA  045C               	iorwf	_TMR1_OverflowCallback+1,w
  3907     0FBB  1903               	btfsc	3,2
  3908     0FBC  2FBE               	goto	u171_21
  3909     0FBD  2FBF               	goto	u171_20
  3910     0FBE                     u171_21:
  3911     0FBE  2FC4               	goto	i1l199
  3912     0FBF                     u171_20:
  3913     0FBF                     i1l2404:
  3914                           
  3915                           ;mcc_generated_files/timer/src/tmr1.c: 158:     {;mcc_generated_files/timer/src/tmr1.c: 
      +                          159:         TMR1_OverflowCallback();
  3916     0FBF  085C               	movf	_TMR1_OverflowCallback+1,w
  3917     0FC0  008A               	movwf	10
  3918     0FC1  085B               	movf	_TMR1_OverflowCallback,w
  3919     0FC2  000A               	callw
  3920     0FC3  318F               	pagesel	$
  3921     0FC4                     i1l199:
  3922     0FC4  0008               	return
  3923     0FC5                     __end_of_TMR1_OverflowISR:
  3924                           
  3925                           	psect	text15
  3926     0002                     __ptext15:	
  3927 ;; *************** function _TMR1_DefaultOverflowCallback *****************
  3928 ;; Defined at:
  3929 ;;		line 168 in file "mcc_generated_files/timer/src/tmr1.c"
  3930 ;; Parameters:    Size  Location     Type
  3931 ;;		None
  3932 ;; Auto vars:     Size  Location     Type
  3933 ;;		None
  3934 ;; Return value:  Size  Location     Type
  3935 ;;                  1    wreg      void 
  3936 ;; Registers used:
  3937 ;;		None
  3938 ;; Tracked objects:
  3939 ;;		On entry : 0/0
  3940 ;;		On exit  : 0/0
  3941 ;;		Unchanged: 0/0
  3942 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  3943 ;;      Params:         0       0       0       0       0       0       0       0
  3944 ;;      Locals:         0       0       0       0       0       0       0       0
  3945 ;;      Temps:          0       0       0       0       0       0       0       0
  3946 ;;      Totals:         0       0       0       0       0       0       0       0
  3947 ;;Total ram usage:        0 bytes
  3948 ;; Hardware stack levels used: 1
  3949 ;; This function calls:
  3950 ;;		Nothing
  3951 ;; This function is called by:
  3952 ;;		_TMR1_Initialize
  3953 ;;		_TMR1_OverflowISR
  3954 ;; This function uses a non-reentrant model
  3955 ;;
  3956                           
  3957     0002                     _TMR1_DefaultOverflowCallback:	
  3958                           ;psect for function _TMR1_DefaultOverflowCallback
  3959                           
  3960     0002                     i1l205:	
  3961                           ;incstack = 0
  3962                           ; Regs used in _TMR1_DefaultOverflowCallback: []
  3963                           
  3964     0002  0008               	return
  3965     0003                     __end_of_TMR1_DefaultOverflowCallback:
  3966                           
  3967                           	psect	text16
  3968     040C                     __ptext16:	
  3969 ;; *************** function _Tmr1CallBack *****************
  3970 ;; Defined at:
  3971 ;;		line 93 in file "main.c"
  3972 ;; Parameters:    Size  Location     Type
  3973 ;;		None
  3974 ;; Auto vars:     Size  Location     Type
  3975 ;;		None
  3976 ;; Return value:  Size  Location     Type
  3977 ;;                  1    wreg      void 
  3978 ;; Registers used:
  3979 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  3980 ;; Tracked objects:
  3981 ;;		On entry : 0/0
  3982 ;;		On exit  : 0/0
  3983 ;;		Unchanged: 0/0
  3984 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  3985 ;;      Params:         0       0       0       0       0       0       0       0
  3986 ;;      Locals:         0       1       0       0       0       0       0       0
  3987 ;;      Temps:          0       2       0       0       0       0       0       0
  3988 ;;      Totals:         0       3       0       0       0       0       0       0
  3989 ;;Total ram usage:        3 bytes
  3990 ;; Hardware stack levels used: 1
  3991 ;; Hardware stack levels required when called: 1
  3992 ;; This function calls:
  3993 ;;		i1_Display
  3994 ;; This function is called by:
  3995 ;;		_main
  3996 ;;		_TMR1_OverflowISR
  3997 ;; This function uses a non-reentrant model
  3998 ;;
  3999                           
  4000     040C                     _Tmr1CallBack:	
  4001                           ;psect for function _Tmr1CallBack
  4002                           
  4003     040C                     i1l2198:	
  4004                           ;incstack = 0
  4005                           ; Regs used in _Tmr1CallBack: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  4006                           
  4007                           
  4008                           ;main.c: 94:     toggle = 1 - toggle;
  4009     040C  0020               	movlb	0	; select bank0
  4010     040D  0845               	movf	_toggle,w
  4011     040E  3C01               	sublw	1
  4012     040F  00C5               	movwf	_toggle
  4013     0410                     i1l2200:
  4014                           
  4015                           ;main.c: 96:     PORTAbits.RA5 = toggle;
  4016     0410  0C45               	rrf	_toggle,w
  4017     0411  1C03               	skipc
  4018     0412  128C               	bcf	12,5	;volatile
  4019     0413  1803               	skipnc
  4020     0414  168C               	bsf	12,5	;volatile
  4021                           
  4022                           ;main.c: 98:     PORTAbits.RA4 = toggle ^ !hundred.a &
  4023     0415  01AD               	clrf	_Tmr1CallBack$1119
  4024     0416                     i1l2202:
  4025     0416  0846               	movf	_hundred,w
  4026     0417  1D03               	btfss	3,2
  4027     0418  2C1A               	goto	u144_21
  4028     0419  2C1B               	goto	u144_20
  4029     041A                     u144_21:
  4030     041A  2C31               	goto	i1l2214
  4031     041B                     u144_20:
  4032     041B                     i1l2204:
  4033     041B  0849               	movf	_hundred+3,w
  4034     041C  1D03               	btfss	3,2
  4035     041D  2C1F               	goto	u145_21
  4036     041E  2C20               	goto	u145_20
  4037     041F                     u145_21:
  4038     041F  2C31               	goto	i1l2214
  4039     0420                     u145_20:
  4040     0420                     i1l2206:
  4041     0420  084A               	movf	_hundred+4,w
  4042     0421  1D03               	btfss	3,2
  4043     0422  2C24               	goto	u146_21
  4044     0423  2C25               	goto	u146_20
  4045     0424                     u146_21:
  4046     0424  2C31               	goto	i1l2214
  4047     0425                     u146_20:
  4048     0425                     i1l2208:
  4049     0425  084B               	movf	_hundred+5,w
  4050     0426  1D03               	btfss	3,2
  4051     0427  2C29               	goto	u147_21
  4052     0428  2C2A               	goto	u147_20
  4053     0429                     u147_21:
  4054     0429  2C31               	goto	i1l2214
  4055     042A                     u147_20:
  4056     042A                     i1l2210:
  4057     042A  084C               	movf	_hundred+6,w
  4058     042B  1D03               	btfss	3,2
  4059     042C  2C2E               	goto	u148_21
  4060     042D  2C2F               	goto	u148_20
  4061     042E                     u148_21:
  4062     042E  2C31               	goto	i1l2214
  4063     042F                     u148_20:
  4064     042F                     i1l2212:
  4065     042F  3001               	movlw	1
  4066     0430  00AD               	movwf	_Tmr1CallBack$1119
  4067     0431                     i1l2214:
  4068     0431  0847               	movf	_hundred+1,w
  4069     0432  0548               	andwf	_hundred+2,w
  4070     0433  052D               	andwf	_Tmr1CallBack$1119,w
  4071     0434  0645               	xorwf	_toggle,w
  4072     0435  00AB               	movwf	??_Tmr1CallBack
  4073     0436  0EAB               	swapf	??_Tmr1CallBack,f
  4074     0437  080C               	movf	12,w	;volatile
  4075     0438  062B               	xorwf	??_Tmr1CallBack,w
  4076     0439  39EF               	andlw	-17
  4077     043A  062B               	xorwf	??_Tmr1CallBack,w
  4078     043B  008C               	movwf	12	;volatile
  4079                           
  4080                           ;main.c: 107:     PORTCbits.RC5 = toggle ^ ten.a;
  4081     043C  084D               	movf	_ten,w
  4082     043D  0645               	xorwf	_toggle,w
  4083     043E  00AB               	movwf	??_Tmr1CallBack
  4084     043F  0EAB               	swapf	??_Tmr1CallBack,f
  4085     0440  0DAB               	rlf	??_Tmr1CallBack,f
  4086     0441  080E               	movf	14,w	;volatile
  4087     0442  062B               	xorwf	??_Tmr1CallBack,w
  4088     0443  39DF               	andlw	-33
  4089     0444  062B               	xorwf	??_Tmr1CallBack,w
  4090     0445  008E               	movwf	14	;volatile
  4091                           
  4092                           ;main.c: 108:     PORTCbits.RC4 = toggle ^ ten.b;
  4093     0446  084E               	movf	_ten+1,w
  4094     0447  0645               	xorwf	_toggle,w
  4095     0448  00AB               	movwf	??_Tmr1CallBack
  4096     0449  0EAB               	swapf	??_Tmr1CallBack,f
  4097     044A  080E               	movf	14,w	;volatile
  4098     044B  062B               	xorwf	??_Tmr1CallBack,w
  4099     044C  39EF               	andlw	-17
  4100     044D  062B               	xorwf	??_Tmr1CallBack,w
  4101     044E  008E               	movwf	14	;volatile
  4102                           
  4103                           ;main.c: 109:     PORTCbits.RC3 = toggle ^ ten.c;
  4104     044F  084F               	movf	_ten+2,w
  4105     0450  0645               	xorwf	_toggle,w
  4106     0451  00AB               	movwf	??_Tmr1CallBack
  4107     0452  0DAB               	rlf	??_Tmr1CallBack,f
  4108     0453  0DAB               	rlf	??_Tmr1CallBack,f
  4109     0454  0DAB               	rlf	??_Tmr1CallBack,f
  4110     0455  080E               	movf	14,w	;volatile
  4111     0456  062B               	xorwf	??_Tmr1CallBack,w
  4112     0457  39F7               	andlw	-9
  4113     0458  062B               	xorwf	??_Tmr1CallBack,w
  4114     0459  008E               	movwf	14	;volatile
  4115                           
  4116                           ;main.c: 110:     PORTCbits.RC6 = toggle ^ ten.d;
  4117     045A  0850               	movf	_ten+3,w
  4118     045B  0645               	xorwf	_toggle,w
  4119     045C  00AB               	movwf	??_Tmr1CallBack
  4120     045D  0EAB               	swapf	??_Tmr1CallBack,f
  4121     045E  0DAB               	rlf	??_Tmr1CallBack,f
  4122     045F  0DAB               	rlf	??_Tmr1CallBack,f
  4123     0460  080E               	movf	14,w	;volatile
  4124     0461  062B               	xorwf	??_Tmr1CallBack,w
  4125     0462  39BF               	andlw	-65
  4126     0463  062B               	xorwf	??_Tmr1CallBack,w
  4127     0464  008E               	movwf	14	;volatile
  4128                           
  4129                           ;main.c: 111:     PORTCbits.RC7 = toggle ^ ten.e;
  4130     0465  0851               	movf	_ten+4,w
  4131     0466  0645               	xorwf	_toggle,w
  4132     0467  00AB               	movwf	??_Tmr1CallBack
  4133     0468  0CAB               	rrf	??_Tmr1CallBack,f
  4134     0469  0CAB               	rrf	??_Tmr1CallBack,f
  4135     046A  080E               	movf	14,w	;volatile
  4136     046B  062B               	xorwf	??_Tmr1CallBack,w
  4137     046C  397F               	andlw	-129
  4138     046D  062B               	xorwf	??_Tmr1CallBack,w
  4139     046E  008E               	movwf	14	;volatile
  4140                           
  4141                           ;main.c: 112:     PORTBbits.RB7 = toggle ^ ten.f;
  4142     046F  0852               	movf	_ten+5,w
  4143     0470  0645               	xorwf	_toggle,w
  4144     0471  00AB               	movwf	??_Tmr1CallBack
  4145     0472  0CAB               	rrf	??_Tmr1CallBack,f
  4146     0473  0CAB               	rrf	??_Tmr1CallBack,f
  4147     0474  080D               	movf	13,w	;volatile
  4148     0475  062B               	xorwf	??_Tmr1CallBack,w
  4149     0476  397F               	andlw	-129
  4150     0477  062B               	xorwf	??_Tmr1CallBack,w
  4151     0478  008D               	movwf	13	;volatile
  4152                           
  4153                           ;main.c: 113:     PORTBbits.RB6 = toggle ^ ten.g;
  4154     0479  0853               	movf	_ten+6,w
  4155     047A  0645               	xorwf	_toggle,w
  4156     047B  00AB               	movwf	??_Tmr1CallBack
  4157     047C  0EAB               	swapf	??_Tmr1CallBack,f
  4158     047D  0DAB               	rlf	??_Tmr1CallBack,f
  4159     047E  0DAB               	rlf	??_Tmr1CallBack,f
  4160     047F  080D               	movf	13,w	;volatile
  4161     0480  062B               	xorwf	??_Tmr1CallBack,w
  4162     0481  39BF               	andlw	-65
  4163     0482  062B               	xorwf	??_Tmr1CallBack,w
  4164     0483  008D               	movwf	13	;volatile
  4165                           
  4166                           ;main.c: 115:     PORTBbits.RB5 = toggle ^ one.a;
  4167     0484  0854               	movf	_one,w
  4168     0485  0645               	xorwf	_toggle,w
  4169     0486  00AB               	movwf	??_Tmr1CallBack
  4170     0487  0EAB               	swapf	??_Tmr1CallBack,f
  4171     0488  0DAB               	rlf	??_Tmr1CallBack,f
  4172     0489  080D               	movf	13,w	;volatile
  4173     048A  062B               	xorwf	??_Tmr1CallBack,w
  4174     048B  39DF               	andlw	-33
  4175     048C  062B               	xorwf	??_Tmr1CallBack,w
  4176     048D  008D               	movwf	13	;volatile
  4177                           
  4178                           ;main.c: 116:     PORTBbits.RB4 = toggle ^ one.b;
  4179     048E  0855               	movf	_one+1,w
  4180     048F  0645               	xorwf	_toggle,w
  4181     0490  00AB               	movwf	??_Tmr1CallBack
  4182     0491  0EAB               	swapf	??_Tmr1CallBack,f
  4183     0492  080D               	movf	13,w	;volatile
  4184     0493  062B               	xorwf	??_Tmr1CallBack,w
  4185     0494  39EF               	andlw	-17
  4186     0495  062B               	xorwf	??_Tmr1CallBack,w
  4187     0496  008D               	movwf	13	;volatile
  4188                           
  4189                           ;main.c: 117:     PORTCbits.RC2 = toggle ^ one.c;
  4190     0497  0856               	movf	_one+2,w
  4191     0498  0645               	xorwf	_toggle,w
  4192     0499  00AB               	movwf	??_Tmr1CallBack
  4193     049A  0DAB               	rlf	??_Tmr1CallBack,f
  4194     049B  0DAB               	rlf	??_Tmr1CallBack,f
  4195     049C  080E               	movf	14,w	;volatile
  4196     049D  062B               	xorwf	??_Tmr1CallBack,w
  4197     049E  39FB               	andlw	-5
  4198     049F  062B               	xorwf	??_Tmr1CallBack,w
  4199     04A0  008E               	movwf	14	;volatile
  4200                           
  4201                           ;main.c: 118:     PORTCbits.RC1 = toggle ^ one.d;
  4202     04A1  0857               	movf	_one+3,w
  4203     04A2  0645               	xorwf	_toggle,w
  4204     04A3  00AB               	movwf	??_Tmr1CallBack
  4205     04A4  0DAB               	rlf	??_Tmr1CallBack,f
  4206     04A5  080E               	movf	14,w	;volatile
  4207     04A6  062B               	xorwf	??_Tmr1CallBack,w
  4208     04A7  39FD               	andlw	-3
  4209     04A8  062B               	xorwf	??_Tmr1CallBack,w
  4210     04A9  008E               	movwf	14	;volatile
  4211                           
  4212                           ;main.c: 119:     PORTCbits.RC0 = toggle ^ one.e;
  4213     04AA  0845               	movf	_toggle,w
  4214     04AB  0658               	xorwf	_one+4,w
  4215     04AC  00AB               	movwf	??_Tmr1CallBack
  4216     04AD  080E               	movf	14,w	;volatile
  4217     04AE  062B               	xorwf	??_Tmr1CallBack,w
  4218     04AF  39FE               	andlw	-2
  4219     04B0  062B               	xorwf	??_Tmr1CallBack,w
  4220     04B1  008E               	movwf	14	;volatile
  4221                           
  4222                           ;main.c: 120:     PORTAbits.RA2 = toggle ^ one.f;
  4223     04B2  0859               	movf	_one+5,w
  4224     04B3  0645               	xorwf	_toggle,w
  4225     04B4  00AB               	movwf	??_Tmr1CallBack
  4226     04B5  0DAB               	rlf	??_Tmr1CallBack,f
  4227     04B6  0DAB               	rlf	??_Tmr1CallBack,f
  4228     04B7  080C               	movf	12,w	;volatile
  4229     04B8  062B               	xorwf	??_Tmr1CallBack,w
  4230     04B9  39FB               	andlw	-5
  4231     04BA  062B               	xorwf	??_Tmr1CallBack,w
  4232     04BB  008C               	movwf	12	;volatile
  4233                           
  4234                           ;main.c: 121:     PORTAbits.RA1 = toggle ^ one.g;
  4235     04BC  085A               	movf	_one+6,w
  4236     04BD  0645               	xorwf	_toggle,w
  4237     04BE  00AB               	movwf	??_Tmr1CallBack
  4238     04BF  0DAB               	rlf	??_Tmr1CallBack,f
  4239     04C0  080C               	movf	12,w	;volatile
  4240     04C1  062B               	xorwf	??_Tmr1CallBack,w
  4241     04C2  39FD               	andlw	-3
  4242     04C3  062B               	xorwf	??_Tmr1CallBack,w
  4243     04C4  008C               	movwf	12	;volatile
  4244                           
  4245                           ;main.c: 123:     if (RA0Value) {
  4246     04C5  0861               	movf	_RA0Value,w
  4247     04C6  1903               	btfsc	3,2
  4248     04C7  2CC9               	goto	u149_21
  4249     04C8  2CCA               	goto	u149_20
  4250     04C9                     u149_21:
  4251     04C9  2CD7               	goto	i1l250
  4252     04CA                     u149_20:
  4253     04CA                     i1l2216:
  4254                           
  4255                           ;main.c: 124:         RA0Value = 0;
  4256     04CA  01E1               	clrf	_RA0Value
  4257     04CB                     i1l2218:
  4258                           
  4259                           ;main.c: 125:         Display(++counter);
  4260     04CB  3001               	movlw	1
  4261     04CC  07C4               	addwf	_counter,f
  4262     04CD  0844               	movf	_counter,w
  4263     04CE  00AB               	movwf	??_Tmr1CallBack
  4264     04CF  01AC               	clrf	??_Tmr1CallBack+1
  4265     04D0  082B               	movf	??_Tmr1CallBack,w
  4266     04D1  00A0               	movwf	i1Display@a
  4267     04D2  082C               	movf	??_Tmr1CallBack+1,w
  4268     04D3  00A1               	movwf	i1Display@a+1
  4269     04D4  3185  25FC  3184   	fcall	i1_Display
  4270     04D7                     i1l250:
  4271     04D7  0008               	return
  4272     04D8                     __end_of_Tmr1CallBack:
  4273                           
  4274                           	psect	text17
  4275     0F9E                     __ptext17:	
  4276 ;; *************** function _TMR1_Write *****************
  4277 ;; Defined at:
  4278 ;;		line 108 in file "mcc_generated_files/timer/src/tmr1.c"
  4279 ;; Parameters:    Size  Location     Type
  4280 ;;  timerVal        2    0[COMMON] unsigned int 
  4281 ;; Auto vars:     Size  Location     Type
  4282 ;;		None
  4283 ;; Return value:  Size  Location     Type
  4284 ;;                  1    wreg      void 
  4285 ;; Registers used:
  4286 ;;		wreg, status,2
  4287 ;; Tracked objects:
  4288 ;;		On entry : 0/0
  4289 ;;		On exit  : 0/0
  4290 ;;		Unchanged: 0/0
  4291 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  4292 ;;      Params:         2       0       0       0       0       0       0       0
  4293 ;;      Locals:         0       0       0       0       0       0       0       0
  4294 ;;      Temps:          0       0       0       0       0       0       0       0
  4295 ;;      Totals:         2       0       0       0       0       0       0       0
  4296 ;;Total ram usage:        2 bytes
  4297 ;; Hardware stack levels used: 1
  4298 ;; This function calls:
  4299 ;;		Nothing
  4300 ;; This function is called by:
  4301 ;;		_TMR1_OverflowISR
  4302 ;;		_TMR1_Reload
  4303 ;; This function uses a non-reentrant model
  4304 ;;
  4305                           
  4306     0F9E                     _TMR1_Write:	
  4307                           ;psect for function _TMR1_Write
  4308                           
  4309     0F9E                     i1l1744:	
  4310                           ;incstack = 0
  4311                           ; Regs used in _TMR1_Write: [wreg+status,2]
  4312                           
  4313                           
  4314                           ;mcc_generated_files/timer/src/tmr1.c: 108: static void TMR1_Write(size_t timerVal);mcc_
      +                          generated_files/timer/src/tmr1.c: 109: {;mcc_generated_files/timer/src/tmr1.c: 110:     
      +                          if (T1CONbits.nT1SYNC == 1)
  4315     0F9E  0020               	movlb	0	; select bank0
  4316     0F9F  1D18               	btfss	24,2	;volatile
  4317     0FA0  2FA2               	goto	u95_21
  4318     0FA1  2FA3               	goto	u95_20
  4319     0FA2                     u95_21:
  4320     0FA2  2FAA               	goto	i1l1754
  4321     0FA3                     u95_20:
  4322     0FA3                     i1l1746:
  4323                           
  4324                           ;mcc_generated_files/timer/src/tmr1.c: 111:     {;mcc_generated_files/timer/src/tmr1.c: 
      +                          113:         T1CONbits.TMR1ON = 0;
  4325     0FA3  1018               	bcf	24,0	;volatile
  4326     0FA4                     i1l1748:
  4327                           
  4328                           ;mcc_generated_files/timer/src/tmr1.c: 116:         TMR1H = (uint8_t)(timerVal >> 8);
  4329     0FA4  0871               	movf	TMR1_Write@timerVal+1,w
  4330     0FA5  0097               	movwf	23	;volatile
  4331     0FA6                     i1l1750:
  4332                           
  4333                           ;mcc_generated_files/timer/src/tmr1.c: 117:         TMR1L = (uint8_t)timerVal;
  4334     0FA6  0870               	movf	TMR1_Write@timerVal,w
  4335     0FA7  0096               	movwf	22	;volatile
  4336     0FA8                     i1l1752:
  4337                           
  4338                           ;mcc_generated_files/timer/src/tmr1.c: 120:         T1CONbits.TMR1ON = 1;
  4339     0FA8  1418               	bsf	24,0	;volatile
  4340                           
  4341                           ;mcc_generated_files/timer/src/tmr1.c: 121:     }
  4342     0FA9  2FAE               	goto	i1l183
  4343     0FAA                     i1l1754:
  4344                           
  4345                           ;mcc_generated_files/timer/src/tmr1.c: 123:     {;mcc_generated_files/timer/src/tmr1.c: 
      +                          125:         TMR1H = (uint8_t)(timerVal >> 8);
  4346     0FAA  0871               	movf	TMR1_Write@timerVal+1,w
  4347     0FAB  0097               	movwf	23	;volatile
  4348     0FAC                     i1l1756:
  4349                           
  4350                           ;mcc_generated_files/timer/src/tmr1.c: 126:         TMR1L = (uint8_t)timerVal;
  4351     0FAC  0870               	movf	TMR1_Write@timerVal,w
  4352     0FAD  0096               	movwf	22	;volatile
  4353     0FAE                     i1l183:
  4354     0FAE  0008               	return
  4355     0FAF                     __end_of_TMR1_Write:
  4356                           
  4357                           	psect	text18
  4358     0F7A                     __ptext18:	
  4359 ;; *************** function _PIN_MANAGER_IOC *****************
  4360 ;; Defined at:
  4361 ;;		line 104 in file "mcc_generated_files/system/src/pins.c"
  4362 ;; Parameters:    Size  Location     Type
  4363 ;;		None
  4364 ;; Auto vars:     Size  Location     Type
  4365 ;;		None
  4366 ;; Return value:  Size  Location     Type
  4367 ;;                  1    wreg      void 
  4368 ;; Registers used:
  4369 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4370 ;; Tracked objects:
  4371 ;;		On entry : 0/0
  4372 ;;		On exit  : 0/0
  4373 ;;		Unchanged: 0/0
  4374 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  4375 ;;      Params:         0       0       0       0       0       0       0       0
  4376 ;;      Locals:         0       0       0       0       0       0       0       0
  4377 ;;      Temps:          0       0       0       0       0       0       0       0
  4378 ;;      Totals:         0       0       0       0       0       0       0       0
  4379 ;;Total ram usage:        0 bytes
  4380 ;; Hardware stack levels used: 1
  4381 ;; Hardware stack levels required when called: 4
  4382 ;; This function calls:
  4383 ;;		_IO_RA0_ISR
  4384 ;; This function is called by:
  4385 ;;		_INTERRUPT_InterruptManager
  4386 ;; This function uses a non-reentrant model
  4387 ;;
  4388                           
  4389     0F7A                     _PIN_MANAGER_IOC:	
  4390                           ;psect for function _PIN_MANAGER_IOC
  4391                           
  4392     0F7A                     i1l2394:	
  4393                           ;incstack = 0
  4394                           ; Regs used in _PIN_MANAGER_IOC: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  4395                           
  4396                           
  4397                           ;mcc_generated_files/system/src/pins.c: 107:     if(IOCAFbits.IOCAF0 == 1)
  4398     0F7A  0027               	movlb	7	; select bank7
  4399     0F7B  1C13               	btfss	19,0	;volatile
  4400     0F7C  2F7E               	goto	u170_21
  4401     0F7D  2F7F               	goto	u170_20
  4402     0F7E                     u170_21:
  4403     0F7E  2F82               	goto	i1l62
  4404     0F7F                     u170_20:
  4405     0F7F                     i1l2396:
  4406                           
  4407                           ;mcc_generated_files/system/src/pins.c: 108:     {;mcc_generated_files/system/src/pins.c
      +                          : 109:         IO_RA0_ISR();
  4408     0F7F  318F  278F  318F   	fcall	_IO_RA0_ISR
  4409     0F82                     i1l62:
  4410     0F82  0008               	return
  4411     0F83                     __end_of_PIN_MANAGER_IOC:
  4412                           
  4413                           	psect	text19
  4414     0F8F                     __ptext19:	
  4415 ;; *************** function _IO_RA0_ISR *****************
  4416 ;; Defined at:
  4417 ;;		line 116 in file "mcc_generated_files/system/src/pins.c"
  4418 ;; Parameters:    Size  Location     Type
  4419 ;;		None
  4420 ;; Auto vars:     Size  Location     Type
  4421 ;;		None
  4422 ;; Return value:  Size  Location     Type
  4423 ;;                  1    wreg      void 
  4424 ;; Registers used:
  4425 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4426 ;; Tracked objects:
  4427 ;;		On entry : 0/0
  4428 ;;		On exit  : 0/0
  4429 ;;		Unchanged: 0/0
  4430 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  4431 ;;      Params:         0       0       0       0       0       0       0       0
  4432 ;;      Locals:         0       0       0       0       0       0       0       0
  4433 ;;      Temps:          0       0       0       0       0       0       0       0
  4434 ;;      Totals:         0       0       0       0       0       0       0       0
  4435 ;;Total ram usage:        0 bytes
  4436 ;; Hardware stack levels used: 1
  4437 ;; Hardware stack levels required when called: 3
  4438 ;; This function calls:
  4439 ;;		NULL
  4440 ;;		_IO_RA0_DefaultInterruptHandler
  4441 ;;		_RA0Isr
  4442 ;; This function is called by:
  4443 ;;		_PIN_MANAGER_IOC
  4444 ;; This function uses a non-reentrant model
  4445 ;;
  4446                           
  4447     0F8F                     _IO_RA0_ISR:	
  4448                           ;psect for function _IO_RA0_ISR
  4449                           
  4450     0F8F                     i1l2192:	
  4451                           ;incstack = 0
  4452                           ; Regs used in _IO_RA0_ISR: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  4453                           
  4454                           
  4455                           ;mcc_generated_files/system/src/pins.c: 121:     if(IO_RA0_InterruptHandler)
  4456     0F8F  0020               	movlb	0	; select bank0
  4457     0F90  085F               	movf	_IO_RA0_InterruptHandler,w
  4458     0F91  0460               	iorwf	_IO_RA0_InterruptHandler+1,w
  4459     0F92  1903               	btfsc	3,2
  4460     0F93  2F95               	goto	u143_21
  4461     0F94  2F96               	goto	u143_20
  4462     0F95                     u143_21:
  4463     0F95  2F9B               	goto	i1l2196
  4464     0F96                     u143_20:
  4465     0F96                     i1l2194:
  4466                           
  4467                           ;mcc_generated_files/system/src/pins.c: 122:     {;mcc_generated_files/system/src/pins.c
      +                          : 123:         IO_RA0_InterruptHandler();
  4468     0F96  0860               	movf	_IO_RA0_InterruptHandler+1,w
  4469     0F97  008A               	movwf	10
  4470     0F98  085F               	movf	_IO_RA0_InterruptHandler,w
  4471     0F99  000A               	callw
  4472     0F9A  318F               	pagesel	$
  4473     0F9B                     i1l2196:
  4474                           
  4475                           ;mcc_generated_files/system/src/pins.c: 125:     IOCAFbits.IOCAF0 = 0;
  4476     0F9B  0027               	movlb	7	; select bank7
  4477     0F9C  1013               	bcf	19,0	;volatile
  4478     0F9D                     i1l66:
  4479     0F9D  0008               	return
  4480     0F9E                     __end_of_IO_RA0_ISR:
  4481                           
  4482                           	psect	text20
  4483     0F5B                     __ptext20:	
  4484 ;; *************** function _IO_RA0_DefaultInterruptHandler *****************
  4485 ;; Defined at:
  4486 ;;		line 138 in file "mcc_generated_files/system/src/pins.c"
  4487 ;; Parameters:    Size  Location     Type
  4488 ;;		None
  4489 ;; Auto vars:     Size  Location     Type
  4490 ;;		None
  4491 ;; Return value:  Size  Location     Type
  4492 ;;                  1    wreg      void 
  4493 ;; Registers used:
  4494 ;;		None
  4495 ;; Tracked objects:
  4496 ;;		On entry : 0/0
  4497 ;;		On exit  : 0/0
  4498 ;;		Unchanged: 0/0
  4499 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  4500 ;;      Params:         0       0       0       0       0       0       0       0
  4501 ;;      Locals:         0       0       0       0       0       0       0       0
  4502 ;;      Temps:          0       0       0       0       0       0       0       0
  4503 ;;      Totals:         0       0       0       0       0       0       0       0
  4504 ;;Total ram usage:        0 bytes
  4505 ;; Hardware stack levels used: 1
  4506 ;; This function calls:
  4507 ;;		Nothing
  4508 ;; This function is called by:
  4509 ;;		_PIN_MANAGER_Initialize
  4510 ;;		_IO_RA0_ISR
  4511 ;; This function uses a non-reentrant model
  4512 ;;
  4513                           
  4514     0F5B                     _IO_RA0_DefaultInterruptHandler:	
  4515                           ;psect for function _IO_RA0_DefaultInterruptHandler
  4516                           
  4517     0F5B                     i1l72:	
  4518                           ;incstack = 0
  4519                           ; Regs used in _IO_RA0_DefaultInterruptHandler: []
  4520                           
  4521     0F5B  0008               	return
  4522     0F5C                     __end_of_IO_RA0_DefaultInterruptHandler:
  4523                           
  4524                           	psect	text21
  4525     0FDE                     __ptext21:	
  4526 ;; *************** function _RA0Isr *****************
  4527 ;; Defined at:
  4528 ;;		line 253 in file "main.c"
  4529 ;; Parameters:    Size  Location     Type
  4530 ;;		None
  4531 ;; Auto vars:     Size  Location     Type
  4532 ;;		None
  4533 ;; Return value:  Size  Location     Type
  4534 ;;                  1    wreg      void 
  4535 ;; Registers used:
  4536 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4537 ;; Tracked objects:
  4538 ;;		On entry : 0/0
  4539 ;;		On exit  : 0/0
  4540 ;;		Unchanged: 0/0
  4541 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  4542 ;;      Params:         0       0       0       0       0       0       0       0
  4543 ;;      Locals:         0       0       0       0       0       0       0       0
  4544 ;;      Temps:          0       2       0       0       0       0       0       0
  4545 ;;      Totals:         0       2       0       0       0       0       0       0
  4546 ;;Total ram usage:        2 bytes
  4547 ;; Hardware stack levels used: 1
  4548 ;; Hardware stack levels required when called: 2
  4549 ;; This function calls:
  4550 ;;		i1_Display
  4551 ;; This function is called by:
  4552 ;;		_main
  4553 ;;		_IO_RA0_ISR
  4554 ;; This function uses a non-reentrant model
  4555 ;;
  4556                           
  4557     0FDE                     _RA0Isr:	
  4558                           ;psect for function _RA0Isr
  4559                           
  4560     0FDE                     i1l2182:	
  4561                           ;incstack = 0
  4562                           ; Regs used in _RA0Isr: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  4563                           
  4564                           
  4565                           ;main.c: 255:     counter += 1;
  4566     0FDE  3001               	movlw	1
  4567     0FDF  0020               	movlb	0	; select bank0
  4568     0FE0  07C4               	addwf	_counter,f
  4569     0FE1                     i1l2184:
  4570                           
  4571                           ;main.c: 256:     if (counter > 199)
  4572     0FE1  30C8               	movlw	200
  4573     0FE2  0244               	subwf	_counter,w
  4574     0FE3  1C03               	skipc
  4575     0FE4  2FE6               	goto	u142_21
  4576     0FE5  2FE7               	goto	u142_20
  4577     0FE6                     u142_21:
  4578     0FE6  2FE8               	goto	i1l2188
  4579     0FE7                     u142_20:
  4580     0FE7                     i1l2186:
  4581                           
  4582                           ;main.c: 257:     {;main.c: 258:         counter = 0;
  4583     0FE7  01C4               	clrf	_counter
  4584     0FE8                     i1l2188:
  4585                           
  4586                           ;main.c: 261:     Display(counter);
  4587     0FE8  0844               	movf	_counter,w
  4588     0FE9  00AB               	movwf	??_RA0Isr
  4589     0FEA  01AC               	clrf	??_RA0Isr+1
  4590     0FEB  082B               	movf	??_RA0Isr,w
  4591     0FEC  00A0               	movwf	i1Display@a
  4592     0FED  082C               	movf	??_RA0Isr+1,w
  4593     0FEE  00A1               	movwf	i1Display@a+1
  4594     0FEF  3185  25FC  318F   	fcall	i1_Display
  4595     0FF2                     i1l2190:
  4596                           
  4597                           ;main.c: 262:     _delay((unsigned long)((300)*(16000000/4000.0)));
  4598     0FF2  3007               	movlw	7
  4599     0FF3  0020               	movlb	0	; select bank0
  4600     0FF4  00AC               	movwf	??_RA0Isr+1
  4601     0FF5  3017               	movlw	23
  4602     0FF6  00AB               	movwf	??_RA0Isr
  4603     0FF7  306A               	movlw	106
  4604     0FF8                     u186_27:
  4605     0FF8  0B89               	decfsz	9,f
  4606     0FF9  2FF8               	goto	u186_27
  4607     0FFA  0BAB               	decfsz	??_RA0Isr,f
  4608     0FFB  2FF8               	goto	u186_27
  4609     0FFC  0BAC               	decfsz	??_RA0Isr+1,f
  4610     0FFD  2FF8               	goto	u186_27
  4611     0FFE  0000               	nop
  4612     0FFF                     i1l274:
  4613     0FFF  0008               	return
  4614     1000                     __end_of_RA0Isr:
  4615                           
  4616                           	psect	text22
  4617     05FC                     __ptext22:	
  4618 ;; *************** function i1_Display *****************
  4619 ;; Defined at:
  4620 ;;		line 243 in file "main.c"
  4621 ;; Parameters:    Size  Location     Type
  4622 ;;  a               2    0[BANK0 ] int 
  4623 ;; Auto vars:     Size  Location     Type
  4624 ;;  hundreds        2    9[BANK0 ] int 
  4625 ;;  tens            2    7[BANK0 ] int 
  4626 ;;  ones            2    5[BANK0 ] int 
  4627 ;; Return value:  Size  Location     Type
  4628 ;;                  1    wreg      void 
  4629 ;; Registers used:
  4630 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4631 ;; Tracked objects:
  4632 ;;		On entry : 0/0
  4633 ;;		On exit  : 0/0
  4634 ;;		Unchanged: 0/0
  4635 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  4636 ;;      Params:         0       2       0       0       0       0       0       0
  4637 ;;      Locals:         0       6       0       0       0       0       0       0
  4638 ;;      Temps:          0       3       0       0       0       0       0       0
  4639 ;;      Totals:         0      11       0       0       0       0       0       0
  4640 ;;Total ram usage:       11 bytes
  4641 ;; Hardware stack levels used: 1
  4642 ;; This function calls:
  4643 ;;		i1_SetSegments
  4644 ;;		i1___awdiv
  4645 ;;		i1___awmod
  4646 ;; This function is called by:
  4647 ;;		_Tmr1CallBack
  4648 ;;		_RA0Isr
  4649 ;; This function uses a non-reentrant model
  4650 ;;
  4651                           
  4652     05FC                     i1_Display:	
  4653                           ;psect for function i1_Display
  4654                           
  4655     05FC                     i1l2172:	
  4656                           ;incstack = 0
  4657                           ; Regs used in i1_Display: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  4658                           
  4659                           
  4660                           ;main.c: 244:     int ones = a % 10;
  4661     05FC  300A               	movlw	10
  4662     05FD  00F8               	movwf	i1___awmod@divisor
  4663     05FE  3000               	movlw	0
  4664     05FF  00F9               	movwf	i1___awmod@divisor+1
  4665     0600  0020               	movlb	0	; select bank0
  4666     0601  0821               	movf	i1Display@a+1,w
  4667     0602  00FB               	movwf	i1___awmod@dividend+1
  4668     0603  0820               	movf	i1Display@a,w
  4669     0604  00FA               	movwf	i1___awmod@dividend
  4670     0605  3187  277D  3185   	fcall	i1___awmod
  4671     0608  0879               	movf	?i1___awmod+1,w
  4672     0609  0020               	movlb	0	; select bank0
  4673     060A  00A6               	movwf	i1Display@ones+1
  4674     060B  0878               	movf	?i1___awmod,w
  4675     060C  00A5               	movwf	i1Display@ones
  4676                           
  4677                           ;main.c: 245:     int tens = (a / 10) % 10;
  4678     060D  300A               	movlw	10
  4679     060E  00F8               	movwf	i1___awmod@divisor
  4680     060F  3000               	movlw	0
  4681     0610  00F9               	movwf	i1___awmod@divisor+1
  4682     0611  300A               	movlw	10
  4683     0612  00F0               	movwf	i1___awdiv@divisor
  4684     0613  3000               	movlw	0
  4685     0614  00F1               	movwf	i1___awdiv@divisor+1
  4686     0615  0821               	movf	i1Display@a+1,w
  4687     0616  00F3               	movwf	i1___awdiv@dividend+1
  4688     0617  0820               	movf	i1Display@a,w
  4689     0618  00F2               	movwf	i1___awdiv@dividend
  4690     0619  3186  26D0  3185   	fcall	i1___awdiv
  4691     061C  0871               	movf	?i1___awdiv+1,w
  4692     061D  00FB               	movwf	i1___awmod@dividend+1
  4693     061E  0870               	movf	?i1___awdiv,w
  4694     061F  00FA               	movwf	i1___awmod@dividend
  4695     0620  3187  277D  3185   	fcall	i1___awmod
  4696     0623  0879               	movf	?i1___awmod+1,w
  4697     0624  0020               	movlb	0	; select bank0
  4698     0625  00A8               	movwf	i1Display@tens+1
  4699     0626  0878               	movf	?i1___awmod,w
  4700     0627  00A7               	movwf	i1Display@tens
  4701     0628                     i1l2174:
  4702                           
  4703                           ;main.c: 246:     int hundreds = a > 99;
  4704     0628  0821               	movf	i1Display@a+1,w
  4705     0629  3A80               	xorlw	128
  4706     062A  00A2               	movwf	??i1_Display
  4707     062B  3080               	movlw	128
  4708     062C  0222               	subwf	??i1_Display,w
  4709     062D  1D03               	skipz
  4710     062E  2E31               	goto	u138_25
  4711     062F  3064               	movlw	100
  4712     0630  0220               	subwf	i1Display@a,w
  4713     0631                     u138_25:
  4714     0631  1803               	skipnc
  4715     0632  2E34               	goto	u138_21
  4716     0633  2E36               	goto	u138_20
  4717     0634                     u138_21:
  4718     0634  3001               	movlw	1
  4719     0635  2E37               	goto	u139_20
  4720     0636                     u138_20:
  4721     0636  3000               	movlw	0
  4722     0637                     u139_20:
  4723     0637  0020               	movlb	0	; select bank0
  4724     0638  00A3               	movwf	??i1_Display+1
  4725     0639  01A4               	clrf	??i1_Display+2
  4726     063A  0823               	movf	??i1_Display+1,w
  4727     063B  00A9               	movwf	i1Display@hundreds
  4728     063C  0824               	movf	??i1_Display+2,w
  4729     063D  00AA               	movwf	i1Display@hundreds+1
  4730     063E                     i1l2176:
  4731                           
  4732                           ;main.c: 248:     SetSegments(&one, ones, 0);
  4733     063E  3054               	movlw	low _one
  4734     063F  00F0               	movwf	i1SetSegments@digit
  4735     0640  3000               	movlw	high _one
  4736     0641  00F1               	movwf	i1SetSegments@digit+1
  4737     0642  0826               	movf	i1Display@ones+1,w
  4738     0643  00F3               	movwf	i1SetSegments@a+1
  4739     0644  0825               	movf	i1Display@ones,w
  4740     0645  00F2               	movwf	i1SetSegments@a
  4741     0646  01F4               	clrf	i1SetSegments@blank
  4742     0647  3182  2224  3185   	fcall	i1_SetSegments
  4743     064A                     i1l2178:
  4744                           
  4745                           ;main.c: 249:     SetSegments(&ten, tens, (a < 10));
  4746     064A  304D               	movlw	low _ten
  4747     064B  00F0               	movwf	i1SetSegments@digit
  4748     064C  3000               	movlw	high _ten
  4749     064D  00F1               	movwf	i1SetSegments@digit+1
  4750     064E  0020               	movlb	0	; select bank0
  4751     064F  0828               	movf	i1Display@tens+1,w
  4752     0650  00F3               	movwf	i1SetSegments@a+1
  4753     0651  0827               	movf	i1Display@tens,w
  4754     0652  00F2               	movwf	i1SetSegments@a
  4755     0653  0821               	movf	i1Display@a+1,w
  4756     0654  3A80               	xorlw	128
  4757     0655  00A2               	movwf	??i1_Display
  4758     0656  3080               	movlw	128
  4759     0657  0222               	subwf	??i1_Display,w
  4760     0658  1D03               	skipz
  4761     0659  2E5C               	goto	u140_25
  4762     065A  300A               	movlw	10
  4763     065B  0220               	subwf	i1Display@a,w
  4764     065C                     u140_25:
  4765     065C  1C03               	skipc
  4766     065D  2E5F               	goto	u140_21
  4767     065E  2E61               	goto	u140_20
  4768     065F                     u140_21:
  4769     065F  3001               	movlw	1
  4770     0660  2E62               	goto	u141_20
  4771     0661                     u140_20:
  4772     0661  3000               	movlw	0
  4773     0662                     u141_20:
  4774     0662  00F4               	movwf	i1SetSegments@blank
  4775     0663  3182  2224  3185   	fcall	i1_SetSegments
  4776     0666                     i1l2180:
  4777                           
  4778                           ;main.c: 250:     SetSegments(&hundred, hundreds, 0);
  4779     0666  3046               	movlw	low _hundred
  4780     0667  00F0               	movwf	i1SetSegments@digit
  4781     0668  3000               	movlw	high _hundred
  4782     0669  00F1               	movwf	i1SetSegments@digit+1
  4783     066A  0020               	movlb	0	; select bank0
  4784     066B  082A               	movf	i1Display@hundreds+1,w
  4785     066C  00F3               	movwf	i1SetSegments@a+1
  4786     066D  0829               	movf	i1Display@hundreds,w
  4787     066E  00F2               	movwf	i1SetSegments@a
  4788     066F  01F4               	clrf	i1SetSegments@blank
  4789     0670  3182  2224  3185   	fcall	i1_SetSegments
  4790     0673                     i1l270:
  4791     0673  0008               	return
  4792     0674                     __end_ofi1_Display:
  4793                           
  4794                           	psect	text23
  4795     077D                     __ptext23:	
  4796 ;; *************** function i1___awmod *****************
  4797 ;; Defined at:
  4798 ;;		line 5 in file "C:\Program Files\Microchip\xc8\v3.10\pic\sources\c99\common\awmod.c"
  4799 ;; Parameters:    Size  Location     Type
  4800 ;;  divisor         2    8[COMMON] int 
  4801 ;;  dividend        2   10[COMMON] int 
  4802 ;; Auto vars:     Size  Location     Type
  4803 ;;  sign            1   13[COMMON] unsigned char 
  4804 ;;  counter         1   12[COMMON] unsigned char 
  4805 ;; Return value:  Size  Location     Type
  4806 ;;                  2    8[COMMON] int 
  4807 ;; Registers used:
  4808 ;;		wreg, status,2, status,0
  4809 ;; Tracked objects:
  4810 ;;		On entry : 0/0
  4811 ;;		On exit  : 0/0
  4812 ;;		Unchanged: 0/0
  4813 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  4814 ;;      Params:         4       0       0       0       0       0       0       0
  4815 ;;      Locals:         2       0       0       0       0       0       0       0
  4816 ;;      Temps:          0       0       0       0       0       0       0       0
  4817 ;;      Totals:         6       0       0       0       0       0       0       0
  4818 ;;Total ram usage:        6 bytes
  4819 ;; Hardware stack levels used: 1
  4820 ;; This function calls:
  4821 ;;		Nothing
  4822 ;; This function is called by:
  4823 ;;		i1_Display
  4824 ;; This function uses a non-reentrant model
  4825 ;;
  4826                           
  4827     077D                     i1___awmod:	
  4828                           ;psect for function i1___awmod
  4829                           
  4830     077D                     i1l1636:	
  4831                           ;incstack = 0
  4832                           ; Regs used in i1___awmod: [wreg+status,2+status,0]
  4833                           
  4834     077D  01FD               	clrf	i1___awmod@sign
  4835     077E                     i1l1638:
  4836     077E  1FFB               	btfss	i1___awmod@dividend+1,7
  4837     077F  2F81               	goto	u80_21
  4838     0780  2F82               	goto	u80_20
  4839     0781                     u80_21:
  4840     0781  2F89               	goto	i1l1644
  4841     0782                     u80_20:
  4842     0782                     i1l1640:
  4843     0782  09FA               	comf	i1___awmod@dividend,f
  4844     0783  09FB               	comf	i1___awmod@dividend+1,f
  4845     0784  0AFA               	incf	i1___awmod@dividend,f
  4846     0785  1903               	skipnz
  4847     0786  0AFB               	incf	i1___awmod@dividend+1,f
  4848     0787                     i1l1642:
  4849     0787  3001               	movlw	1
  4850     0788  00FD               	movwf	i1___awmod@sign
  4851     0789                     i1l1644:
  4852     0789  1FF9               	btfss	i1___awmod@divisor+1,7
  4853     078A  2F8C               	goto	u81_21
  4854     078B  2F8D               	goto	u81_20
  4855     078C                     u81_21:
  4856     078C  2F92               	goto	i1l1648
  4857     078D                     u81_20:
  4858     078D                     i1l1646:
  4859     078D  09F8               	comf	i1___awmod@divisor,f
  4860     078E  09F9               	comf	i1___awmod@divisor+1,f
  4861     078F  0AF8               	incf	i1___awmod@divisor,f
  4862     0790  1903               	skipnz
  4863     0791  0AF9               	incf	i1___awmod@divisor+1,f
  4864     0792                     i1l1648:
  4865     0792  0878               	movf	i1___awmod@divisor,w
  4866     0793  0479               	iorwf	i1___awmod@divisor+1,w
  4867     0794  1903               	btfsc	3,2
  4868     0795  2F97               	goto	u82_21
  4869     0796  2F98               	goto	u82_20
  4870     0797                     u82_21:
  4871     0797  2FBF               	goto	i1l1666
  4872     0798                     u82_20:
  4873     0798                     i1l1650:
  4874     0798  3001               	movlw	1
  4875     0799  00FC               	movwf	i1___awmod@counter
  4876     079A  2FA2               	goto	i1l1656
  4877     079B                     i1l1652:
  4878     079B  3001               	movlw	1
  4879     079C                     u83_25:
  4880     079C  35F8               	lslf	i1___awmod@divisor,f
  4881     079D  0DF9               	rlf	i1___awmod@divisor+1,f
  4882     079E  0B89               	decfsz	9,f
  4883     079F  2F9C               	goto	u83_25
  4884     07A0                     i1l1654:
  4885     07A0  3001               	movlw	1
  4886     07A1  07FC               	addwf	i1___awmod@counter,f
  4887     07A2                     i1l1656:
  4888     07A2  1FF9               	btfss	i1___awmod@divisor+1,7
  4889     07A3  2FA5               	goto	u84_21
  4890     07A4  2FA6               	goto	u84_20
  4891     07A5                     u84_21:
  4892     07A5  2F9B               	goto	i1l1652
  4893     07A6                     u84_20:
  4894     07A6                     i1l1658:
  4895     07A6  0879               	movf	i1___awmod@divisor+1,w
  4896     07A7  027B               	subwf	i1___awmod@dividend+1,w
  4897     07A8  1D03               	skipz
  4898     07A9  2FAC               	goto	u85_25
  4899     07AA  0878               	movf	i1___awmod@divisor,w
  4900     07AB  027A               	subwf	i1___awmod@dividend,w
  4901     07AC                     u85_25:
  4902     07AC  1C03               	skipc
  4903     07AD  2FAF               	goto	u85_21
  4904     07AE  2FB0               	goto	u85_20
  4905     07AF                     u85_21:
  4906     07AF  2FB4               	goto	i1l1662
  4907     07B0                     u85_20:
  4908     07B0                     i1l1660:
  4909     07B0  0878               	movf	i1___awmod@divisor,w
  4910     07B1  02FA               	subwf	i1___awmod@dividend,f
  4911     07B2  0879               	movf	i1___awmod@divisor+1,w
  4912     07B3  3BFB               	subwfb	i1___awmod@dividend+1,f
  4913     07B4                     i1l1662:
  4914     07B4  3001               	movlw	1
  4915     07B5                     u86_25:
  4916     07B5  36F9               	lsrf	i1___awmod@divisor+1,f
  4917     07B6  0CF8               	rrf	i1___awmod@divisor,f
  4918     07B7  0B89               	decfsz	9,f
  4919     07B8  2FB5               	goto	u86_25
  4920     07B9                     i1l1664:
  4921     07B9  3001               	movlw	1
  4922     07BA  02FC               	subwf	i1___awmod@counter,f
  4923     07BB  1D03               	btfss	3,2
  4924     07BC  2FBE               	goto	u87_21
  4925     07BD  2FBF               	goto	u87_20
  4926     07BE                     u87_21:
  4927     07BE  2FA6               	goto	i1l1658
  4928     07BF                     u87_20:
  4929     07BF                     i1l1666:
  4930     07BF  087D               	movf	i1___awmod@sign,w
  4931     07C0  1903               	btfsc	3,2
  4932     07C1  2FC3               	goto	u88_21
  4933     07C2  2FC4               	goto	u88_20
  4934     07C3                     u88_21:
  4935     07C3  2FC9               	goto	i1l1670
  4936     07C4                     u88_20:
  4937     07C4                     i1l1668:
  4938     07C4  09FA               	comf	i1___awmod@dividend,f
  4939     07C5  09FB               	comf	i1___awmod@dividend+1,f
  4940     07C6  0AFA               	incf	i1___awmod@dividend,f
  4941     07C7  1903               	skipnz
  4942     07C8  0AFB               	incf	i1___awmod@dividend+1,f
  4943     07C9                     i1l1670:
  4944     07C9  087B               	movf	i1___awmod@dividend+1,w
  4945     07CA  00F9               	movwf	?i1___awmod+1
  4946     07CB  087A               	movf	i1___awmod@dividend,w
  4947     07CC  00F8               	movwf	?i1___awmod
  4948     07CD                     i1l470:
  4949     07CD  0008               	return
  4950     07CE                     __end_ofi1___awmod:
  4951                           
  4952                           	psect	text24
  4953     06D0                     __ptext24:	
  4954 ;; *************** function i1___awdiv *****************
  4955 ;; Defined at:
  4956 ;;		line 5 in file "C:\Program Files\Microchip\xc8\v3.10\pic\sources\c99\common\awdiv.c"
  4957 ;; Parameters:    Size  Location     Type
  4958 ;;  divisor         2    0[COMMON] int 
  4959 ;;  dividend        2    2[COMMON] int 
  4960 ;; Auto vars:     Size  Location     Type
  4961 ;;  quotient        2    6[COMMON] int 
  4962 ;;  sign            1    5[COMMON] unsigned char 
  4963 ;;  counter         1    4[COMMON] unsigned char 
  4964 ;; Return value:  Size  Location     Type
  4965 ;;                  2    0[COMMON] int 
  4966 ;; Registers used:
  4967 ;;		wreg, status,2, status,0
  4968 ;; Tracked objects:
  4969 ;;		On entry : 0/0
  4970 ;;		On exit  : 0/0
  4971 ;;		Unchanged: 0/0
  4972 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  4973 ;;      Params:         4       0       0       0       0       0       0       0
  4974 ;;      Locals:         4       0       0       0       0       0       0       0
  4975 ;;      Temps:          0       0       0       0       0       0       0       0
  4976 ;;      Totals:         8       0       0       0       0       0       0       0
  4977 ;;Total ram usage:        8 bytes
  4978 ;; Hardware stack levels used: 1
  4979 ;; This function calls:
  4980 ;;		Nothing
  4981 ;; This function is called by:
  4982 ;;		i1_Display
  4983 ;; This function uses a non-reentrant model
  4984 ;;
  4985                           
  4986     06D0                     i1___awdiv:	
  4987                           ;psect for function i1___awdiv
  4988                           
  4989     06D0                     i1l1592:	
  4990                           ;incstack = 0
  4991                           ; Regs used in i1___awdiv: [wreg+status,2+status,0]
  4992                           
  4993     06D0  01F5               	clrf	i1___awdiv@sign
  4994     06D1                     i1l1594:
  4995     06D1  1FF1               	btfss	i1___awdiv@divisor+1,7
  4996     06D2  2ED4               	goto	u70_21
  4997     06D3  2ED5               	goto	u70_20
  4998     06D4                     u70_21:
  4999     06D4  2EDC               	goto	i1l1600
  5000     06D5                     u70_20:
  5001     06D5                     i1l1596:
  5002     06D5  09F0               	comf	i1___awdiv@divisor,f
  5003     06D6  09F1               	comf	i1___awdiv@divisor+1,f
  5004     06D7  0AF0               	incf	i1___awdiv@divisor,f
  5005     06D8  1903               	skipnz
  5006     06D9  0AF1               	incf	i1___awdiv@divisor+1,f
  5007     06DA                     i1l1598:
  5008     06DA  3001               	movlw	1
  5009     06DB  00F5               	movwf	i1___awdiv@sign
  5010     06DC                     i1l1600:
  5011     06DC  1FF3               	btfss	i1___awdiv@dividend+1,7
  5012     06DD  2EDF               	goto	u71_21
  5013     06DE  2EE0               	goto	u71_20
  5014     06DF                     u71_21:
  5015     06DF  2EE7               	goto	i1l1606
  5016     06E0                     u71_20:
  5017     06E0                     i1l1602:
  5018     06E0  09F2               	comf	i1___awdiv@dividend,f
  5019     06E1  09F3               	comf	i1___awdiv@dividend+1,f
  5020     06E2  0AF2               	incf	i1___awdiv@dividend,f
  5021     06E3  1903               	skipnz
  5022     06E4  0AF3               	incf	i1___awdiv@dividend+1,f
  5023     06E5                     i1l1604:
  5024     06E5  3001               	movlw	1
  5025     06E6  06F5               	xorwf	i1___awdiv@sign,f
  5026     06E7                     i1l1606:
  5027     06E7  01F6               	clrf	i1___awdiv@quotient
  5028     06E8  01F7               	clrf	i1___awdiv@quotient+1
  5029     06E9                     i1l1608:
  5030     06E9  0870               	movf	i1___awdiv@divisor,w
  5031     06EA  0471               	iorwf	i1___awdiv@divisor+1,w
  5032     06EB  1903               	btfsc	3,2
  5033     06EC  2EEE               	goto	u72_21
  5034     06ED  2EEF               	goto	u72_20
  5035     06EE                     u72_21:
  5036     06EE  2F1C               	goto	i1l1628
  5037     06EF                     u72_20:
  5038     06EF                     i1l1610:
  5039     06EF  3001               	movlw	1
  5040     06F0  00F4               	movwf	i1___awdiv@counter
  5041     06F1  2EF9               	goto	i1l1616
  5042     06F2                     i1l1612:
  5043     06F2  3001               	movlw	1
  5044     06F3                     u73_25:
  5045     06F3  35F0               	lslf	i1___awdiv@divisor,f
  5046     06F4  0DF1               	rlf	i1___awdiv@divisor+1,f
  5047     06F5  0B89               	decfsz	9,f
  5048     06F6  2EF3               	goto	u73_25
  5049     06F7                     i1l1614:
  5050     06F7  3001               	movlw	1
  5051     06F8  07F4               	addwf	i1___awdiv@counter,f
  5052     06F9                     i1l1616:
  5053     06F9  1FF1               	btfss	i1___awdiv@divisor+1,7
  5054     06FA  2EFC               	goto	u74_21
  5055     06FB  2EFD               	goto	u74_20
  5056     06FC                     u74_21:
  5057     06FC  2EF2               	goto	i1l1612
  5058     06FD                     u74_20:
  5059     06FD                     i1l1618:
  5060     06FD  3001               	movlw	1
  5061     06FE                     u75_25:
  5062     06FE  35F6               	lslf	i1___awdiv@quotient,f
  5063     06FF  0DF7               	rlf	i1___awdiv@quotient+1,f
  5064     0700  0B89               	decfsz	9,f
  5065     0701  2EFE               	goto	u75_25
  5066     0702  0871               	movf	i1___awdiv@divisor+1,w
  5067     0703  0273               	subwf	i1___awdiv@dividend+1,w
  5068     0704  1D03               	skipz
  5069     0705  2F08               	goto	u76_25
  5070     0706  0870               	movf	i1___awdiv@divisor,w
  5071     0707  0272               	subwf	i1___awdiv@dividend,w
  5072     0708                     u76_25:
  5073     0708  1C03               	skipc
  5074     0709  2F0B               	goto	u76_21
  5075     070A  2F0C               	goto	u76_20
  5076     070B                     u76_21:
  5077     070B  2F11               	goto	i1l1624
  5078     070C                     u76_20:
  5079     070C                     i1l1620:
  5080     070C  0870               	movf	i1___awdiv@divisor,w
  5081     070D  02F2               	subwf	i1___awdiv@dividend,f
  5082     070E  0871               	movf	i1___awdiv@divisor+1,w
  5083     070F  3BF3               	subwfb	i1___awdiv@dividend+1,f
  5084     0710                     i1l1622:
  5085     0710  1476               	bsf	i1___awdiv@quotient,0
  5086     0711                     i1l1624:
  5087     0711  3001               	movlw	1
  5088     0712                     u77_25:
  5089     0712  36F1               	lsrf	i1___awdiv@divisor+1,f
  5090     0713  0CF0               	rrf	i1___awdiv@divisor,f
  5091     0714  0B89               	decfsz	9,f
  5092     0715  2F12               	goto	u77_25
  5093     0716                     i1l1626:
  5094     0716  3001               	movlw	1
  5095     0717  02F4               	subwf	i1___awdiv@counter,f
  5096     0718  1D03               	btfss	3,2
  5097     0719  2F1B               	goto	u78_21
  5098     071A  2F1C               	goto	u78_20
  5099     071B                     u78_21:
  5100     071B  2EFD               	goto	i1l1618
  5101     071C                     u78_20:
  5102     071C                     i1l1628:
  5103     071C  0875               	movf	i1___awdiv@sign,w
  5104     071D  1903               	btfsc	3,2
  5105     071E  2F20               	goto	u79_21
  5106     071F  2F21               	goto	u79_20
  5107     0720                     u79_21:
  5108     0720  2F26               	goto	i1l1632
  5109     0721                     u79_20:
  5110     0721                     i1l1630:
  5111     0721  09F6               	comf	i1___awdiv@quotient,f
  5112     0722  09F7               	comf	i1___awdiv@quotient+1,f
  5113     0723  0AF6               	incf	i1___awdiv@quotient,f
  5114     0724  1903               	skipnz
  5115     0725  0AF7               	incf	i1___awdiv@quotient+1,f
  5116     0726                     i1l1632:
  5117     0726  0877               	movf	i1___awdiv@quotient+1,w
  5118     0727  00F1               	movwf	?i1___awdiv+1
  5119     0728  0876               	movf	i1___awdiv@quotient,w
  5120     0729  00F0               	movwf	?i1___awdiv
  5121     072A                     i1l457:
  5122     072A  0008               	return
  5123     072B                     __end_ofi1___awdiv:
  5124                           
  5125                           	psect	text25
  5126     0224                     __ptext25:	
  5127 ;; *************** function i1_SetSegments *****************
  5128 ;; Defined at:
  5129 ;;		line 129 in file "main.c"
  5130 ;; Parameters:    Size  Location     Type
  5131 ;;  digit           2    0[COMMON] PTR struct digit
  5132 ;;		 -> one(7), ten(7), hundred(7), 
  5133 ;;  a               2    2[COMMON] int 
  5134 ;;  blank           1    4[COMMON] unsigned char 
  5135 ;; Auto vars:     Size  Location     Type
  5136 ;;		None
  5137 ;; Return value:  Size  Location     Type
  5138 ;;                  1    wreg      void 
  5139 ;; Registers used:
  5140 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0
  5141 ;; Tracked objects:
  5142 ;;		On entry : 0/0
  5143 ;;		On exit  : 0/0
  5144 ;;		Unchanged: 0/0
  5145 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  5146 ;;      Params:         5       0       0       0       0       0       0       0
  5147 ;;      Locals:         0       0       0       0       0       0       0       0
  5148 ;;      Temps:          0       0       0       0       0       0       0       0
  5149 ;;      Totals:         5       0       0       0       0       0       0       0
  5150 ;;Total ram usage:        5 bytes
  5151 ;; Hardware stack levels used: 1
  5152 ;; This function calls:
  5153 ;;		Nothing
  5154 ;; This function is called by:
  5155 ;;		i1_Display
  5156 ;; This function uses a non-reentrant model
  5157 ;;
  5158                           
  5159     0224                     i1_SetSegments:	
  5160                           ;psect for function i1_SetSegments
  5161                           
  5162     0224                     i1l2080:	
  5163                           ;incstack = 0
  5164                           ; Regs used in i1_SetSegments: [wreg-fsr1h+status,2+status,0]
  5165                           
  5166                           
  5167                           ;main.c: 130:     if (blank) {
  5168     0224  0874               	movf	i1SetSegments@blank,w
  5169     0225  1903               	btfsc	3,2
  5170     0226  2A28               	goto	u137_21
  5171     0227  2A29               	goto	u137_20
  5172     0228                     u137_21:
  5173     0228  2BE6               	goto	i1l2166
  5174     0229                     u137_20:
  5175     0229                     i1l2082:
  5176                           
  5177                           ;main.c: 131:         digit->a = 0;
  5178     0229  0870               	movf	i1SetSegments@digit,w
  5179     022A  0086               	movwf	6
  5180     022B  0871               	movf	i1SetSegments@digit+1,w
  5181     022C  0087               	movwf	7
  5182     022D  0181               	clrf	1
  5183                           
  5184                           ;main.c: 132:         digit->b = 0;
  5185     022E  0870               	movf	i1SetSegments@digit,w
  5186     022F  0086               	movwf	6
  5187     0230  0187               	clrf	7
  5188     0231  3141               	addfsr 1,1
  5189     0232  0181               	clrf	1
  5190                           
  5191                           ;main.c: 133:         digit->c = 0;
  5192     0233  0870               	movf	i1SetSegments@digit,w
  5193     0234  0086               	movwf	6
  5194     0235  0187               	clrf	7
  5195     0236  3142               	addfsr 1,2
  5196     0237  0181               	clrf	1
  5197                           
  5198                           ;main.c: 134:         digit->d = 0;
  5199     0238  0870               	movf	i1SetSegments@digit,w
  5200     0239  0086               	movwf	6
  5201     023A  0187               	clrf	7
  5202     023B  3143               	addfsr 1,3
  5203     023C  0181               	clrf	1
  5204                           
  5205                           ;main.c: 135:         digit->e = 0;
  5206     023D  0870               	movf	i1SetSegments@digit,w
  5207     023E  0086               	movwf	6
  5208     023F  0187               	clrf	7
  5209     0240  3144               	addfsr 1,4
  5210     0241  0181               	clrf	1
  5211                           
  5212                           ;main.c: 136:         digit->f = 0;
  5213     0242  0870               	movf	i1SetSegments@digit,w
  5214     0243  0086               	movwf	6
  5215     0244  0187               	clrf	7
  5216     0245  3145               	addfsr 1,5
  5217     0246  0181               	clrf	1
  5218                           
  5219                           ;main.c: 137:         digit->g = 0;
  5220     0247  0870               	movf	i1SetSegments@digit,w
  5221     0248  0086               	movwf	6
  5222     0249  0187               	clrf	7
  5223     024A  3146               	addfsr 1,6
  5224     024B  0181               	clrf	1
  5225                           
  5226                           ;main.c: 138:     } else {
  5227     024C  2C0B               	goto	i1l267
  5228     024D                     i1l2084:
  5229                           
  5230                           ;main.c: 141:                 digit->a = 1;
  5231     024D  0870               	movf	i1SetSegments@digit,w
  5232     024E  0086               	movwf	6
  5233     024F  0871               	movf	i1SetSegments@digit+1,w
  5234     0250  0087               	movwf	7
  5235     0251  3001               	movlw	1
  5236     0252  0081               	movwf	1
  5237                           
  5238                           ;main.c: 142:                 digit->b = 1;
  5239     0253  0870               	movf	i1SetSegments@digit,w
  5240     0254  0086               	movwf	6
  5241     0255  0187               	clrf	7
  5242     0256  3141               	addfsr 1,1
  5243     0257  3001               	movlw	1
  5244     0258  0081               	movwf	1
  5245                           
  5246                           ;main.c: 143:                 digit->c = 1;
  5247     0259  0870               	movf	i1SetSegments@digit,w
  5248     025A  0086               	movwf	6
  5249     025B  0187               	clrf	7
  5250     025C  3142               	addfsr 1,2
  5251     025D  3001               	movlw	1
  5252     025E  0081               	movwf	1
  5253                           
  5254                           ;main.c: 144:                 digit->d = 1;
  5255     025F  0870               	movf	i1SetSegments@digit,w
  5256     0260  0086               	movwf	6
  5257     0261  0187               	clrf	7
  5258     0262  3143               	addfsr 1,3
  5259     0263  3001               	movlw	1
  5260     0264  0081               	movwf	1
  5261                           
  5262                           ;main.c: 145:                 digit->e = 1;
  5263     0265  0870               	movf	i1SetSegments@digit,w
  5264     0266  0086               	movwf	6
  5265     0267  0187               	clrf	7
  5266     0268  3144               	addfsr 1,4
  5267     0269  3001               	movlw	1
  5268     026A  0081               	movwf	1
  5269                           
  5270                           ;main.c: 146:                 digit->f = 1;
  5271     026B  0870               	movf	i1SetSegments@digit,w
  5272     026C  0086               	movwf	6
  5273     026D  0187               	clrf	7
  5274     026E  3145               	addfsr 1,5
  5275     026F  3001               	movlw	1
  5276     0270  0081               	movwf	1
  5277     0271                     i1l2086:
  5278                           
  5279                           ;main.c: 147:                 digit->g = 0;
  5280     0271  0870               	movf	i1SetSegments@digit,w
  5281     0272  0086               	movwf	6
  5282     0273  0187               	clrf	7
  5283     0274  3146               	addfsr 1,6
  5284     0275  0181               	clrf	1
  5285                           
  5286                           ;main.c: 148:                 break;
  5287     0276  2C0B               	goto	i1l267
  5288     0277                     i1l2088:
  5289                           
  5290                           ;main.c: 151:                 digit->a = 0;
  5291     0277  0870               	movf	i1SetSegments@digit,w
  5292     0278  0086               	movwf	6
  5293     0279  0871               	movf	i1SetSegments@digit+1,w
  5294     027A  0087               	movwf	7
  5295     027B  0181               	clrf	1
  5296     027C                     i1l2090:
  5297                           
  5298                           ;main.c: 152:                 digit->b = 1;
  5299     027C  0870               	movf	i1SetSegments@digit,w
  5300     027D  0086               	movwf	6
  5301     027E  0187               	clrf	7
  5302     027F  3141               	addfsr 1,1
  5303     0280  3001               	movlw	1
  5304     0281  0081               	movwf	1
  5305     0282                     i1l2092:
  5306                           
  5307                           ;main.c: 153:                 digit->c = 1;
  5308     0282  0870               	movf	i1SetSegments@digit,w
  5309     0283  0086               	movwf	6
  5310     0284  0187               	clrf	7
  5311     0285  3142               	addfsr 1,2
  5312     0286  3001               	movlw	1
  5313     0287  0081               	movwf	1
  5314                           
  5315                           ;main.c: 154:                 digit->d = 0;
  5316     0288  0870               	movf	i1SetSegments@digit,w
  5317     0289  0086               	movwf	6
  5318     028A  0187               	clrf	7
  5319     028B  3143               	addfsr 1,3
  5320     028C  0181               	clrf	1
  5321                           
  5322                           ;main.c: 155:                 digit->e = 0;
  5323     028D  0870               	movf	i1SetSegments@digit,w
  5324     028E  0086               	movwf	6
  5325     028F  0187               	clrf	7
  5326     0290  3144               	addfsr 1,4
  5327     0291  0181               	clrf	1
  5328                           
  5329                           ;main.c: 156:                 digit->f = 0;
  5330     0292  0870               	movf	i1SetSegments@digit,w
  5331     0293  0086               	movwf	6
  5332     0294  0187               	clrf	7
  5333     0295  3145               	addfsr 1,5
  5334     0296  0181               	clrf	1
  5335                           
  5336                           ;main.c: 157:                 digit->g = 0;
  5337     0297  0870               	movf	i1SetSegments@digit,w
  5338     0298  0086               	movwf	6
  5339     0299  0187               	clrf	7
  5340     029A  3146               	addfsr 1,6
  5341     029B  0181               	clrf	1
  5342                           
  5343                           ;main.c: 158:                 break;
  5344     029C  2C0B               	goto	i1l267
  5345     029D                     i1l2094:
  5346                           
  5347                           ;main.c: 161:                 digit->a = 1;
  5348     029D  0870               	movf	i1SetSegments@digit,w
  5349     029E  0086               	movwf	6
  5350     029F  0871               	movf	i1SetSegments@digit+1,w
  5351     02A0  0087               	movwf	7
  5352     02A1  3001               	movlw	1
  5353     02A2  0081               	movwf	1
  5354                           
  5355                           ;main.c: 162:                 digit->b = 1;
  5356     02A3  0870               	movf	i1SetSegments@digit,w
  5357     02A4  0086               	movwf	6
  5358     02A5  0187               	clrf	7
  5359     02A6  3141               	addfsr 1,1
  5360     02A7  3001               	movlw	1
  5361     02A8  0081               	movwf	1
  5362     02A9                     i1l2096:
  5363                           
  5364                           ;main.c: 163:                 digit->c = 0;
  5365     02A9  0870               	movf	i1SetSegments@digit,w
  5366     02AA  0086               	movwf	6
  5367     02AB  0187               	clrf	7
  5368     02AC  3142               	addfsr 1,2
  5369     02AD  0181               	clrf	1
  5370     02AE                     i1l2098:
  5371                           
  5372                           ;main.c: 164:                 digit->d = 1;
  5373     02AE  0870               	movf	i1SetSegments@digit,w
  5374     02AF  0086               	movwf	6
  5375     02B0  0187               	clrf	7
  5376     02B1  3143               	addfsr 1,3
  5377     02B2  3001               	movlw	1
  5378     02B3  0081               	movwf	1
  5379     02B4                     i1l2100:
  5380                           
  5381                           ;main.c: 165:                 digit->e = 1;
  5382     02B4  0870               	movf	i1SetSegments@digit,w
  5383     02B5  0086               	movwf	6
  5384     02B6  0187               	clrf	7
  5385     02B7  3144               	addfsr 1,4
  5386     02B8  3001               	movlw	1
  5387     02B9  0081               	movwf	1
  5388     02BA                     i1l2102:
  5389                           
  5390                           ;main.c: 166:                 digit->f = 0;
  5391     02BA  0870               	movf	i1SetSegments@digit,w
  5392     02BB  0086               	movwf	6
  5393     02BC  0187               	clrf	7
  5394     02BD  3145               	addfsr 1,5
  5395     02BE  0181               	clrf	1
  5396                           
  5397                           ;main.c: 167:                 digit->g = 1;
  5398     02BF  0870               	movf	i1SetSegments@digit,w
  5399     02C0  0086               	movwf	6
  5400     02C1  0187               	clrf	7
  5401     02C2  3146               	addfsr 1,6
  5402     02C3  3001               	movlw	1
  5403     02C4  0081               	movwf	1
  5404                           
  5405                           ;main.c: 168:                 break;
  5406     02C5  2C0B               	goto	i1l267
  5407     02C6                     i1l2104:
  5408                           
  5409                           ;main.c: 171:                 digit->a = 1;
  5410     02C6  0870               	movf	i1SetSegments@digit,w
  5411     02C7  0086               	movwf	6
  5412     02C8  0871               	movf	i1SetSegments@digit+1,w
  5413     02C9  0087               	movwf	7
  5414     02CA  3001               	movlw	1
  5415     02CB  0081               	movwf	1
  5416                           
  5417                           ;main.c: 172:                 digit->b = 1;
  5418     02CC  0870               	movf	i1SetSegments@digit,w
  5419     02CD  0086               	movwf	6
  5420     02CE  0187               	clrf	7
  5421     02CF  3141               	addfsr 1,1
  5422     02D0  3001               	movlw	1
  5423     02D1  0081               	movwf	1
  5424                           
  5425                           ;main.c: 173:                 digit->c = 1;
  5426     02D2  0870               	movf	i1SetSegments@digit,w
  5427     02D3  0086               	movwf	6
  5428     02D4  0187               	clrf	7
  5429     02D5  3142               	addfsr 1,2
  5430     02D6  3001               	movlw	1
  5431     02D7  0081               	movwf	1
  5432                           
  5433                           ;main.c: 174:                 digit->d = 1;
  5434     02D8  0870               	movf	i1SetSegments@digit,w
  5435     02D9  0086               	movwf	6
  5436     02DA  0187               	clrf	7
  5437     02DB  3143               	addfsr 1,3
  5438     02DC  3001               	movlw	1
  5439     02DD  0081               	movwf	1
  5440     02DE                     i1l2106:
  5441                           
  5442                           ;main.c: 175:                 digit->e = 0;
  5443     02DE  0870               	movf	i1SetSegments@digit,w
  5444     02DF  0086               	movwf	6
  5445     02E0  0187               	clrf	7
  5446     02E1  3144               	addfsr 1,4
  5447     02E2  0181               	clrf	1
  5448     02E3                     i1l2108:
  5449                           
  5450                           ;main.c: 176:                 digit->f = 0;
  5451     02E3  0870               	movf	i1SetSegments@digit,w
  5452     02E4  0086               	movwf	6
  5453     02E5  0187               	clrf	7
  5454     02E6  3145               	addfsr 1,5
  5455     02E7  0181               	clrf	1
  5456                           
  5457                           ;main.c: 177:                 digit->g = 1;
  5458     02E8  0870               	movf	i1SetSegments@digit,w
  5459     02E9  0086               	movwf	6
  5460     02EA  0187               	clrf	7
  5461     02EB  3146               	addfsr 1,6
  5462     02EC  3001               	movlw	1
  5463     02ED  0081               	movwf	1
  5464                           
  5465                           ;main.c: 178:                 break;
  5466     02EE  2C0B               	goto	i1l267
  5467     02EF                     i1l2110:
  5468                           
  5469                           ;main.c: 181:                 digit->a = 0;
  5470     02EF  0870               	movf	i1SetSegments@digit,w
  5471     02F0  0086               	movwf	6
  5472     02F1  0871               	movf	i1SetSegments@digit+1,w
  5473     02F2  0087               	movwf	7
  5474     02F3  0181               	clrf	1
  5475     02F4                     i1l2112:
  5476                           
  5477                           ;main.c: 182:                 digit->b = 1;
  5478     02F4  0870               	movf	i1SetSegments@digit,w
  5479     02F5  0086               	movwf	6
  5480     02F6  0187               	clrf	7
  5481     02F7  3141               	addfsr 1,1
  5482     02F8  3001               	movlw	1
  5483     02F9  0081               	movwf	1
  5484     02FA                     i1l2114:
  5485                           
  5486                           ;main.c: 183:                 digit->c = 1;
  5487     02FA  0870               	movf	i1SetSegments@digit,w
  5488     02FB  0086               	movwf	6
  5489     02FC  0187               	clrf	7
  5490     02FD  3142               	addfsr 1,2
  5491     02FE  3001               	movlw	1
  5492     02FF  0081               	movwf	1
  5493                           
  5494                           ;main.c: 184:                 digit->d = 0;
  5495     0300  0870               	movf	i1SetSegments@digit,w
  5496     0301  0086               	movwf	6
  5497     0302  0187               	clrf	7
  5498     0303  3143               	addfsr 1,3
  5499     0304  0181               	clrf	1
  5500                           
  5501                           ;main.c: 185:                 digit->e = 0;
  5502     0305  0870               	movf	i1SetSegments@digit,w
  5503     0306  0086               	movwf	6
  5504     0307  0187               	clrf	7
  5505     0308  3144               	addfsr 1,4
  5506     0309  0181               	clrf	1
  5507     030A                     i1l2116:
  5508                           
  5509                           ;main.c: 186:                 digit->f = 1;
  5510     030A  0870               	movf	i1SetSegments@digit,w
  5511     030B  0086               	movwf	6
  5512     030C  0187               	clrf	7
  5513     030D  3145               	addfsr 1,5
  5514     030E  3001               	movlw	1
  5515     030F  0081               	movwf	1
  5516     0310                     i1l2118:
  5517                           
  5518                           ;main.c: 187:                 digit->g = 1;
  5519     0310  0870               	movf	i1SetSegments@digit,w
  5520     0311  0086               	movwf	6
  5521     0312  0187               	clrf	7
  5522     0313  3146               	addfsr 1,6
  5523     0314  3001               	movlw	1
  5524     0315  0081               	movwf	1
  5525                           
  5526                           ;main.c: 188:                 break;
  5527     0316  2C0B               	goto	i1l267
  5528     0317                     i1l2120:
  5529                           
  5530                           ;main.c: 191:                 digit->a = 1;
  5531     0317  0870               	movf	i1SetSegments@digit,w
  5532     0318  0086               	movwf	6
  5533     0319  0871               	movf	i1SetSegments@digit+1,w
  5534     031A  0087               	movwf	7
  5535     031B  3001               	movlw	1
  5536     031C  0081               	movwf	1
  5537     031D                     i1l2122:
  5538                           
  5539                           ;main.c: 192:                 digit->b = 0;
  5540     031D  0870               	movf	i1SetSegments@digit,w
  5541     031E  0086               	movwf	6
  5542     031F  0187               	clrf	7
  5543     0320  3141               	addfsr 1,1
  5544     0321  0181               	clrf	1
  5545     0322                     i1l2124:
  5546                           
  5547                           ;main.c: 193:                 digit->c = 1;
  5548     0322  0870               	movf	i1SetSegments@digit,w
  5549     0323  0086               	movwf	6
  5550     0324  0187               	clrf	7
  5551     0325  3142               	addfsr 1,2
  5552     0326  3001               	movlw	1
  5553     0327  0081               	movwf	1
  5554     0328                     i1l2126:
  5555                           
  5556                           ;main.c: 194:                 digit->d = 1;
  5557     0328  0870               	movf	i1SetSegments@digit,w
  5558     0329  0086               	movwf	6
  5559     032A  0187               	clrf	7
  5560     032B  3143               	addfsr 1,3
  5561     032C  3001               	movlw	1
  5562     032D  0081               	movwf	1
  5563     032E                     i1l2128:
  5564                           
  5565                           ;main.c: 195:                 digit->e = 0;
  5566     032E  0870               	movf	i1SetSegments@digit,w
  5567     032F  0086               	movwf	6
  5568     0330  0187               	clrf	7
  5569     0331  3144               	addfsr 1,4
  5570     0332  0181               	clrf	1
  5571                           
  5572                           ;main.c: 196:                 digit->f = 1;
  5573     0333  0870               	movf	i1SetSegments@digit,w
  5574     0334  0086               	movwf	6
  5575     0335  0187               	clrf	7
  5576     0336  3145               	addfsr 1,5
  5577     0337  3001               	movlw	1
  5578     0338  0081               	movwf	1
  5579                           
  5580                           ;main.c: 197:                 digit->g = 1;
  5581     0339  0870               	movf	i1SetSegments@digit,w
  5582     033A  0086               	movwf	6
  5583     033B  0187               	clrf	7
  5584     033C  3146               	addfsr 1,6
  5585     033D  3001               	movlw	1
  5586     033E  0081               	movwf	1
  5587                           
  5588                           ;main.c: 198:                 break;
  5589     033F  2C0B               	goto	i1l267
  5590     0340                     i1l2130:
  5591                           
  5592                           ;main.c: 201:                 digit->a = 1;
  5593     0340  0870               	movf	i1SetSegments@digit,w
  5594     0341  0086               	movwf	6
  5595     0342  0871               	movf	i1SetSegments@digit+1,w
  5596     0343  0087               	movwf	7
  5597     0344  3001               	movlw	1
  5598     0345  0081               	movwf	1
  5599     0346                     i1l2132:
  5600                           
  5601                           ;main.c: 202:                 digit->b = 0;
  5602     0346  0870               	movf	i1SetSegments@digit,w
  5603     0347  0086               	movwf	6
  5604     0348  0187               	clrf	7
  5605     0349  3141               	addfsr 1,1
  5606     034A  0181               	clrf	1
  5607     034B                     i1l2134:
  5608                           
  5609                           ;main.c: 203:                 digit->c = 1;
  5610     034B  0870               	movf	i1SetSegments@digit,w
  5611     034C  0086               	movwf	6
  5612     034D  0187               	clrf	7
  5613     034E  3142               	addfsr 1,2
  5614     034F  3001               	movlw	1
  5615     0350  0081               	movwf	1
  5616     0351                     i1l2136:
  5617                           
  5618                           ;main.c: 204:                 digit->d = 1;
  5619     0351  0870               	movf	i1SetSegments@digit,w
  5620     0352  0086               	movwf	6
  5621     0353  0187               	clrf	7
  5622     0354  3143               	addfsr 1,3
  5623     0355  3001               	movlw	1
  5624     0356  0081               	movwf	1
  5625     0357                     i1l2138:
  5626                           
  5627                           ;main.c: 205:                 digit->e = 1;
  5628     0357  0870               	movf	i1SetSegments@digit,w
  5629     0358  0086               	movwf	6
  5630     0359  0187               	clrf	7
  5631     035A  3144               	addfsr 1,4
  5632     035B  3001               	movlw	1
  5633     035C  0081               	movwf	1
  5634     035D                     i1l2140:
  5635                           
  5636                           ;main.c: 206:                 digit->f = 1;
  5637     035D  0870               	movf	i1SetSegments@digit,w
  5638     035E  0086               	movwf	6
  5639     035F  0187               	clrf	7
  5640     0360  3145               	addfsr 1,5
  5641     0361  3001               	movlw	1
  5642     0362  0081               	movwf	1
  5643     0363                     i1l2142:
  5644                           
  5645                           ;main.c: 207:                 digit->g = 1;
  5646     0363  0870               	movf	i1SetSegments@digit,w
  5647     0364  0086               	movwf	6
  5648     0365  0187               	clrf	7
  5649     0366  3146               	addfsr 1,6
  5650     0367  3001               	movlw	1
  5651     0368  0081               	movwf	1
  5652                           
  5653                           ;main.c: 208:                 break;
  5654     0369  2C0B               	goto	i1l267
  5655     036A                     i1l2144:
  5656                           
  5657                           ;main.c: 211:                 digit->a = 1;
  5658     036A  0870               	movf	i1SetSegments@digit,w
  5659     036B  0086               	movwf	6
  5660     036C  0871               	movf	i1SetSegments@digit+1,w
  5661     036D  0087               	movwf	7
  5662     036E  3001               	movlw	1
  5663     036F  0081               	movwf	1
  5664                           
  5665                           ;main.c: 212:                 digit->b = 1;
  5666     0370  0870               	movf	i1SetSegments@digit,w
  5667     0371  0086               	movwf	6
  5668     0372  0187               	clrf	7
  5669     0373  3141               	addfsr 1,1
  5670     0374  3001               	movlw	1
  5671     0375  0081               	movwf	1
  5672                           
  5673                           ;main.c: 213:                 digit->c = 1;
  5674     0376  0870               	movf	i1SetSegments@digit,w
  5675     0377  0086               	movwf	6
  5676     0378  0187               	clrf	7
  5677     0379  3142               	addfsr 1,2
  5678     037A  3001               	movlw	1
  5679     037B  0081               	movwf	1
  5680     037C                     i1l2146:
  5681                           
  5682                           ;main.c: 214:                 digit->d = 0;
  5683     037C  0870               	movf	i1SetSegments@digit,w
  5684     037D  0086               	movwf	6
  5685     037E  0187               	clrf	7
  5686     037F  3143               	addfsr 1,3
  5687     0380  0181               	clrf	1
  5688     0381                     i1l2148:
  5689                           
  5690                           ;main.c: 215:                 digit->e = 0;
  5691     0381  0870               	movf	i1SetSegments@digit,w
  5692     0382  0086               	movwf	6
  5693     0383  0187               	clrf	7
  5694     0384  3144               	addfsr 1,4
  5695     0385  0181               	clrf	1
  5696     0386                     i1l2150:
  5697                           
  5698                           ;main.c: 216:                 digit->f = 0;
  5699     0386  0870               	movf	i1SetSegments@digit,w
  5700     0387  0086               	movwf	6
  5701     0388  0187               	clrf	7
  5702     0389  3145               	addfsr 1,5
  5703     038A  0181               	clrf	1
  5704     038B                     i1l2152:
  5705                           
  5706                           ;main.c: 217:                 digit->g = 0;
  5707     038B  0870               	movf	i1SetSegments@digit,w
  5708     038C  0086               	movwf	6
  5709     038D  0187               	clrf	7
  5710     038E  3146               	addfsr 1,6
  5711     038F  0181               	clrf	1
  5712                           
  5713                           ;main.c: 218:                 break;
  5714     0390  2C0B               	goto	i1l267
  5715     0391                     i1l2154:
  5716                           
  5717                           ;main.c: 221:                 digit->a = 1;
  5718     0391  0870               	movf	i1SetSegments@digit,w
  5719     0392  0086               	movwf	6
  5720     0393  0871               	movf	i1SetSegments@digit+1,w
  5721     0394  0087               	movwf	7
  5722     0395  3001               	movlw	1
  5723     0396  0081               	movwf	1
  5724                           
  5725                           ;main.c: 222:                 digit->b = 1;
  5726     0397  0870               	movf	i1SetSegments@digit,w
  5727     0398  0086               	movwf	6
  5728     0399  0187               	clrf	7
  5729     039A  3141               	addfsr 1,1
  5730     039B  3001               	movlw	1
  5731     039C  0081               	movwf	1
  5732                           
  5733                           ;main.c: 223:                 digit->c = 1;
  5734     039D  0870               	movf	i1SetSegments@digit,w
  5735     039E  0086               	movwf	6
  5736     039F  0187               	clrf	7
  5737     03A0  3142               	addfsr 1,2
  5738     03A1  3001               	movlw	1
  5739     03A2  0081               	movwf	1
  5740                           
  5741                           ;main.c: 224:                 digit->d = 1;
  5742     03A3  0870               	movf	i1SetSegments@digit,w
  5743     03A4  0086               	movwf	6
  5744     03A5  0187               	clrf	7
  5745     03A6  3143               	addfsr 1,3
  5746     03A7  3001               	movlw	1
  5747     03A8  0081               	movwf	1
  5748                           
  5749                           ;main.c: 225:                 digit->e = 1;
  5750     03A9  0870               	movf	i1SetSegments@digit,w
  5751     03AA  0086               	movwf	6
  5752     03AB  0187               	clrf	7
  5753     03AC  3144               	addfsr 1,4
  5754     03AD  3001               	movlw	1
  5755     03AE  0081               	movwf	1
  5756                           
  5757                           ;main.c: 226:                 digit->f = 1;
  5758     03AF  0870               	movf	i1SetSegments@digit,w
  5759     03B0  0086               	movwf	6
  5760     03B1  0187               	clrf	7
  5761     03B2  3145               	addfsr 1,5
  5762     03B3  3001               	movlw	1
  5763     03B4  0081               	movwf	1
  5764                           
  5765                           ;main.c: 227:                 digit->g = 1;
  5766     03B5  0870               	movf	i1SetSegments@digit,w
  5767     03B6  0086               	movwf	6
  5768     03B7  0187               	clrf	7
  5769     03B8  3146               	addfsr 1,6
  5770     03B9  3001               	movlw	1
  5771     03BA  0081               	movwf	1
  5772                           
  5773                           ;main.c: 228:                 break;
  5774     03BB  2C0B               	goto	i1l267
  5775     03BC                     i1l2156:
  5776                           
  5777                           ;main.c: 231:                 digit->a = 1;
  5778     03BC  0870               	movf	i1SetSegments@digit,w
  5779     03BD  0086               	movwf	6
  5780     03BE  0871               	movf	i1SetSegments@digit+1,w
  5781     03BF  0087               	movwf	7
  5782     03C0  3001               	movlw	1
  5783     03C1  0081               	movwf	1
  5784                           
  5785                           ;main.c: 232:                 digit->b = 1;
  5786     03C2  0870               	movf	i1SetSegments@digit,w
  5787     03C3  0086               	movwf	6
  5788     03C4  0187               	clrf	7
  5789     03C5  3141               	addfsr 1,1
  5790     03C6  3001               	movlw	1
  5791     03C7  0081               	movwf	1
  5792                           
  5793                           ;main.c: 233:                 digit->c = 1;
  5794     03C8  0870               	movf	i1SetSegments@digit,w
  5795     03C9  0086               	movwf	6
  5796     03CA  0187               	clrf	7
  5797     03CB  3142               	addfsr 1,2
  5798     03CC  3001               	movlw	1
  5799     03CD  0081               	movwf	1
  5800                           
  5801                           ;main.c: 234:                 digit->d = 1;
  5802     03CE  0870               	movf	i1SetSegments@digit,w
  5803     03CF  0086               	movwf	6
  5804     03D0  0187               	clrf	7
  5805     03D1  3143               	addfsr 1,3
  5806     03D2  3001               	movlw	1
  5807     03D3  0081               	movwf	1
  5808     03D4                     i1l2158:
  5809                           
  5810                           ;main.c: 235:                 digit->e = 0;
  5811     03D4  0870               	movf	i1SetSegments@digit,w
  5812     03D5  0086               	movwf	6
  5813     03D6  0187               	clrf	7
  5814     03D7  3144               	addfsr 1,4
  5815     03D8  0181               	clrf	1
  5816     03D9                     i1l2160:
  5817                           
  5818                           ;main.c: 236:                 digit->f = 1;
  5819     03D9  0870               	movf	i1SetSegments@digit,w
  5820     03DA  0086               	movwf	6
  5821     03DB  0187               	clrf	7
  5822     03DC  3145               	addfsr 1,5
  5823     03DD  3001               	movlw	1
  5824     03DE  0081               	movwf	1
  5825     03DF                     i1l2162:
  5826                           
  5827                           ;main.c: 237:                 digit->g = 1;
  5828     03DF  0870               	movf	i1SetSegments@digit,w
  5829     03E0  0086               	movwf	6
  5830     03E1  0187               	clrf	7
  5831     03E2  3146               	addfsr 1,6
  5832     03E3  3001               	movlw	1
  5833     03E4  0081               	movwf	1
  5834                           
  5835                           ;main.c: 238:                 break;
  5836     03E5  2C0B               	goto	i1l267
  5837     03E6                     i1l2166:
  5838                           
  5839                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  5840                           ; Switch size 1, requested type "simple"
  5841                           ; Number of cases is 1, Range of values is 0 to 0
  5842                           ; switch strategies available:
  5843                           ; Name         Instructions Cycles
  5844                           ; simple_byte            4     3 (average)
  5845                           ; direct_byte            8     6 (fixed)
  5846                           ; jumptable            260     6 (fixed)
  5847                           ;	Chosen strategy is simple_byte
  5848     03E6  0873               	movf	i1SetSegments@a+1,w
  5849     03E7  3A00               	xorlw	0	; case 0
  5850     03E8  1903               	skipnz
  5851     03E9  2BEB               	goto	i1l2500
  5852     03EA  2C0B               	goto	i1l267
  5853     03EB                     i1l2500:
  5854                           
  5855                           ; Switch size 1, requested type "simple"
  5856                           ; Number of cases is 10, Range of values is 0 to 9
  5857                           ; switch strategies available:
  5858                           ; Name         Instructions Cycles
  5859                           ; direct_byte           26     6 (fixed)
  5860                           ; simple_byte           31    16 (average)
  5861                           ; jumptable            260     6 (fixed)
  5862                           ;	Chosen strategy is simple_byte
  5863     03EB  0872               	movf	i1SetSegments@a,w
  5864     03EC  3A00               	xorlw	0	; case 0
  5865     03ED  1903               	skipnz
  5866     03EE  2A4D               	goto	i1l2084
  5867     03EF  3A01               	xorlw	1	; case 1
  5868     03F0  1903               	skipnz
  5869     03F1  2A77               	goto	i1l2088
  5870     03F2  3A03               	xorlw	3	; case 2
  5871     03F3  1903               	skipnz
  5872     03F4  2A9D               	goto	i1l2094
  5873     03F5  3A01               	xorlw	1	; case 3
  5874     03F6  1903               	skipnz
  5875     03F7  2AC6               	goto	i1l2104
  5876     03F8  3A07               	xorlw	7	; case 4
  5877     03F9  1903               	skipnz
  5878     03FA  2AEF               	goto	i1l2110
  5879     03FB  3A01               	xorlw	1	; case 5
  5880     03FC  1903               	skipnz
  5881     03FD  2B17               	goto	i1l2120
  5882     03FE  3A03               	xorlw	3	; case 6
  5883     03FF  1903               	skipnz
  5884     0400  2B40               	goto	i1l2130
  5885     0401  3A01               	xorlw	1	; case 7
  5886     0402  1903               	skipnz
  5887     0403  2B6A               	goto	i1l2144
  5888     0404  3A0F               	xorlw	15	; case 8
  5889     0405  1903               	skipnz
  5890     0406  2B91               	goto	i1l2154
  5891     0407  3A01               	xorlw	1	; case 9
  5892     0408  1903               	skipnz
  5893     0409  2BBC               	goto	i1l2156
  5894     040A  2C0B               	goto	i1l267
  5895     040B                     i1l267:
  5896     040B  0008               	return
  5897     040C                     __end_ofi1_SetSegments:
  5898     0002                     ___latbits      equ	2
  5899     007E                     btemp           set	126	;btemp
  5900     007E                     int$flags       set	126
  5901     007E                     btemp0          set	126
  5902     007F                     btemp1          set	127
  5903     007E                     wtemp0          set	126
  5904     007F                     wtemp0a         set	127
  5905     007F                     ttemp0a         set	127
  5906     0080                     ltemp0a         set	128
  5907                           
  5908                           	psect	idloc
  5909                           
  5910                           ;Config register IDLOC0 @ 0x8000
  5911                           ;	unspecified, using default values
  5912     8000                     	org	32768
  5913     8000  3FFF               	dw	16383
  5914                           
  5915                           ;Config register IDLOC1 @ 0x8001
  5916                           ;	unspecified, using default values
  5917     8001                     	org	32769
  5918     8001  3FFF               	dw	16383
  5919                           
  5920                           ;Config register IDLOC2 @ 0x8002
  5921                           ;	unspecified, using default values
  5922     8002                     	org	32770
  5923     8002  3FFF               	dw	16383
  5924                           
  5925                           ;Config register IDLOC3 @ 0x8003
  5926                           ;	unspecified, using default values
  5927     8003                     	org	32771
  5928     8003  3FFF               	dw	16383
  5929                           
  5930                           	psect	config
  5931                           
  5932                           ;Config register CONFIG1 @ 0x8007
  5933                           ;	Oscillator Selection Bits
  5934                           ;	FOSC = INTOSC, INTOSC oscillator: I/O function on CLKIN pin
  5935                           ;	Watchdog Timer Enable
  5936                           ;	WDTE = OFF, WDT disabled
  5937                           ;	Power-up Timer Enable
  5938                           ;	PWRTE = OFF, PWRT disabled
  5939                           ;	MCLR Pin Function Select
  5940                           ;	MCLRE = OFF, MCLR/VPP pin function is digital input
  5941                           ;	Flash Program Memory Code Protection
  5942                           ;	CP = OFF, Program memory code protection is disabled
  5943                           ;	Brown-out Reset Enable
  5944                           ;	BOREN = ON, Brown-out Reset enabled
  5945                           ;	Clock Out Enable
  5946                           ;	CLKOUTEN = OFF, CLKOUT function is disabled. I/O or oscillator function on the CLKOUT 
      +                          pin
  5947                           ;	Internal/External Switchover Mode
  5948                           ;	IESO = ON, Internal/External Switchover Mode is enabled
  5949                           ;	Fail-Safe Clock Monitor Enable
  5950                           ;	FCMEN = ON, Fail-Safe Clock Monitor is enabled
  5951     8007                     	org	32775
  5952     8007  3FA4               	dw	16292
  5953                           
  5954                           ;Config register CONFIG2 @ 0x8008
  5955                           ;	Flash Memory Self-Write Protection
  5956                           ;	WRT = OFF, Write protection off
  5957                           ;	Stack Overflow/Underflow Reset Enable
  5958                           ;	STVREN = ON, Stack Overflow or Underflow will cause a Reset
  5959                           ;	Brown-out Reset Voltage Selection
  5960                           ;	BORV = LO, Brown-out Reset Voltage (Vbor), low trip point selected.
  5961                           ;	Low-Power Brown Out Reset
  5962                           ;	LPBOR = OFF, Low-Power BOR is disabled
  5963                           ;	Low-Voltage Programming Enable
  5964                           ;	LVP = ON, Low-voltage programming enabled
  5965     8008                     	org	32776
  5966     8008  3FFF               	dw	16383

Data Sizes:
    Strings     0
    Constant    12
    Data        1
    BSS         27
    Persistent  54
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14     14      14
    BANK0            80     32      66
    BANK1            80     12      12
    BANK2            80      0       0
    BANK3            80      0       0
    BANK4            80      0       0
    BANK5            80      0       0
    BANK6            16      0       0

Pointer List with Targets:

    INT_InterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> INT_DefaultInterruptHandler(), NULL(), 

    INT_SetInterruptHandler@InterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> INT_DefaultInterruptHandler(), 

    IO_RA0_InterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> IO_RA0_DefaultInterruptHandler(), RA0Isr(), NULL(), 

    IO_RA0_SetInterruptHandler@InterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> IO_RA0_DefaultInterruptHandler(), RA0Isr(), 

    S330$4$0	PTR FTN()void  size(2) Largest target is 1
		 -> TMR1_DefaultOverflowCallback(), Tmr1CallBack(), 

    S330TMR_INTERFACE$Initialize	PTR FTN()void  size(2) Largest target is 1
		 -> TMR1_Initialize(), 

    S330TMR_INTERFACE$PeriodCountSet	PTR FTN(unsigned int ,)void  size(2) Largest target is 1
		 -> TMR1_PeriodCountSet(), 

    S330TMR_INTERFACE$Start	PTR FTN()void  size(2) Largest target is 1
		 -> TMR1_Start(), 

    S330TMR_INTERFACE$Stop	PTR FTN()void  size(2) Largest target is 1
		 -> TMR1_Stop(), 

    S330TMR_INTERFACE$Tasks	PTR FTN()void  size(2) Largest target is 1
		 -> NULL(), 

    S330TMR_INTERFACE$TimeoutCallbackRegister	PTR FTN(PTR FTN()void ,)void  size(2) Largest target is 1
		 -> TMR1_OverflowCallbackRegister(), 

    SetSegments@digit	PTR struct digit size(2) Largest target is 7
		 -> hundred(BANK0[7]), one(BANK0[7]), ten(BANK0[7]), 

    tmr1$Initialize	PTR FTN()void  size(2) Largest target is 1
		 -> TMR1_Initialize(), 

    tmr1$PeriodCountSet	PTR FTN(unsigned int ,)void  size(2) Largest target is 1
		 -> TMR1_PeriodCountSet(), 

    tmr1$Start	PTR FTN()void  size(2) Largest target is 1
		 -> TMR1_Start(), 

    tmr1$Stop	PTR FTN()void  size(2) Largest target is 1
		 -> TMR1_Stop(), 

    tmr1$Tasks	PTR FTN()void  size(2) Largest target is 1
		 -> NULL(), 

    tmr1$TimeoutCallbackRegister	PTR FTN(PTR FTN()void ,)void  size(2) Largest target is 1
		 -> TMR1_OverflowCallbackRegister(), 

    TMR1_InterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> NULL(), 

    TMR1_OverflowCallback	PTR FTN()void  size(2) Largest target is 1
		 -> TMR1_DefaultOverflowCallback(), Tmr1CallBack(), NULL(), 

    TMR1_OverflowCallbackRegister@CallbackHandler	PTR FTN()void  size(2) Largest target is 1
		 -> TMR1_DefaultOverflowCallback(), Tmr1CallBack(), 


Critical Paths under _main in COMMON

    None.

Critical Paths under _INTERRUPT_InterruptManager in COMMON

    i1_Display->i1___awmod
    i1___awmod->i1___awdiv

Critical Paths under _main in BANK0

    _main->_Display
    _TMR1_Initialize->_TMR1_OverflowCallbackRegister
    _PIN_MANAGER_Initialize->_IO_RA0_SetInterruptHandler
    _INTERRUPT_Initialize->_INT_SetInterruptHandler
    _Display->___awmod
    ___awmod->___awdiv

Critical Paths under _INTERRUPT_InterruptManager in BANK0

    _TMR1_OverflowISR->_Tmr1CallBack
    _Tmr1CallBack->i1_Display
    _IO_RA0_ISR->_RA0Isr
    _RA0Isr->i1_Display

Critical Paths under _main in BANK1

    _main->_Display

Critical Paths under _INTERRUPT_InterruptManager in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK6

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 5     5      0    3791
                                             30 BANK0      2     2      0
                                              9 BANK1      3     3      0
                            _Display
         _IO_RA0_SetInterruptHandler
                  _SYSTEM_Initialize
      _TMR1_OverflowCallbackRegister
 ---------------------------------------------------------------------------------
 (1) _SYSTEM_Initialize                                    0     0      0      71
                   _CLOCK_Initialize
               _INTERRUPT_Initialize
             _PIN_MANAGER_Initialize
                    _TMR1_Initialize
 ---------------------------------------------------------------------------------
 (2) _TMR1_Initialize                                      0     0      0      24
      _TMR1_OverflowCallbackRegister
 ---------------------------------------------------------------------------------
 (3) _TMR1_OverflowCallbackRegister                        2     0      2      24
                                             14 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 (2) _PIN_MANAGER_Initialize                               0     0      0      24
         _IO_RA0_SetInterruptHandler
 ---------------------------------------------------------------------------------
 (3) _IO_RA0_SetInterruptHandler                           2     0      2      24
                                             14 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 (2) _INTERRUPT_Initialize                                 0     0      0      23
            _INT_SetInterruptHandler
 ---------------------------------------------------------------------------------
 (3) _INT_SetInterruptHandler                              2     0      2      23
                                             14 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 (2) _CLOCK_Initialize                                     0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Display                                             11     9      2    3607
                                             28 BANK0      2     0      2
                                              0 BANK1      9     9      0
                        _SetSegments
                            ___awdiv
                            ___awmod
 ---------------------------------------------------------------------------------
 (2) ___awmod                                              6     2      4     445
                                             22 BANK0      6     2      4
                            ___awdiv (ARG)
 ---------------------------------------------------------------------------------
 (2) ___awdiv                                              8     4      4     451
                                             14 BANK0      8     4      4
 ---------------------------------------------------------------------------------
 (2) _SetSegments                                          5     0      5    2476
                                             14 BANK0      5     0      5
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 3
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (4) _INTERRUPT_InterruptManager                           0     0      0    6747
                    _PIN_MANAGER_IOC
                   _TMR1_OverflowISR
 ---------------------------------------------------------------------------------
 (5) _TMR1_OverflowISR                                     0     0      0    3437
                                NULL *
       _TMR1_DefaultOverflowCallback *
                         _TMR1_Write
                       _Tmr1CallBack *
 ---------------------------------------------------------------------------------
 (6) _Tmr1CallBack                                         3     3      0    3347
                                             11 BANK0      3     3      0
                          i1_Display
 ---------------------------------------------------------------------------------
 (6) _TMR1_Write                                           2     0      2      90
                                              0 COMMON     2     0      2
 ---------------------------------------------------------------------------------
 (6) _TMR1_DefaultOverflowCallback                         0     0      0       0
 ---------------------------------------------------------------------------------
 (5) _PIN_MANAGER_IOC                                      0     0      0    3310
                         _IO_RA0_ISR
 ---------------------------------------------------------------------------------
 (6) _IO_RA0_ISR                                           0     0      0    3310
                                NULL *
     _IO_RA0_DefaultInterruptHandler *
                             _RA0Isr *
 ---------------------------------------------------------------------------------
 (7) _RA0Isr                                               2     2      0    3310
                                             11 BANK0      2     2      0
                          i1_Display
 ---------------------------------------------------------------------------------
 (8) i1_Display                                           11     9      2    3310
                                              0 BANK0     11     9      2
                      i1_SetSegments
                          i1___awdiv
                          i1___awmod
 ---------------------------------------------------------------------------------
 (9) i1___awmod                                            6     2      4     300
                                              8 COMMON     6     2      4
                          i1___awdiv (ARG)
 ---------------------------------------------------------------------------------
 (9) i1___awdiv                                            8     4      4     302
                                              0 COMMON     8     4      4
 ---------------------------------------------------------------------------------
 (9) i1_SetSegments                                        5     0      5    2476
                                              0 COMMON     5     0      5
 ---------------------------------------------------------------------------------
 (7) _IO_RA0_DefaultInterruptHandler                       0     0      0       0
 ---------------------------------------------------------------------------------
 (7) NULL(Fake)                                            0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 9
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _Display
     _SetSegments
     ___awdiv
     ___awmod
       ___awdiv (ARG)
   _IO_RA0_SetInterruptHandler
   _SYSTEM_Initialize
     _CLOCK_Initialize
     _INTERRUPT_Initialize
       _INT_SetInterruptHandler
     _PIN_MANAGER_Initialize
       _IO_RA0_SetInterruptHandler
     _TMR1_Initialize
       _TMR1_OverflowCallbackRegister
   _TMR1_OverflowCallbackRegister

 _INTERRUPT_InterruptManager (ROOT)
   _PIN_MANAGER_IOC
     _IO_RA0_ISR
       NULL(Fake) *
       _IO_RA0_DefaultInterruptHandler *
       _RA0Isr *
         i1_Display
           i1_SetSegments
           i1___awdiv
           i1___awmod
             i1___awdiv (ARG)
   _TMR1_OverflowISR
     NULL(Fake) *
     _TMR1_DefaultOverflowCallback *
     _TMR1_Write *
     _Tmr1CallBack *
       i1_Display

Address spaces:
Name               Size   Autos  Total    Usage
BITCOMMON           14      0       0      0.0%
BITBANK0            80      0       0      0.0%
BITBANK1            80      0       0      0.0%
BITBANK2            80      0       0      0.0%
BITBANK3            80      0       0      0.0%
BITBANK4            80      0       0      0.0%
BITBANK5            80      0       0      0.0%
BITBANK6            16      0       0      0.0%
BIGRAM             496      0       0      0.0%
COMMON              14     14      14    100.0%
BANK0               80     32      66     82.5%
BANK1               80     12      12     15.0%
BANK2               80      0       0      0.0%
BANK3               80      0       0      0.0%
BANK4               80      0       0      0.0%
BANK5               80      0       0      0.0%
BANK6               16      0       0      0.0%
STACK                0      0       0      0.0%
DATA                 0      0      92      0.0%


Microchip Technology PIC Macro Assembler V3.10 build 20250813170317 
Symbol Table                                                                                   Fri Sep  5 12:07:39 2025

                                           l7 0F61                                            l58 07F2  
                                          l83 07FF                                            l69 0F6D  
                                ___awdiv@sign 0033                                           l106 0F8E  
                                         l202 0F73                                           l127 0F67  
                                         l270 056A                                           l280 05AD  
                                         l169 0FDD                                           l267 0223  
                                         l470 077C                                           l279 059F  
                                         l457 06CF                                           _RA0 0060  
                             _timer1ReloadVal 0042                                           _one 0054  
                                         _ten 004D                                  ___awmod@sign 003B  
                                         wreg 0009                                          l2300 01F1  
                                        l2220 003B                                          l2302 01F7  
                                        l2230 0094                                          l2222 0041  
                                        l2240 00CC                                          l2232 009A  
                                        l2224 0065                                          l2320 0681  
                                        l2312 0674                                          l2250 0107  
                                        l2242 00D2                                          l2234 00B5  
                                        l2226 0089                                          l2306 01FE  
                                        l2330 0694                                          l2322 0685  
                                        l2314 0676                                          l2410 0525  
                                        l2260 012F                                          l2252 010C  
                                        l2244 00DE                                          l2236 00C1  
                                        l2228 008F                                          l2340 06B1  
                                        l2332 0697                                          l2324 068A  
                                        l2316 067A                                          l2412 0536  
                                        l1700 0F5C                                          l2270 0158  
                                        l2262 0135                                          l2254 0112  
                                        l2246 00F6                                          l2238 00C6  
                                        l2350 06C6                                          l2342 06B5  
                                        l2334 069C                                          l2326 068C  
                                        l2318 067F                                          l2414 0559  
                                        l2406 04D8                                          l1702 0F5F  
                                        l1710 07DF                                          l2430 056E  
                                        l2280 0175                                          l2272 015E  
                                        l2264 013A                                          l2256 0122  
                                        l2248 00FB                                          l2352 06CB  
                                        l2344 06B6                                          l2336 069E  
                                        l2328 068E                                          l2360 0731  
                                        l2408 050C                                          l1712 07E3  
                                        l1704 07CE                                          l2440 058F  
                                        l2432 0570                                          l2290 019E  
                                        l2282 017B                                          l2274 0163  
                                        l2266 0140                                          l2258 0128  
                                        l2346 06BB                                          l2338 06A2  
                                        l2370 0747                                          l2362 0736  
                                        l1714 07E9                                          l1706 07D2  
                                        l1730 0FCB                                          l2450 05CC  
                                        l2442 0590                                          l2434 057E  
                                        l2292 01A3                                          l2284 0182  
                                        l2276 0169                                          l2268 0146  
                                        l2348 06C1                                          l2380 075F  
                                        l2372 074A                                          l2364 0738  
                                        l2356 072B                                          l1740 0F83  
                                        l1716 07F1                                          l1708 07DB  
                                        l1732 0FCF                                          l1724 0FC5  
                                        l2452 05DC                                          l2444 05A0  
                                        l2436 0586                                          l2428 056B  
                                        l2294 01A9                                          l2286 0194  
                                        l2278 016F                                          l2390 0778  
                                        l2382 0763                                          l2374 074F  
                                        l2366 073C                                          l2358 072D  
                                        l1742 0F86                                          l1734 0FD6  
                                        l1726 0FC7                                          l2454 05DE  
                                        l2446 05A4                                          l2438 058E  
                                        l2296 01D4                                          l2288 0199  
                                        l2384 0768                                          l2376 0751  
                                        l2368 0741                                          l1736 0FD8  
                                        l1728 0FC9                                          l2456 05EC  
                                        l2448 05C7                                          l2298 01EC  
                                        l2378 0755                                          l2386 076E  
                                        l1738 0FDA                                          l2388 0773  
                                        l1684 0F68                                          l1686 0F62  
                                        l1688 0F6E                                          l1960 07F6  
                                        l2498 0203                                          l1962 07F9  
                                        l1964 07FC                                          l1958 07F3  
                                        u1500 0041                                          u1501 0040  
                                        _LATA 010C                                          u1510 067A  
                                        _LATB 010D                                          u1511 0679  
                                        _LATC 010E                                          u1600 06C6  
                                        u1520 0685                                          u1601 06C5  
                                        u1521 0684                                          u1530 0694  
                                        u1610 0731                                          u1531 0693  
                                        u1611 0730                                          u1620 073C  
                                        u1621 073B                                          u1550 06A2  
                                        u1630 0747                                          u1551 06A1  
                                        u1631 0746                                          u1720 051D  
                                        u1545 0698                                          u1721 051B  
                                        u1570 06B1                                          u1650 0755  
                                        u1730 051E                                          u1810 05C7  
                                        u1571 06B0                                          u1651 0754  
                                        u1811 05C6                                          u1660 075F  
                                        u1740 0553                                          u1820 05CC  
                                        u1565 06A3                                          u1661 075E  
                                        u1645 074B                                          u1741 0551  
                                        u1725 0518                                          u1821 05CB  
                                        u1590 06C1                                          u1750 0554  
                                        u1830 05DC                                          u1591 06C0  
                                        u1575 06AD                                          u1831 05DB  
                                        u1815 05C3                                          u1680 076E  
                                        u1585 06B7                                          u1681 076D  
                                        u1665 075B                                          u1745 054E  
                                        u1690 0773                                          u1691 0772  
                                        u1675 0764                                          u1835 05D8  
                                        u1847 05A8                                          u1857 05F2  
                                        i1l62 0F82                                          i1l72 0F5B  
                                        i1l66 0F9D                                          _WPUA 020C  
                                        _WPUB 020D                                   ?_IO_RA0_ISR 0070  
                                        _main 056B                                          _tmr1 1000  
                                        fsr0h 0005                                          fsr1h 0007  
                                        indf0 0000                                          fsr0l 0004  
                                        indf1 0001                                          fsr1l 0006  
                                        btemp 007E                   _INT_DefaultInterruptHandler 0000  
                                 main@timeout 003E                                          start 0029  
             __end_of_INT_SetInterruptHandler 0F68                               __end_of_Display 056B  
                           i1Display@hundreds 0029                ??_TMR1_DefaultOverflowCallback 0070  
                                       ?_main 0070                                i1___awdiv@sign 0075  
                             ??i1_SetSegments 0075                               __end_of___awdiv 06D0  
                             __end_of___awmod 077D                               ___awdiv@divisor 002E  
                                       _T1CON 0018                                         _IOCAF 0393  
                                       _IOCBF 0396                                         _IOCAN 0392  
                                       _IOCAP 0391                                         _IOCBN 0395  
                                       _IOCBP 0394                                         i1l111 0016  
                                       i1l205 0002                                         i1l117 0027  
                                       i1l250 04D7                                         i1l270 0673  
                                       i1l183 0FAE                                         i1l274 0FFF  
                                       i1l267 040B                                         i1l470 07CD  
                                       i1l199 0FC4                                         i1l457 072A  
                             ___awdiv@counter 0032                                         _TMR1H 0017  
                                       _TMR1L 0016                                         u70_20 06D5  
                                       u70_21 06D4                                         u71_20 06E0  
                                       u71_21 06DF                                         u72_20 06EF  
                                       u80_20 0782                                         u72_21 06EE  
                                       u80_21 0781                                         u81_20 078D  
                                       u81_21 078C                                         _TRISA 008C  
                                       _TRISB 008D                                         u73_25 06F3  
                                       _TRISC 008E                                         u74_20 06FD  
                                       u82_20 0798                                         u74_21 06FC  
                                       u82_21 0797                                         u75_25 06FE  
                                       u83_25 079C                                         u76_20 070C  
                                       u84_20 07A6                                         u76_21 070B  
                                       u84_21 07A5                                         u76_25 0708  
                                       u85_20 07B0                                         u85_21 07AF  
                                       u77_25 0712                                         u85_25 07AC  
                                       u78_20 071C                                         u78_21 071B  
                                       u86_25 07B5                                         u79_20 0721  
                                       u87_20 07BF                                         u95_20 0FA3  
                                       u79_21 0720                                         u87_21 07BE  
                                       u95_21 0FA2                                         u88_20 07C4  
                                       u88_21 07C3                                i1___awmod@sign 007D  
                     __end_of_PIN_MANAGER_IOC 0F83                                   ?_TMR1_Write 0070  
                                       btemp0 007E                                         btemp1 007F  
                     __end_of_TMR1_Initialize 0FDE                                         pclath 000A  
                                       status 0003                                         wtemp0 007E  
                             __initialization 002B                                  __end_of_main 05FC  
                                __end_of_tmr1 100C                              _TMR1_OverflowISR 0FAF  
                 ?_INTERRUPT_InterruptManager 0070                                        ??_main 00A9  
                               ??_SetSegments 0033                              ___awdiv@dividend 0030  
       __end_of_TMR1_OverflowCallbackRegister 0F74                 _TMR1_OverflowCallbackRegister 0F6E  
                                      _ANSELA 018C                                        _ANSELB 018D  
                                      _ANSELC 018E                                 ?_Tmr1CallBack 0070  
                                      _BORCON 0116                                        _T1GCON 0019  
                                      i1l2100 02B4                                        i1l2110 02EF  
                                      i1l2102 02BA                                        i1l2120 0317  
                                      i1l2112 02F4                                        i1l2104 02C6  
                                      i1l2200 0410                                        i1l2130 0340  
                                      i1l2122 031D                                        i1l2114 02FA  
                                      i1l2106 02DE                                        i1l2210 042A  
                                      i1l2202 0416                                        i1l2140 035D  
                                      i1l2132 0346                                        i1l2124 0322  
                                      i1l2116 030A                                        i1l2108 02E3  
                                      i1l2212 042F                                        i1l2204 041B  
                                      _RA0Isr 0FDE                                        i1l2150 0386  
                                      i1l2142 0363                                        i1l2134 034B  
                                      i1l2126 0328                                        i1l2118 0310  
                                      i1l2206 0420                                        i1l2214 0431  
                                      i1l2160 03D9                                        i1l2152 038B  
                                      i1l2144 036A                                        i1l2136 0351  
                                      i1l2128 032E                                        i1l2080 0224  
                                      i1l1600 06DC                                        i1l2216 04CA  
                                      i1l2208 0425                                        i1l2400 0FB1  
                                      i1l2162 03DF                                        i1l2154 0391  
                                      i1l2146 037C                                        i1l2138 0357  
                                      i1l2090 027C                                        i1l2082 0229  
                                      i1l1610 06EF                                        i1l1602 06E0  
                                      i1l2218 04CB                                        i1l2402 0FB8  
                                      i1l2500 03EB                                        i1l2156 03BC  
                                      i1l2148 0381                                        i1l2092 0282  
                                      i1l2084 024D                                        i1l1620 070C  
                                      i1l1612 06F2                                        i1l1604 06E5  
                                      i1l2180 0666                                        i1l2172 05FC  
                                      i1l2404 0FBF                                        i1l2420 0012  
                                      i1l2158 03D4                                        i1l2094 029D  
                                      i1l2086 0271                                        i1l2166 03E6  
                                      i1l1630 0721                                        i1l1622 0710  
                                      i1l1614 06F7                                        i1l1606 06E7  
                                      i1l2174 0628                                        i1l2190 0FF2  
                                      i1l2182 0FDE                                        i1l2422 001A  
                                      i1l2096 02A9                                        i1l2088 0277  
                                      i1l1632 0726                                        i1l1624 0711  
                                      i1l1616 06F9                                        i1l1608 06E9  
                                      i1l1640 0782                                        i1l2176 063E  
                                      i1l2184 0FE1                                        i1l2192 0F8F  
                                      i1l2424 001F                                        i1l2416 000A  
                                      i1l2098 02AE                                        i1l1626 0716  
                                      i1l1618 06FD                                        i1l1650 0798  
                                      i1l1642 0787                                        i1l2178 064A  
                                      i1l2186 0FE7                                        i1l2194 0F96  
                                      i1l2426 0024                                        i1l2418 000E  
                                      i1l1628 071C                                        i1l1660 07B0  
                                      i1l1652 079B                                        i1l1644 0789  
                                      i1l1636 077D                                        i1l2188 0FE8  
                                      i1l2196 0F9B                                        i1l1670 07C9  
                                      i1l1662 07B4                                        i1l1654 07A0  
                                      i1l1646 078D                                        i1l1638 077E  
                                      i1l1750 0FA6                                        i1l2198 040C  
                                      i1l1592 06D0                                        i1l1664 07B9  
                                      i1l1656 07A2                                        i1l1648 0792  
                                      i1l1752 0FA8                                        i1l1744 0F9E  
                                      i1l1594 06D1                                        i1l1658 07A6  
                                      i1l1666 07BF                                        i1l2394 0F7A  
                                      i1l1746 0FA3                                        i1l1754 0FAA  
                                      i1l1596 06D5                                        i1l1668 07C4  
                                      i1l2396 0F7F                                        i1l1756 0FAC  
                                      i1l1748 0FA4                                        i1l1598 06DA  
                                      i1l2398 0FAF                                        u140_20 0661  
                                      u140_21 065F                                        u140_25 065C  
                                      u141_20 0662                                        u142_20 0FE7  
                                      u142_21 0FE6                                        u143_20 0F96  
                                      u143_21 0F95                                        u144_20 041B  
                                      u144_21 041A                                        u137_20 0229  
                                      u145_20 0420                                        u137_21 0228  
                                      u145_21 041F                                        u138_20 0636  
                                      u170_20 0F7F                                        u146_20 0425  
                                      u138_21 0634                                        u170_21 0F7E  
                                      u146_21 0424                                        u138_25 0631  
                                      u139_20 0637                                        u147_20 042A  
                                      u171_20 0FBF                                        u147_21 0429  
                                      u171_21 0FBE                                        u148_20 042F  
                                      u180_20 0024                                        u148_21 042E  
                                      u180_21 0023                                        u149_20 04CA  
                                      u149_21 04C9                                        u176_20 000E  
                                      u176_21 000D                                        u177_20 0012  
                                      u177_21 0011                                        u178_20 001A  
                                      u178_21 0019                                        u186_27 0FF8  
                                      u179_20 001F                                        u179_21 001E  
                                      _OSCCON 0099                                     ??_Display 00A0  
                           __end_ofi1_Display 0674                                     ??___awdiv 0032  
                                   ??___awmod 003A                              ___awdiv@quotient 0034  
                             ___awmod@divisor 0036                               ___awmod@counter 003A  
                                      _toggle 0045                             ?_CLOCK_Initialize 0070  
                           __end_ofi1___awdiv 072B                             __end_ofi1___awmod 07CE  
                          ??_CLOCK_Initialize 002E                                        ltemp0a 0080  
                            SetSegments@blank 0032                              SetSegments@digit 002E  
                                      ttemp0a 007F       INT_SetInterruptHandler@InterruptHandler 002E  
  IO_RA0_SetInterruptHandler@InterruptHandler 002E                              ?_PIN_MANAGER_IOC 0070  
                              ??_Tmr1CallBack 002B                                        wtemp0a 007F  
                         __end_of_SetSegments 0224                              ?_TMR1_Initialize 0070  
                           _SYSTEM_Initialize 07F3                       __end_of__initialization 0037  
                          ?_SYSTEM_Initialize 0070                                __pcstackCOMMON 0070  
                                __pidataBANK0 0003                           ??_SYSTEM_Initialize 0030  
                              _OPTION_REGbits 0095                     __end_of_SYSTEM_Initialize 0800  
                ??_IO_RA0_SetInterruptHandler 0030                                    __pbssBANK0 0040  
                                     ?_RA0Isr 0070                                  ??_IO_RA0_ISR 007E  
              ?_TMR1_OverflowCallbackRegister 002E                                    __pmaintext 056B  
                                  __pintentry 0004                            i1___awdiv@dividend 0072  
                          __end_of_IO_RA0_ISR 0F9E                                   _SetSegments 003B  
                         _TMR1_PeriodCountSet 0000                                  ??_TMR1_Write 0072  
                    __end_of_TMR1_OverflowISR 0FC5                                       _Display 04D8  
                          i1___awdiv@quotient 0076                                       ___awdiv 0674  
                                     ___awmod 072B                          __end_of_Tmr1CallBack 04D8  
                          __end_of_TMR1_Write 0FAF                            i1SetSegments@blank 0074  
                          i1SetSegments@digit 0070                                       __ptext1 07F3  
                                     __ptext2 0FC5                                       __ptext3 0F6E  
                                     __ptext4 07CE                                       __ptext5 0F68  
                                     __ptext6 0F83                                       __ptext7 0F62  
                                     __ptext8 0F5C                                       __ptext9 04D8  
                                   _T1CONbits 0018                                       _counter 0044  
                       __end_ofi1_SetSegments 040C                              ___awmod@dividend 0038  
                                     _hundred 0046                      ??_PIN_MANAGER_Initialize 0030  
                                   _IOCAFbits 0393                       _INT_SetInterruptHandler 0F62  
                                     clrloop0 0F75                          end_of_initialization 0037  
                             Display@hundreds 00A7                                     i1_Display 05FC  
                                   _PORTAbits 000C                                     _PORTBbits 000D  
                                   _PORTCbits 000E                                     _TMR1_Stop 0000  
                       _TMR1_OverflowCallback 005B              ??_IO_RA0_DefaultInterruptHandler 0070  
             ?_IO_RA0_DefaultInterruptHandler 0070  TMR1_OverflowCallbackRegister@CallbackHandler 002E  
                                   i1___awdiv 06D0                                     i1___awmod 077D  
                               i1Display@ones 0025                                 i1Display@tens 0027  
          __end_of_IO_RA0_SetInterruptHandler 0F6E                    _IO_RA0_SetInterruptHandler 0F68  
                     _IO_RA0_InterruptHandler 005F                                __end_of_RA0Isr 1000  
                __end_of_INTERRUPT_Initialize 0F8F                                    ?i1_Display 0020  
                   ??_INT_SetInterruptHandler 0030                           start_initialization 002B  
                                  ?i1___awdiv 0070                                    ?i1___awmod 0078  
                          TMR1_Write@timerVal 0070                                  SetSegments@a 0030  
                                    ??_RA0Isr 002B                                   __pdataBANK0 0061  
                          i1___awmod@dividend 007A               ??_TMR1_OverflowCallbackRegister 0030  
                                ?_SetSegments 002E                             _Tmr1CallBack$1119 002D  
                                   ___latbits 0002                                 __pcstackBANK0 0020  
                               __pcstackBANK1 00A0                             ?_TMR1_OverflowISR 0070  
                                _Tmr1CallBack 040C                                i1SetSegments@a 0072  
                          ??_TMR1_OverflowISR 007E                                      ?_Display 003C  
                                   __pnvBANK0 005B                        _PIN_MANAGER_Initialize 07CE  
                                    ?___awdiv 002E                                      ?___awmod 0036  
                           i1___awdiv@divisor 0070                             i1___awdiv@counter 0074  
                                 ??i1_Display 0022                  ??_INTERRUPT_InterruptManager 007E  
                                 ??i1___awdiv 0074                                   ??i1___awmod 007C  
                        _INTERRUPT_Initialize 0F83                              _CLOCK_Initialize 0F5C  
                                    _RA0Value 0061                                     clear_ram0 0F74  
                                    _PIE1bits 0091                                      _PIR1bits 0011  
                           ??_PIN_MANAGER_IOC 007E                                      Display@a 003C  
                           ??_TMR1_Initialize 0030                   ?_IO_RA0_SetInterruptHandler 002E  
                       ?_INTERRUPT_Initialize 0070        __end_of_IO_RA0_DefaultInterruptHandler 0F5C  
              _IO_RA0_DefaultInterruptHandler 0F5B                             i1___awmod@divisor 0078  
                           i1___awmod@counter 007C                                      ___int_sp 0000  
                       _TMR1_InterruptHandler 0040                                      __ptext10 072B  
                                    __ptext11 0674                                      __ptext20 0F5B  
                                    __ptext12 003B                                      __ptext21 0FDE  
                                  _T1GCONbits 0019                                      __ptext22 05FC  
                                    __ptext14 0FAF                                      __ptext23 077D  
                                    __ptext15 0002                                      __ptext24 06D0  
                                    __ptext16 040C                                      __ptext25 0224  
                                    __ptext17 0F9E                                      __ptext18 0F7A  
                                    __ptext19 0F8F          __end_of_TMR1_DefaultOverflowCallback 0003  
                _TMR1_DefaultOverflowCallback 0002                                      int$flags 007E  
          __end_of_INTERRUPT_InterruptManager 0029                    _INTERRUPT_InterruptManager 0004  
                                  _INTCONbits 000B                                 i1_SetSegments 0224  
                        _INT_InterruptHandler 005D                        ??_INTERRUPT_Initialize 0030  
                                    intlevel1 0000                                    _IO_RA0_ISR 0F8F  
                     ?_PIN_MANAGER_Initialize 0070                                    i1Display@a 0020  
               ?_TMR1_DefaultOverflowCallback 0070                      ?_INT_SetInterruptHandler 002E  
                    __end_of_CLOCK_Initialize 0F62                                 __pstringtext1 1000  
                              ?i1_SetSegments 0070                                   Display@ones 00A3  
                                 Display@tens 00A5                                    _TMR1_Start 0000  
                                  _TMR1_Write 0F9E                __end_of_PIN_MANAGER_Initialize 07F3  
                             _PIN_MANAGER_IOC 0F7A                               _TMR1_Initialize 0FC5  
